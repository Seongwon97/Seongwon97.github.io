{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring-WebFlux/20230216-상황별_사용해야하는_Operator_정리/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"해당 게시글은 projectreactor.io에서 제공하는 문서를 번역한 글입니다. 각각의 오퍼레이터들의 확실한 동작에 대해 살펴보기보다 “이런 상황에는 이런 메서드를 사용해야하는구나!”, “이런 메서드들도 존재하구나!”와 같은 배움을 얻기 위해 문서를 읽으며 간단히 번역해봤습니다. 아직 사용해보지 못한 오퍼레이터들이 많아 번역한 글이 미흡할 수 있는 점…","html":"<p>해당 게시글은 <a href=\"https://projectreactor.io/docs/core/release/reference/#which-operator\">projectreactor.io에서 제공하는 문서</a>를 번역한 글입니다. 각각의 오퍼레이터들의 확실한 동작에 대해 살펴보기보다 “이런 상황에는 이런 메서드를 사용해야하는구나!”, “이런 메서드들도 존재하구나!”와 같은 배움을 얻기 위해 문서를 읽으며 간단히 번역해봤습니다. 아직 사용해보지 못한 오퍼레이터들이 많아 번역한 글이 미흡할 수 있는 점 양해부탁드립니다.</p>\n<h1 id=\"creating-a-new-sequence\" style=\"position:relative;\"><a href=\"#creating-a-new-sequence\" aria-label=\"creating a new sequence permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Creating a New Sequence…</strong></h1>\n<ul>\n<li>\n<p><code>T</code> 타입을 방출하는 시퀀스 생성: <code>just()</code></p>\n<ul>\n<li><code>Optional&#x3C;T></code>로부터 생성: <code>Mono#justOrEmpty(Optional&#x3C;T>)</code></li>\n<li><code>null</code>이 될 수 있는 <code>T</code>로부터 생성: <code>Mono#justOrEmpty(T)</code></li>\n<li>T 타입을 방출하는 메서드로부터 생성할 때도 사용 가능하다.</li>\n<li>데이터를 Lazy하게 처리하고 싶다면 <code>Mono#fromSupplier</code> 또는 just 안에서 <code>defer</code>를 사용</li>\n<li>여러개의 T를 방출: <code>Flux#just(T…)</code></li>\n</ul>\n</li>\n<li>\n<p>Iterate 관련</p>\n<ul>\n<li>배열: <code>Flux#fromArray</code></li>\n<li>Collection, Iterable: <code>Flux#fromIterable</code></li>\n<li>범위 내의 정수: <code>Flux#range</code></li>\n<li>각각의 Subscription에 제공된 Stream: <code>Flux#fromStream(Supplier&#x3C;Stream>)</code></li>\n</ul>\n</li>\n<li>\n<p>다양한 단일 값</p>\n<ul>\n<li>Supplier<T>: <code>Mono#fromSupplier</code></li>\n<li>task: <code>Mono#fromCallable</code>, <code>Mono#fromRunnable</code></li>\n<li>CompletableFuture<T>: <code>Mono#fromFuture</code></li>\n</ul>\n</li>\n<li>비어있는 Sequence생성: <code>empty</code></li>\n<li>\n<p>에러 생성: <code>error</code></p>\n<ul>\n<li>Throwable을 Lazy하게 처리하고 싶다면: <code>error(Supplier&#x3C;Throwable>)</code></li>\n</ul>\n</li>\n<li>아무것도 하지 않는 Sequence생성: <code>never</code></li>\n<li>구독시점에 정해지는 Sequence생성: <code>defer</code></li>\n<li>disposable 자원에 의존하는 Sequence를 생성: <code>using</code></li>\n<li>\n<p>프로그래밍 방식으로 이벤트를 생성</p>\n<ul>\n<li>동기적으로 1개씩: <code>Flux#generate</code></li>\n<li>비동기적으로(동기적도 가능), 한번에 여러개씩: <code>create</code> (Mono의 경우 여러개씩 방출은 안된다.)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"transforming-an-existing-sequence\" style=\"position:relative;\"><a href=\"#transforming-an-existing-sequence\" aria-label=\"transforming an existing sequence permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Transforming an Existing Sequence</strong></h1>\n<ul>\n<li>\n<p>기존 데이터를 변형할 경우</p>\n<ul>\n<li>1:1로 변형 : <code>map</code></li>\n<li>단순히 캐스팅만 할 경우 : <code>cast</code></li>\n<li>각 소스 값의 index를 구체화 : <code>Flux#index</code></li>\n<li>1:N으로 변형 : <code>flatMap</code> + 팩터리 메서드</li>\n<li>프로그래밍 방식으로 1:N 각 source element 또는 state로 변형 : <code>handle</code></li>\n<li>각각의 source item에 대해 비동기로 작업을 수행할 경우(e.g. urls to http request): <code>flatMap</code> + 비동기 <code>publisher</code>를 반환하는 메서드</li>\n<li>일부 데이터를 무시할 경우: 무시할 데이터가 해당하는 조건에 대해 flatMap의 람다식에서 <code>Mono.empty()</code>를 반환</li>\n<li>원래 sequence 순서를 유지할 경우 : <code>Flux#flatMapSequential</code> (비동기 프로세스들을 받을 때마다 바로 트리거하지만 결과를 재정렬하며 순서룰 유지한다.)</li>\n<li>Mono source이고 비동기 작업이 여러 값을 반환할 경우: <code>Mono#flatMapMany</code></li>\n</ul>\n</li>\n<li>\n<p>기존 sequence에 요소를 추가하고 싶은 경우</p>\n<ul>\n<li>시작 부분에 추가할 경우: <code>Flux#startWith(T...)</code></li>\n<li>끝 부분에 추가할 경우: <code>Flux#concatWith(T...)</code></li>\n</ul>\n</li>\n<li>\n<p>Flux를 집계할 경우</p>\n<ul>\n<li>List로 : <code>Flux#collectList</code>, <code>Flux#collectSortedList</code>(<code>Mono&#x3C;List&#x3C;T>></code>로 변환되어 반환된다)</li>\n<li>Map으로 : <code>Flux#collectMap</code>, <code>Flux#collectMultiMap</code> (각각 <code>Mono&#x3C;Map&#x3C;K, T>></code>, <code>Mono&#x3C;Map&#x3C;K, Collection>></code>로 변환되어 반환된다.)</li>\n<li>임의의 container로 : <code>Flux#collect</code></li>\n<li>sequence 크기 반환: <code>Flux#count</code></li>\n<li>각각의 element사이에 function을 적용할 경우: <code>Flux#reduce</code></li>\n<li>중간에 값을 방출할 경우 : <code>Flux#scan</code></li>\n<li>predicate을 통해 boolean값</li>\n<li>모든 값에 대해 (AND) : <code>Flux#all</code></li>\n<li>최소한 한개 값에 (OR) : <code>Flux#any</code></li>\n<li>최소한 한개의 값이라도 있는지 확인: <code>Flux#hasElements</code></li>\n<li>특정 값이 값이 있는지 확인 : <code>Flux#hasElement</code></li>\n</ul>\n</li>\n<li>\n<p>Publisher를 결합할 경우</p>\n<ul>\n<li>순서대로 : <code>Flux#concat</code> 또는 <code>.concatWith(other)</code></li>\n<li>남은 Publisher가 방출될 때까지 오류를 지연시킬 경우 : <code>Flux#concatDelayError</code></li>\n<li>다음 Publisher를 바로 subscribe할 경우 : <code>Flux#mergeSequential</code></li>\n<li>방출된 순서대로 결합 (기존 순서가 아닌 도착하는 순서로 결합) : <code>Flux#merge</code> / <code>.mergeWith(other)</code></li>\n<li>타입이 다르다면 변환후 결합: <code>Flux#zip</code> / <code>Flux#zipWith</code></li>\n<li>짝으로 된 값으로</li>\n<li>2개의 Mono를 Tuple2로 변환 : <code>Mono#zipWith</code></li>\n<li>N개의 Mono가 모두 완료되었을 때 : <code>Mono#zip</code></li>\n<li>종료를 조정하며</li>\n<li>1개의 Mono와 아무 source를 Mono<Void>로 : <code>Mono#and</code></li>\n<li>N개의 source가 모두 완료되었을 때 : <code>Mono#when</code></li>\n<li>\n<p>임의의 container 유형으로 :</p>\n<ul>\n<li>모든 side에서 값을 방출할 때마다 : <code>Flux#zip</code></li>\n<li>다른 side에 새로운 값이 도착할 때마다 : <code>Flux#combineLatest</code></li>\n</ul>\n</li>\n<li>첫번째 Publisher만을 선택:</li>\n<li>값을 생성(onNext): <code>firstWithValue</code></li>\n<li>신호 생성 : <code>firstWithSignal</code></li>\n<li>source sequence의 요소에 의해 트리거(각 요소는 Publisher에 매핑된다) : <code>switchMap</code></li>\n<li>다음 publisher의 시작에 의해 트리거 : <code>switchOnNext</code></li>\n</ul>\n</li>\n<li>\n<p>기존 sequence를 반복 : <code>repeat</code></p>\n<ul>\n<li>시간 간격으로 : <code>Flux.interval(duration).flatMap(tick -> myExistingPublisher)</code></li>\n</ul>\n</li>\n<li>\n<p>empty sequence를 가지고 있는 경우</p>\n<ul>\n<li>대체 값을 원하는 경우 : <code>defaultIfEmpty</code></li>\n<li>다른 sequence를 원하는 경우 : <code>switchIfEmpty</code></li>\n</ul>\n</li>\n<li>\n<p>sequence를 가지고 있지만 값에는 관심이 없는경우 : <code>ignoreElements</code></p>\n<ul>\n<li><code>Mono&#x3C;Void></code>로 완료를 표현하고 싶은 경우 : <code>then</code></li>\n<li>마지막에 다른 작업의 완료를 기다리고 싶은 경우 : <code>thenEmpty</code></li>\n<li>마지막에 다른 Mono로 변경하고 싶은 경우 : <code>Mono#then(mono)</code></li>\n<li>마지막에 단일 값을 방출하고 싶은 경우 : <code>Mono#thenReturn(T)</code></li>\n<li>마지막에 Flux로 변경하고 싶은 경우 : <code>thenMany</code></li>\n</ul>\n</li>\n<li>\n<p>완료를 연기하고 싶은 Mono가 있는 경우:</p>\n<ul>\n<li>dl 값에서 파생된 다른 Publisher가 완료될 때까지 : <code>Mono#delayUntil(Function)</code></li>\n</ul>\n</li>\n<li>\n<p>요소를 sequence graph로 재귀적으로 확장하고 조합하고 싶은 경우</p>\n<ul>\n<li>너비 우선으로 먼저 확장하기 : <code>expand(Function)</code></li>\n<li>깊이 우선으로 먼저 확장하기 : <code>expandDeep(Function)</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"peeking-into-a-sequence\" style=\"position:relative;\"><a href=\"#peeking-into-a-sequence\" aria-label=\"peeking into a sequence permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Peeking into a Sequence</strong></h1>\n<ul>\n<li>\n<p>최종 시퀀시의 변형 없이</p>\n<ul>\n<li>다음에 대해 통지를 받거나 추가적인 동작을 실행하고 싶을 때,</li>\n<li>방출 : <code>doOnNext</code></li>\n<li>완료(값이 있다면 그 값도 포함) : <code>Flux#doOnComplete</code>, <code>Mono#doOnSuccess</code></li>\n<li>에러 종료 : <code>doOnError</code></li>\n<li>취소 : <code>doOnCancel</code></li>\n<li>\n<p>시퀀스의 시작: <code>doFirst</code></p>\n<ul>\n<li><code>Publisher#subscribe(Subscriber)</code>에 연결된다.</li>\n</ul>\n</li>\n<li>\n<p>구독(subscription)이후: <code>doOnSubscribe</code></p>\n<ul>\n<li><code>Subscriber#onSubscribe(Subscription)</code>에 연결된다.</li>\n</ul>\n</li>\n<li>요청: <code>doOnRequest</code></li>\n<li>\n<p>완료 또는 에러: <code>doOnTerminate</code></p>\n<ul>\n<li>다운 스트림으로 전파된 이후에 필요하면: <code>doAfterTerminate</code></li>\n</ul>\n</li>\n<li>모든 Signal 타입: <code>doOnEach</code></li>\n<li>모든 종료 조건(완료, 에러, 취소): <code>doFinally</code></li>\n<li>내부적으로 발생하는 로그를 볼 때: <code>log</code></li>\n</ul>\n</li>\n<li>\n<p>모든 이벤트를 알고 싶을 때</p>\n<ul>\n<li>각각의 Signal로 표현되는 객체에 대해</li>\n<li>sequence 외부에서 callback으로: <code>doOnEach</code></li>\n<li>\n<p>기본의 onNext를 통한 방출 대신: <code>materialize</code></p>\n<ul>\n<li>onNext로 다시 돌아가고 싶다면 <code>dematerialize</code></li>\n</ul>\n</li>\n<li>로그를 한 줄로: <code>log</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"filtering-a-sequence\" style=\"position:relative;\"><a href=\"#filtering-a-sequence\" aria-label=\"filtering a sequence permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Filtering a Sequence</strong></h1>\n<ul>\n<li>\n<p>시퀀스를 필터링 하고 싶은 경우</p>\n<ul>\n<li>임의의 기준을 기반으로: <code>filter</code></li>\n<li>비동기로 계산해야한다면 <code>filterWhen</code></li>\n<li>방출된 객체의 타입을 제한해야할 경우: <code>ofType</code></li>\n<li>모든 값들을 무시해야할 경우: <code>ignoreElements</code></li>\n<li>중복된 값들을 무시할 경우</li>\n<li>전체 시퀀스에 대해(논리적으로 중복이 없는 set): <code>Flux#distinct</code></li>\n<li>이후 방출된 값에 대한 중복 제거: <code>Flux#distincUntilChanged</code></li>\n</ul>\n</li>\n<li>\n<p>시퀀스의 subset을 획득하고 싶은 경우</p>\n<ul>\n<li>N개의 요소 획득</li>\n<li>\n<p>시퀀스의 앞부분을 얻고 싶은 경우: <code>Flux#take(long)</code></p>\n<ul>\n<li>업스트림에서 무제한적으로 요청 : <code>Flux#take(long, false)</code></li>\n<li>Duration을 기준으로: <code>Flux#take(Duration)</code></li>\n<li>첫번째 요소만 Mono로: <code>Flux#next()</code></li>\n</ul>\n</li>\n<li>시퀀스의 마지막부분을 얻고 싶은 경우 : <code>Flux#takeLast</code></li>\n<li>기준을 충족할 때까지 : <code>Flux#takeUntil</code> (pridicate-based), <code>Flux#takeUntilOther</code> (companion publisher-based)</li>\n<li>기준이 충족되는 동안: <code>Flux#takeWhile</code></li>\n<li>요소 1개를 획득</li>\n<li>특정 위치의 요소: <code>Flux#elementAt</code></li>\n<li>\n<p>마지막 부분을 얻을 경우: <code>.takeLast(1)</code></p>\n<ul>\n<li>비어 있을 때 에러를 방출할 경우: <code>Flux#last()</code></li>\n<li>비어 있을 때 디폴트 값을 방출할 경우: <code>Flux#last(T)</code></li>\n</ul>\n</li>\n<li>요소를 건너뛰고 싶은 경우</li>\n<li>\n<p>시퀀스의 앞부분부터: <code>Flux#skip(long)</code></p>\n<ul>\n<li>Duration을 기준으로: <code>Flux#skip(Duration)</code></li>\n</ul>\n</li>\n<li>시퀀스의 마지막 부분을: <code>Flux#skipLast</code></li>\n<li>기준을 충족할 때까지 : <code>Flux#skipUntil</code> (pridicate-based), <code>Flux#skipUntilOther</code> (companion publisher-based)</li>\n<li>기준이 충족되는 동안: <code>Flux#skipWhile</code></li>\n<li>아이템들을 샘플링할 경우</li>\n<li>\n<p>Duration: <code>Flux#sample(duration)</code></p>\n<ul>\n<li>마지막 요소 대신 샘플링 윈도우에서 첫번째 요소를 유지할 경우: <code>sampleFirst</code></li>\n</ul>\n</li>\n<li>Publisher기반 윈도우로: <code>Flux#sample(Publisher)</code></li>\n<li>Publisher ‘timing out’을 기반으로: <code>Flux#sampleTimeout</code> (각각의 요소들은 Publisher를 트리거하고 Publisher가 다음과 겹치지 않으면 방출한다)</li>\n<li>요소가 최대 1개라 예상할 경우(1개를 초과하면 에러가 발생한다)</li>\n<li>시퀀스가 비어있을 때 에러를 원할 경우: <code>Flux#single()</code></li>\n<li>시퀀스가 비어있을 때 디폴트 값을 원하는 경우: <code>Flux#single(T)</code></li>\n<li>비어있는 시퀀스도 허용할 경우: <code>Flux#singleOrEmpty()</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"handling-errors\" style=\"position:relative;\"><a href=\"#handling-errors\" aria-label=\"handling errors permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Handling Errors</strong></h1>\n<ul>\n<li>\n<p>에러 시퀀스를 생성: <code>error</code></p>\n<ul>\n<li>성공한</li>\n</ul>\n</li>\n<li>\n<p>try/catch와 동일한 처리를 하고 싶은 경우</p>\n<ul>\n<li>exception을 throwing: <code>error</code></li>\n<li>exception을 catch</li>\n<li>디폴트 값으로 falling back: <code>onErrorReturn</code></li>\n<li>에러를 swallow(삼키기) <code>onErrorComplete</code></li>\n<li>다른 Flux나 Mono로 falling back: <code>onErrorResume</code></li>\n<li>Exception을 감싸고 다시 던질 경우: <code>onErrorMap(t → new RuntimeException(t))</code></li>\n<li>finaly 블록: <code>doFinally</code></li>\n<li>java7에서의 using 패턴: <code>using</code></li>\n</ul>\n</li>\n<li>\n<p>에러를 복구하고 싶은 경우</p>\n<ul>\n<li>falling back:</li>\n<li>값으로: <code>onErrorReturn</code></li>\n<li>에러를 삼켜서 완료 상태로: <code>onErrorComplete</code></li>\n<li>에러에 따라 다른 Publisher나 Mono로: <code>Flux#onErrorResume</code>, <code>Mono#onErrorResume</code></li>\n<li>재시도</li>\n<li>간단한 정책(최대 시도 횟수)을 통해: <code>retry()</code>, <code>retry(long)</code></li>\n<li>companion control Flux를 트리거: <code>retryWhen</code></li>\n<li>표준 백오프 전략을 사용: <code>retryWhen(Retry.backoff(..))</code></li>\n</ul>\n</li>\n<li>\n<p>Backpressure의 오류 처리 (upstream에서 최대 요청을 하고 downstream이 충분한 요청을 생성하지 않을 경우 적용)</p>\n<ul>\n<li>특별한 IllegalStateException을 throwing : <code>Flux#onBackpressureError</code></li>\n<li>초과한 값들을 드랍 : <code>Flux#onBackpressureDrop</code></li>\n<li>마지막에 받은 아이템은 제외 : <code>Flux#onBackpressureLatest</code></li>\n<li>초과 값들을 버퍼링 (바운드 또는 언바운드) : <code>Flux#onBackpressureBuffer</code></li>\n<li>bounded buffer가 overflow 시 전략 적용 : <code>Flux#onBackpressureBuffer</code> with a BufferOverflowStrategy</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"working-with-time\" style=\"position:relative;\"><a href=\"#working-with-time\" aria-label=\"working with time permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Working with Time</strong></h1>\n<ul>\n<li>\n<p>제공된 데이터의 최상의 정밀도 및 다기능성으로 측정된 시간을 방출하고 싶을 때: <code>timed</code></p>\n<ul>\n<li>Timed<T>#elapsed() for Duration since last onNext</li>\n<li>Timed<T>#timestamp() for Instant representation of the epoch timestamp (milliseconds resolution)</li>\n<li>Timed<T>#elapsedSinceSubcription() for Duration since subscription (rather than last onNext)</li>\n<li>can have nanoseconds resolution for elapsed Durations</li>\n</ul>\n</li>\n<li>방출 사이에 너무 많은 지연이 있어 sequence가 중단되기를 원할 경우 : <code>timeout</code></li>\n<li>일정한 시간 간격으로 방출하고 싶은 경우 : <code>Flux#interval</code></li>\n<li>초기 지연 후 단일 0을 방출하고 싶은 경우 : <code>Mono.delay</code></li>\n<li>\n<p>지연을 유발하고 싶을 때</p>\n<ul>\n<li>onNext 신호 사이마다 : <code>Mono#delayElement</code>, <code>Flux#delayElements</code></li>\n<li>subscription을 하기 전 : <code>delaySubscription</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"splitting-a-flux\" style=\"position:relative;\"><a href=\"#splitting-a-flux\" aria-label=\"splitting a flux permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Splitting a Flux</h1>\n<ul>\n<li>\n<p>경계 기준을 정해서 FLux<T>를 Flux&#x3C;Flux<T>>로 분리하고 싶을 경우</p>\n<ul>\n<li>사이즈를 경제로: <code>window(int)</code></li>\n<li>window를 overlapping하거나 드랍하고 싶을 경우: <code>window(int, int)</code></li>\n<li>Duration을 경계로: <code>window(Duration)</code></li>\n<li>window를 overlapping하거나 드랍하고 싶을 경우: <code>window(Duration, Duration)</code></li>\n<li>사이즈 또는 시간을 경계로(사이즈 카운트에 도달하거나 시간 초과가되면 윈도우가 닫힌다): <code>windowTimeout(int, Duration)</code></li>\n<li>Predicate 기반: <code>windowUtil</code></li>\n<li>Control Publisher의 onNext로 표현되는 임의의 경계에 의해 동작: <code>window(Publisher)</code>, <code>windowWhen</code></li>\n</ul>\n</li>\n<li>\n<p>Flux<T>를 분리하여 경계를 정해 같은 경계의 요소들을 버퍼에 나눠 담고 싶은 경우</p>\n<ul>\n<li>List로</li>\n<li>\n<p>사이즈 경계로: <code>buffer(int)</code></p>\n<ul>\n<li>버퍼를 overlapping하거나 드랍하고 싶을 경우: <code>buffer(int, int)</code></li>\n</ul>\n</li>\n<li>\n<p>Duration을 경계로: <code>buffer(Duration)</code></p>\n<ul>\n<li>window를 overlapping하거나 드랍하고 싶을 경우: <code>buffer(Duration, Duration)</code></li>\n</ul>\n</li>\n<li>사이즈 또는 시간을 경계로: <code>bufferTimeout(int, Duration)</code></li>\n<li>\n<p>Predicate 기반: <code>bufferUtil(Predicate)</code></p>\n<ul>\n<li>다음 버퍼의 경계를 트리거한 요소를 넣고 싶을 경우: <code>.bufferUtil(predicate, true)</code></li>\n<li>Predicate이 일치하는 동안은 버퍼링하고 경계를 트릭한 요소를 드랍하고 싶을 경우: <code>bufferWhile(Predicate)</code></li>\n</ul>\n</li>\n<li>Control Publisher의 onNext로 표현되는 임의의 경계에 의해 동작: <code>buffer(Publisher)</code>, <code>bufferWhen</code></li>\n<li>임의의 Collection 타입인 C로: use variants like <code>buffer(int, Supplier&#x3C;C>)</code></li>\n</ul>\n</li>\n<li>특성을 공유하는 요소가 동일한 하위 플럭스를 이루도록 Flux<T>를 분할하고 싶다면: <code>groupBy(Function&#x3C;T,K>)</code></li>\n</ul>\n<h1 id=\"going-back-to-the-synchronous-world\" style=\"position:relative;\"><a href=\"#going-back-to-the-synchronous-world\" aria-label=\"going back to the synchronous world permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Going Back to the Synchronous World</strong></h1>\n<p>Note: <code>Mono#toFuture</code>를 제외한 모든 메서드는 “non-blocking only” 표시가 된 스케줄러 내에서 호출되면 <code>UnsupportedOperationException</code>을 발생시킨다.</p>\n<ul>\n<li>\n<p><code>Flux&#x3C;T></code>로부터</p>\n<ul>\n<li>첫 번째 요소를 얻을 때까지 차단(block)하고 싶다면: <code>Flux#blockFirst</code></li>\n<li>타임아웃을 주려면: <code>Flux#blockFirst(Duration)</code></li>\n<li>마지막 요소를 얻을 때까지 차단(block)하고 싶다면: <code>Flux#blockLast</code></li>\n<li>타임아웃을 주려면: <code>Flux#blockLast(Duration)</code></li>\n<li>동기로 <code>Iterable&#x3C;T></code>로 전환하고 싶다면: <code>Flux#toIterable</code></li>\n<li>동기로 Java8의 <code>Stream&#x3C;T></code>로 전환하고 싶다면: <code>Flux#toStream</code></li>\n</ul>\n</li>\n<li>\n<p><code>Mono&#x3C;T></code>로부터</p>\n<ul>\n<li>값을 얻을 때까지 차단(block)하고 싶은 경우: <code>Mono#block</code></li>\n<li>타임아웃을 주려면: <code>Mono#block(Duration)</code></li>\n<li><code>CompletableFuture&#x3C;T></code>: <code>Mono#toFuture</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"multicasting-a-flux-to-several-subscribers\" style=\"position:relative;\"><a href=\"#multicasting-a-flux-to-several-subscribers\" aria-label=\"multicasting a flux to several subscribers permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multicasting a Flux to several Subscribers</h1>\n<ul>\n<li>\n<p>여러 Subscriber를 하나의 Flux에 연결하고 싶은 경우:</p>\n<ul>\n<li><code>connect()</code>를 통해 소스를 트리거하는 시점을 결정: <code>publish()</code> (<code>ConnectableFlux</code>를 반환)</li>\n<li>소스를 즉시 트리거(이후의 구독자들은 이후의 데이터를 본다): <code>share()</code></li>\n<li>충분한 구독자가 등록되어 소스에 영구적인 연결: <code>publish().autoConnect(n)</code></li>\n<li>구독자가 임계값 위/아래로 이동하면 자동으로 소스의 연결 및 취소: <code>publish().refCount(n)</code></li>\n<li>취소하기 전에 신규 가입자가 들어올 수 있는 기회를 제공: <code>publish().refCount(n, Duration)</code></li>\n</ul>\n</li>\n<li>\n<p>Publisher의 데이터를 캐시하고 이후의 구독자들에게 재전송하고 싶은 경우:</p>\n<ul>\n<li>요소 n개까지: <code>cache(int)</code></li>\n<li>Duration내에서 본 최신 요소를 캐싱한다: cache(Duration)</li>\n<li>n개 이하의 요소를 유지하고 싶은 경우: <code>cache(int, Duration)</code></li>\n<li>소스를 즉시 트리거하지 않고: <code>Flux#replay</code> (<code>ConnectableFlux</code>를 반환)</li>\n</ul>\n</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","tableOfContents":"<ul>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#creating-a-new-sequence\"><strong>Creating a New Sequence…</strong></a></li>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#transforming-an-existing-sequence\"><strong>Transforming an Existing Sequence</strong></a></li>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#peeking-into-a-sequence\"><strong>Peeking into a Sequence</strong></a></li>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#filtering-a-sequence\"><strong>Filtering a Sequence</strong></a></li>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#handling-errors\"><strong>Handling Errors</strong></a></li>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#working-with-time\"><strong>Working with Time</strong></a></li>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#splitting-a-flux\">Splitting a Flux</a></li>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#going-back-to-the-synchronous-world\"><strong>Going Back to the Synchronous World</strong></a></li>\n<li><a href=\"/Spring-WebFlux/20230216-%EC%83%81%ED%99%A9%EB%B3%84_%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94_Operator_%EC%A0%95%EB%A6%AC/#multicasting-a-flux-to-several-subscribers\">Multicasting a Flux to several Subscribers</a></li>\n</ul>","frontmatter":{"date":"2023년 02월 16일","title":"[Reactor] 상황별 사용해야하는 Operator 정리","tags":["SpringFramework","Reactive Programming","Reactor"]}}},"pageContext":{"slug":"/Spring-WebFlux/20230216-상황별_사용해야하는_Operator_정리/","previous":{"fields":{"slug":"/ETC/20230214-Blocking_Non-blocking_Synchronous_Asynchronous/"},"frontmatter":{"title":"Blocking/Non-blocking & Synchronous/Asynchronous"}},"next":null}},"staticQueryHashes":["3911196313","4111100897"]}