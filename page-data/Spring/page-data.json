{"componentChunkName":"component---src-templates-category-js","path":"/Spring/","result":{"data":{"site":{"siteMetadata":{"configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"1. 들어가며 모모팀 서비스의 기능 개발을 1차적으로 마무리한 후, 의존관계와 성능 개선을 진행하게 되었다. 이번 포스트에서는 3차례에 걸친 서비스 성능 개선 작업 전/후로 성능이 얼마나 향상되었는지 비교해보려한다. 앞서 진행한 의존관계 개선과 쿼리 개선 과정을 자세히 확인하고 싶다면 아래의 포스트를 확인하길 바란다. 모모팀 서비스 성능 개선기1 (의존관…","fields":{"slug":"/Spring/20221020-모모팀-서비스성능-개선결과/"},"frontmatter":{"date":"2022년 10월 20일","title":"모모팀 서비스 성능 개선 결과 (성능 테스트)","tags":["SpringFramework","성능 개선기","성능 테스트","JMeter","모니터링","Prometheus","Grafana"]}}},{"node":{"excerpt":"들어가며 모모팀 서비스 개선을 하며 지금까지 의존관계와 조회 쿼리 개선을 진행하였다. 이번 포스트에서는 지난 조회쿼리 개선에 이어서 남은 CUD관련 기능의 쿼리를 분석 및 개선하며 경험한 내용에 대해 정리를 해보려고 한다. 앞서 진행한 의존관계 개선과 조회 쿼리 개선 관련 내용을 확인하고 싶다면 아래의 포스트를 확인하길 바란다. 모모팀 서비스 성능 개선기…","fields":{"slug":"/Spring/20221017-모모팀-서비스성능-개선기3/"},"frontmatter":{"date":"2022년 10월 17일","title":"모모팀 서비스 성능 개선기3 (CUD 쿼리 개선)","tags":["SpringFramework","성능 개선기","CUD 쿼리 개선","orphanRemoval의 문제","OneToMany 단방향 관계의 문제"]}}},{"node":{"excerpt":"들어가며 지금까지는 서비스 개발을 진행하며 API를 호출하였을 때 실행되는 쿼리의 수, 성능상의 문제점 등을 생각하지 않고 일단 돌아가는 코드를 만들자! 하면서 기능 개발에만 몰두하였었다. 하지만 성능상의 문제를 생각하지 않고 개발을 진행하고 우리 서비스의 목표 인원(우테코 크루 + 코치, 약 150명)이 동시 접속을 하여 서비스를 이용한다는 상황으로 부…","fields":{"slug":"/Spring/20221014-모모팀-서비스성능-개선기2/"},"frontmatter":{"date":"2022년 10월 14일","title":"모모팀 서비스 성능 개선기2 (조회 쿼리 개선)","tags":["SpringFramework","성능 개선기","조회 쿼리 개선","fetch join","DTO반환"]}}},{"node":{"excerpt":"기존 객체 의존관계의 문제점 모모팀 프로젝트는 모임 관련 서비스인만큼 모임 찜하기, 모임 참여하기 등의 기능이 추가될 때마다 Group(모임)객체를 중심으로 개발이 진행되게 되었다. 처음에는 성능 생각 없이 주먹구구식으로 개발을 진행하다보니 Group객체에 기능이 하나씩 붙게 되며 Group이라는 객체가 점점 커지게 되었다. Group과 관계를 맺고 있는…","fields":{"slug":"/Spring/20221009-모모팀-서비스성능-개선기1/"},"frontmatter":{"date":"2022년 10월 09일","title":"모모팀 서비스 성능 개선기1 (의존관계 개선)","tags":["SpringFramework","성능 개선기","의존관계 개선"]}}},{"node":{"excerpt":"학습 계기 프로젝트를 진행하며 도메인간의 연관관계를 분리하는 작업을 진행하다보니 Spring의 Event방식에 대해 알게 되었다. 이번 포스트에서는 프로젝트에 Event를 사용하기 위해 학습한 내용에 대해 포스팅해보려 한다. 진행하였던 프로젝트의 연관관계 분리 작업에 대해 자세히 알고 싶다면 아래의 포스트를 보길 바란다. 모모팀 서비스 성능 개선기1 (의…","fields":{"slug":"/Spring/20221008-Spring의_Event/"},"frontmatter":{"date":"2022년 10월 08일","title":"[Spring] Spring의 Event란 무엇일까?","tags":["SpringFramework","Event"]}}},{"node":{"excerpt":"학습 계기 모모팀 프로젝트를 진행하던중 애플리케이션 로그가 [WARN] firstResult/maxResults specified with collection fetch; applying in memory! 라는 한 가지 경고 로그가 도배된 것을 확인하였다. WARN레벨의 로그라 현재는 애플리케이션의 기능을 실행하는데에는 문제가 없으나 언제든지 성능상의 …","fields":{"slug":"/Spring/20220930-FetchJoin과-limit을-같이-사용하며-발생한-문제/"},"frontmatter":{"date":"2022년 09월 30일","title":"Fetch Join과 limit을 같이 사용하며 발생한 문제 - [WARN] firstResult/maxResults specified with collection fetch; applying in memory!","tags":["SpringFramework","JPA","Spring Data JPA","Warning Message","FetchJoin","Limit"]}}},{"node":{"excerpt":"1. Spring Data JPA에서 쿼리를 만드는 방법 이전 게시글에서 Spring Data JPA에 대해 알아보며 해당 모듈은 Data Access Layer의 구현을 최대한 개선하는 것을 목표로 만들어졌다고 하였다. 또한 Data JPA에서 제공하는 JpaRepository 에서는 CURD기능들과 페이징, 정렬 기능등의 DB와의 소통을 쉽게 할 수 …","fields":{"slug":"/Spring/20220913-Query-Method란/"},"frontmatter":{"date":"2022년 09월 13일","title":"[JPA] Spring Data JPA의 Query Method","tags":["SpringFramework","JPA","Spring Data JPA","Query Method"]}}},{"node":{"excerpt":"1. Spring Data JPA란? Spring Data는 관계형/비관계형 데이터베이스, Map-reduced 프레임워크 등의 여러 데이터 접근 관련 기술들을 쉽게 사용할 수 있는 모듈들을 제공하고 있다. 대표적으로 몇가지 모듈을 설명하자면 Spring Data JDBC, Spring Data JPA, Spring Data Redis 등의 여러 모듈들이…","fields":{"slug":"/Spring/20220911-Spring-Data-JPA란/"},"frontmatter":{"date":"2022년 09월 11일","title":"[JPA] Spring Data JPA란?","tags":["SpringFramework","JPA","Spring Data JPA"]}}},{"node":{"excerpt":"해당 포스트는 인프런 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 기반으로 작성하였습니다. 1. JPQL이란? JPA만의 기술을 사용했을 때는 DB의 데이터 조회를 식별자를 통한 조회와 객체 그래프를 통한 탐색만 가능하였다. 식별자를 통한 조회: em.find() 객체 그래프 탐색: a.getB().getC() 하지만 두가지 조회 방법…","fields":{"slug":"/Spring/20220829-JPA-JPQL/"},"frontmatter":{"date":"2022년 08월 29일","title":"[JPA] JPQL이란?","tags":["SpringFramework","JPA","JPQL","페치조인"]}}},{"node":{"excerpt":"해당 포스트는 인프런 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 기반으로 작성하였습니다. 1. 영속성 전이 (CASCADE) 1.1. 영속성 전이란? 영속성 전이를 알기 앞서 아래의 코드를 먼저 살펴보겠다. 1:N 관계인 Team과 Member 객체가 존재한다. 해당 객체를 이용하여 1개의 팀과 해당 팀에 참가하는 2명의 멤버를 만들…","fields":{"slug":"/Spring/20220826-JPA-영속성_전이와_고아객체/"},"frontmatter":{"date":"2022년 08월 26일","title":"[JPA] 영속성 전이와 고아객체","tags":["SpringFramework","JPA","영속성 전이","CADCADE","orphanRemoval"]}}},{"node":{"excerpt":"해당 포스트는 인프런 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 기반으로 작성하였습니다. 1. JPA의 Proxy JPA의 Fetch 전략에 대한 자세한 이해를 위해서는 프록시의 개념을 먼저 알아야 한다. 사실 프록시의 개념은 Spring AOP를 학습해본 사람이라면 알고 있을법한 개념이다. 프록시를 간단하게 설명하자면 실제 클래스를…","fields":{"slug":"/Spring/20220825-JPA-프록시와-지연로딩/"},"frontmatter":{"date":"2022년 08월 25일","title":"[JPA] 프록시와 지연로딩","tags":["SpringFramework","JPA","Proxy","Lazy Loading","Eager Loading"]}}},{"node":{"excerpt":"해당 포스트는 인프런 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 기반으로 작성하였습니다. 1. 이전까지의 데이터 중심의 연관관계 JPA를 사용하기 이전 JDBC를 이용한 개발을 할 때는 아래의 코드와 같이 Member가 참여한 Team의 정보를 알기 위해 teamId를 갖는 것과 같은 데이터 중심 설계로 진행하였을 것이다. 이러한 데…","fields":{"slug":"/Spring/20220824-JPA-엔티티간_연관관계/"},"frontmatter":{"date":"2022년 08월 24일","title":"[JPA] 엔티티간 연관관계","tags":["SpringFramework","JPA","Entity"]}}},{"node":{"excerpt":"해당 포스트는 인프런 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 기반으로 작성하였습니다. 1. JPA의 Entity란? Entity란 DB에서 영속적으로 저장된 데이터를 자바 객체로 매핑하여 '인스턴스의 형태'로 존재하는 데이터를 말한다. JPA는 자바의 ORM의 표준인만큼 간단한 설정만으로 DB의 데이터를 자바 객체로 매핑하는 엔티…","fields":{"slug":"/Spring/20220823-JPA-엔티티매핑/"},"frontmatter":{"date":"2022년 08월 23일","title":"[JPA] 엔티티(Entity) 매핑","tags":["SpringFramework","JPA","Entity"]}}},{"node":{"excerpt":"1. 프로파일(Profile)이란? 애플리케이션을 개발하다보면 실행 환경에 따라 구성 명세를 다르게 설정해야할 때가 존재한다. 예를 들면 배포를 위한 애플리케이션을 개발하다보면 로컬서버, 개발서버, 배포서버 등 실행되는 위치에 따라 실행 환경 설정이 달라지게 된다. 필자는 최근 진행한 프로젝트에서는 로컬의 경우 H2 DB 또는 로컬 PC에 설치해둔 MyS…","fields":{"slug":"/Spring/20220821-스프링-Profile이란/"},"frontmatter":{"date":"2022년 08월 21일","title":"[Spring] Spring Profile을 통한 실행 환경 분리","tags":["SpringFramework","Profile"]}}},{"node":{"excerpt":"학습 동기 모모팀 프로젝트를 진행하며 모임 검색 및 모임 조회에 필터링을 하는 기능을 개발하게 되었다. 필터링 기능을 쉽게 생각하여 가벼운 마음으로 개발을 시작하였으나 막상 개발을 해보니 생각할 내용이 너무나도 많이 있었다. 먼저 우리의 조회 기능 조건은 다음과 같았다. 먼저 모임 조회를 하는 상황은 큰 분류와 같이 4가지 상황에서 조회를 할 수 있으며 …","fields":{"slug":"/Spring/20220817-JPA-Specification/"},"frontmatter":{"date":"2022년 08월 17일","title":"[JPA] JPA Specification(Criteria)을 통한 조회 필터링 기능 구현","tags":["SpringFramework","JPA","Specification","동적 쿼리","Criteria"]}}},{"node":{"excerpt":"해당 포스트는 인프런 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 기반으로 작성하였습니다. 1. 영속성 컨텍스트란? 영속성 컨텍스트란 JPA를 이해하는데 가장 중요한 개념이다. 이는 엔티티를 영구 저장하는 환경이라는 뜻을 가진 논리적인 개념으로 어플리케이션과 DB사이에서 객체를 보관하는 가상의 DB같은 역할을 한다. 즉, 애플리케이션에…","fields":{"slug":"/Spring/20220706-엔티티-생명주기와-영속성-컨텍스트/"},"frontmatter":{"date":"2022년 07월 06일","title":"[JPA] 엔티티 생명주기와 영속성 컨텍스트","tags":["SpringFramework","JPA","영속성 컨텍스트","Entity"]}}},{"node":{"excerpt":"해당 포스트는 인프런 김영한님의 자바 ORM 표준 JPA 프로그래밍 - 기본편 강의를 기반으로 작성하였습니다. 1. ORM JPA의 개념을 알고자 한다면 먼저 ORM의 개넘을 알고 넘어가야 한다.\nORM은 Object Relational Mapping의 약자로 객체와 관계형 데이터베이스의 데이터를 자동으로 매핑해주는 일을 한다. 객체지향 프로그래밍은 클래…","fields":{"slug":"/Spring/20220705-JPA란/"},"frontmatter":{"date":"2022년 07월 05일","title":"[JPA] JPA란?","tags":["SpringFramework","JPA"]}}},{"node":{"excerpt":"1. ArgumentResolver란? ArgumentResolver는 어떠한 요청이 들어왔을 때 요청 객체로부터 원하는 객체를 만들어내는 일을 한다. 사실 우리도 지금껏 알게 모르게 ArgumentResolver를 사용해왔다. 우리가 요청의 Query Paramter, body, header 등에서 데이터를 추출하기 위해 사용하였던 아래의 스프링 어노테…","fields":{"slug":"/Spring/20220629-ArgumentResolver란/"},"frontmatter":{"date":"2022년 06월 29일","title":"[Spring] ArgumentResolver란 무엇일까?","tags":["SpringFramework","ArgumentResolver"]}}},{"node":{"excerpt":"Spring이란? 스프링 프레임워크는 Java 애플리케이션을 개발하기 위한 인프라를 제공하고 있다. 이는 DI를 포함한 여러 기능들을 제공하고 있으며 아래와 같은 많은 모듈들을 제공하고 있어 개발자들은 개발 시간을 크게줄일 수 있다. Spring JDBC Spring MVC Spring Security Spring AOP Spring ORM Spring …","fields":{"slug":"/Spring/20220628-Spring-vs-SpringBoot/"},"frontmatter":{"date":"2022년 06월 28일","title":"[Spring] Spring과 Spring Boot의 차이는 무엇일까?","tags":["SpringFramework","Spring Boot"]}}},{"node":{"excerpt":"스프링에서 공통 기능을 제거하는 대표적인 방법으로는 Filter, Interceptor, AOP가 있다. 이전 포스트인 Filter란 무엇인가? 에 이어서 이번 포스트에서는 공통 기능 제거 방법 중 Interceptor에 대해 알아볼 것이다. 1. Intetceptor란? Interceptor는 filter처럼 경로를 지정하여, 해당 경로에 매칭되는 re…","fields":{"slug":"/Spring/20220626-Interceptor란/"},"frontmatter":{"date":"2022년 06월 27일","title":"[Spring] Interceptor란 무엇일까?","tags":["SpringFramework","Interceptor"]}}},{"node":{"excerpt":"이전 포스트들에서 필터와 인터셉터에 대해 각각 비교해봤다. Filter란 무엇일까? Interceptor란 무엇일까? 두 포스트를 읽어보면 필터와 인터셉터의 관리하는 컨테이너와 실행 시점 등이 다르다는 것을 알 수 있을 것이다. 그래도 두 기능이 하는 일이 비슷하고 헷갈릴 수 있어 이번 포스트를 통해 둘의 차이점을 비교해보려 한다. 이번 포스트에서는 두 …","fields":{"slug":"/Spring/20220627-Filter와Interceptor차이/"},"frontmatter":{"date":"2022년 06월 27일","title":"[Spring] Filter와 Interceptor의 차이 비교","tags":["SpringFramework","Filter","Interceptor"]}}},{"node":{"excerpt":"왜 프레임워크를 사용할까? 우리가 스프링을 사용하는 이유에 대해 생각하려면 앞서 프레임워크를 왜 사용하는지에 대해서 생각을 해봐야 한다.\n우리가 프레임워크를 사용하는 몇가지 이유를 정리해봤다.  체계적인 코드관리로 유지보수가 용이하다. 기본설계 및 기능 라이브러리를 제공하여 개발 생산성이 높다 코드에 대한 재사용성이 높다 추상화된 코드 제공을 통해 확장성…","fields":{"slug":"/Spring/20220627-우리는-왜-스프링을-사용할까/"},"frontmatter":{"date":"2022년 06월 27일","title":"[Spring] 우리는 왜 스프링을 사용하는가?","tags":["SpringFramework","Framework"]}}},{"node":{"excerpt":"Filter란 무엇일까? 스프링에서 공통 기능을 제거하는 대표적인 방법으로는 Filter, Interceptor, AOP가 있다. 이번 포스트에서는 공통 기능 제거 방법 중 Filter에 대해 알아볼 것이다. 1. Filter란? 필터는 스프링에서 제공하는 것이 아닌 J2EE 표준 스펙 기능으로 Dispatcher Servlet으로 request가 가기 …","fields":{"slug":"/Spring/20220625-Filter란/"},"frontmatter":{"date":"2022년 06월 25일","title":"[Spring] Filter란 무엇일까?","tags":["SpringFramework","Filter"]}}},{"node":{"excerpt":"테스트 - MockMvc 1. MockMvc란? 스프링 프레임워크는 3.2버전 이후로 Spring MVC를 Mocking하여 웹 애플리케이션을 테스트 하는 MockMVC를 제공하고 있다. MockMvc는 Spring MVC Test Framework이라고도 불리며 웹 애플리케이션을 실제 서버(서블릿 컨테이너)의 실행 없이 가상 환경에서 테스트 Mock r…","fields":{"slug":"/Spring/20220624-MockMvc란/"},"frontmatter":{"date":"2022년 06월 24일","title":"[Spring 테스트] MockMvc란 무엇일까?","tags":["SpringFramework","Test","MockMvc"]}}},{"node":{"excerpt":"이번 게시글은 Spring에서 제공하는 테스트 라이브러리에 대한 간단한 설명과 @SpringBootTest를 이용한 통합 테스트를 하는 방법에 대해 정리해보고자 한다. 1. 테스트 의존성 추가하기 스프링은 테스트를 위해 아래의 2개의 Dependency를 제공하고 있다. spring-boot-test: core기능을 갖고 있다. spring-boot-st…","fields":{"slug":"/Spring/20220623-SpringBootTest어노테이션-학습하기/"},"frontmatter":{"date":"2022년 06월 23일","title":"[Spring 테스트] @SpringBootTest를 이용해 통합 테스트하기","tags":["SpringFramework","Test","SpringBootTest"]}}},{"node":{"excerpt":"Java Validation API란? HTTP request를 통해 Post Request와 같이 데이터를 받는 request를 받을 경우 데이터가 올바른 형식인지, 올바른 값인지 확인을 하고 만약 올바르지 않은 값이 들어온다면 Bad request를 보내야 할 것이다. 예를 들어 위의 Json형식의 데이터가 POST request의 Body로 넘어왔다…","fields":{"slug":"/Spring/20220622-Valid란/"},"frontmatter":{"date":"2022년 06월 22일","title":"[Spring] Validation Annotation이란? + DTO에서는 어디까지 검증해야할까?","tags":["SpringFramework","Java","Validation API","JSR 380","Valid"]}}},{"node":{"excerpt":"1. @RestController와 @Controller 스프링은 컨트롤러 어노테이션으로 @RestController와 @Controller어노테이션을 제공하고 있다. 이 두 어노테이션은 사용자의 요청을 받아 비즈니스 로직을 매핑해주고 결과를 반환해준다는 존재의 목적은 같지만 기본 반환값이 다르다는 차이점이 있다. 먼저 @RestController와 @C…","fields":{"slug":"/Spring/20220621-Controller와RestController차이/"},"frontmatter":{"date":"2022년 06월 21일","title":"[Spring] @RestController와 @Controller 비교하기","tags":["SpringFramework","Spring MVC","Controller","RestController"]}}},{"node":{"excerpt":"1. Lombok이란? Java로 개발을 하다보면 getter, setter, constructor작성 등의 많은 코드를 작성해야한다. Lombok은 이러한 기계적인 코드들을 어노테이션을 기반으로 코드를 자동화하여 작성해주는 Java의 라이브러리이다. Lombok을 사용하면 코드의 길이를 줄여 코드를 단순화하고 코드의 가독성을 키울 수 있다. 코드 자동 …","fields":{"slug":"/Spring/20220621-Lombok이란/"},"frontmatter":{"date":"2022년 06월 21일","title":"[Spring] Lombok 이란?","tags":["SpringFramework","Lombok"]}}},{"node":{"excerpt":"우리는 스프링 프로젝트를 작성하면 Url과 Http Method에 매칭되는 controller 메서드들을 만들 것이다. 이러한 요청들을 처리해주는 메서드들을 한 컨트롤러에 모아둘 수도 있으나 프로젝트의 규모가 커지게 되면 수백, 수천개의 API들을 관리해야하기에 대부분 아래와 같이 API의 기능, URL의 prefix따라 클래스를 분리하여 관리할 것이다.…","fields":{"slug":"/Spring/20220621-스프링MVC-동작방식/"},"frontmatter":{"date":"2022년 06월 21일","title":"[Spring] MVC 동작 방식 이해하기","tags":["SpringFramework","Spring MVC","Servlet","Dispatcher Servlet","Front Controller"]}}},{"node":{"excerpt":"1. 정적/동적 웹 페이지 서블릿이 생겨난 이유를 타고 올라가보면 동적 웹 페이지라는 개념이 나오게 된다. 과거에는 동적 웝 페이지의 지원이 되지 않아 정적 웹 페이지만 지원되었다. 서블릿은 동적 웹 페이지를 지원하는 기술이다. 서블릿에 대한 자세한 이야기는 이후에 하도록 하고 먼저 정적, 동적 웹 페이지에 대해 알아보겠다. 1.1. 정적 페이지 정적 웹…","fields":{"slug":"/Spring/20220620-Servlet이란/"},"frontmatter":{"date":"2022년 06월 20일","title":"[Spring] Servlet이란?","tags":["Web","Servlet"]}}},{"node":{"excerpt":"1. 의존성 자동주입 1.1. 의존성 주입 방법 이전 포스팅 에서 말했듯이 스프링에서 빈을 등록하는 방법에는 @Component를 사용하거나 @Configuration, @Bean을 사용하여야 한다. 여기서 빈들 사이에 의존 관계가 있다면 어떻게 설정을 하여야 할까? 우선 @Configuration과  @Bean을 사용해 빈을 등록하는 방법에서는 설정 클…","fields":{"slug":"/Spring/20220619-자동주입과-여러주입방법/"},"frontmatter":{"date":"2022년 06월 19일","title":"[Spring] 자동 주입과 여러 주입 방법","tags":["SpringFramework","Autowired","Constructor Injection","Setter Injection","Field Injection"]}}},{"node":{"excerpt":"1. Spring Bean이란? DI/IoC에 의해 우리는 스프링에게 객체의 생명주기를 스프링에게 맡기게 된다. 이로인해 스프링은 필요한 객체들을 Spring Container(IoC Container, Application Context)에 생성하고 생성한 객체들을 제공해주는데 이때 Spring Container가 관리하는 자바 객체(POJO(Plain…","fields":{"slug":"/Spring/20220616-스프링-Bean/"},"frontmatter":{"date":"2022년 06월 16일","title":"[Spring] Bean이란 무엇일까?","tags":["SpringFramework","Bean"]}}},{"node":{"excerpt":"@RequestParam, @RequestBody, @ModelAndAttribute 세가지 annotation은 모두 request의 데이터를 받아오기 위해 사용됩니다. @RequestParam 공식 문서를 보면 RequestParam은 다음과 같이 설명합니다. For access to the Servlet request parameters(that i…","fields":{"slug":"/Spring/20220615-RequestParam-RequestBody-ModelAndAttribute비교/"},"frontmatter":{"date":"2022년 06월 15일","title":"[Spring] - @RequestParam, @RequestBody, @ModelAndAttribute 차이 비교","tags":["SpringFramework","@RequestParam","@RequestBody","@ModelAndAttribute"]}}},{"node":{"excerpt":"DI (Dependency Injection) DI는 스프링의 3대 핵심 기술 중 하나로 외부에서 두 객체 간의 관계를 결정해주는 패턴이다.\n이는 객체의 관계 사이에 인터페이스를 둬서 클래스 레벨에서는 의존 관계가 고정되지 않도록 하고 런타임시에 의존 주입을 하여 결합도를 낮추고 유연성을 높여준다. 스프링의 3대 핵심 기술로는 IOC/DI, AOP, PS…","fields":{"slug":"/Spring/20220614-스프링-DI-IoC/"},"frontmatter":{"date":"2022년 06월 14일","title":"[Spring] DI,IoC란 무엇일까?","tags":["SpringFramework","DI","IoC"]}}},{"node":{"excerpt":"스프링에 해당 Bean들을 주입하였는데, Bean이 없어 Autowired를 할 수 없는 메시지가 나올 때가 있다. 이럴 경우 실제로 Bean 주입이 없을 수도 있으나, IntelliJ의 오류로 프로그램 실행 전에 Bean이 없다고 판단할 수도 있다. 그래서 이러한 에러가 발견될 경우, 먼저 프로그램 실행을 해보고, 그 후에 Bean이 실제로 생성되지 않…","fields":{"slug":"/Spring/20220502-스프링-couldnot-autowired-no-bean/"},"frontmatter":{"date":"2022년 05월 02일","title":"[Spring 에러처리] Could not autowired. No bean of~","tags":["SpringFramework","warning"]}}},{"node":{"excerpt":"초보 웹 개발자를 위한 스프링 5 책의 내용을 학습하던 중, 아래와 같은 warning메시지가 뜨는 것을 확인했습니다.  위의 warning 메시지는 스프링 구버전에 있는 에러 중의 하니이다. 해당 경고문의 해결은 간단하게도 Spring Framework 5.1이상, Spring Boot 2.1이상의 버전으로 업그레이드 하면 사라진다.  5.0.2버전이었…","fields":{"slug":"/Spring/20220502-스프링-error-Illegal-reflection/"},"frontmatter":{"date":"2022년 05월 02일","title":"[Spring 에러처리] Illegal reflective access by org.springframework.cglib.core.ReflectUtils","tags":["SpringFramework","warning"]}}},{"node":{"excerpt":"지난 GET API에 대해 공부한 것에 이어 오늘은 POST API에 대해 공부해보고자 한다. 먼저 POST API의 특징에 대해 알아보자 POST API의 특징 리소스의 생성 및 추가하는 작업을 해주는 API이다. CRUD에서 C에 해당한다. POST Request를 반복한다면 데이터들은 계속 추가될 것이고 서버는 매번 다른 응답을 나타낼 것이다. 이때…","fields":{"slug":"/Spring/20220422-Spring-Post-Mapping/"},"frontmatter":{"date":"2022년 04월 22일","title":"[Spring] PostMapping","tags":["SpringFramework","PostMapping"]}}},{"node":{"excerpt":"REST API디자인을 하기 위해서 자원에 대한 행위들은 HTTP Method로 표현을 해야한다. HTTP Method에는 GET, POST, PUT, DELETE 등이 존재한다. 오늘은 Spring Boot에서 GET API를 사용하는 방법에 대해 알아볼 것이다. GET API의 특징 리소스를 취득하는 작업을 하는 API이다. CRUD에서 R에 해당한다…","fields":{"slug":"/Spring/20220421-Spring-Get-Mapping/"},"frontmatter":{"date":"2022년 04월 21일","title":"[Spring] GetMapping","tags":["SpringFramework","GetMapping"]}}}]}},"pageContext":{"categoryRegex":"/^(/home/runner/work/Seongwon97.github.io/Seongwon97.github.io/content/posts/)(Spring/)([^/]*.md$)/"}},"staticQueryHashes":["1900723382","3911196313","4111100897"]}