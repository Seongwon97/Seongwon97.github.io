{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220222-이펙티브자바-1-생성자대신-정적펙토리-메서드/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 일반적으로 클래스의 인스턴스를 만들 떄 public 생성자를 통해 만들 것입니다.\n하지만 생성자를 통한 인스턴스 생성하는 방법이 존재합니다. 그것이 바로 오늘 다룰 주제인 정적 팩터리 메서드(static factory method) 입니다. 정적…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<p>일반적으로 클래스의 인스턴스를 만들 떄 public 생성자를 통해 만들 것입니다.\n하지만 생성자를 통한 인스턴스 생성하는 방법이 존재합니다. 그것이 바로 오늘 다룰 주제인 <strong>정적 팩터리 메서드(static factory method)</strong> 입니다.</p>\n<h1 id=\"정적-팩터리-메서드란\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%9E%80\" aria-label=\"정적 팩터리 메서드란 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 팩터리 메서드란?</h1>\n<p>정적 팩터리 메서드는 도대체 무엇을 뜻하는 것일까요?? 정적 팩터리 메서드를 간단히 설명하자면 새로운 인스턴스를 생성하고 반환하는 클래스 메서드를 뜻합니다.</p>\n<p>아래의 코드는 LocalDateTime.java파일에 있는 정적 팩터리 메서드를 가져온 것입니다.\n다음 코드를 보면 LocalDateTime의 of라는 클래스 메서드의 반환값은 <code>new LocalDateTime(date, time);</code>으로 새로운 인스턴스를 생성하여 반환하고 있습니다.\n이를 이용해 우리는 <code>of</code> 메서드를 사용하여 LocalDateTime의 인스턴스를 생성할 수 있습니다. 이러한 메서드를 우리는 정적 팩터리 메서드라고 부릅니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// LocalDateTime.java</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">LocalDateTime</span><span class=\"mtk4\"> </span><span class=\"mtk3\">of</span><span class=\"mtk4\">(</span><span class=\"mtk9\">int</span><span class=\"mtk4\"> year</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> month</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> dayOfMonth</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> hour</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> minute) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">LocalDate</span><span class=\"mtk4\"> date </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">LocalDate</span><span class=\"mtk1\">.</span><span class=\"mtk3\">of</span><span class=\"mtk1\">(year, month, dayOfMonth);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">LocalTime</span><span class=\"mtk4\"> time </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">LocalTime</span><span class=\"mtk1\">.</span><span class=\"mtk3\">of</span><span class=\"mtk1\">(hour, minute);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">LocalDateTime</span><span class=\"mtk4\">(date</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> time)</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">LocalDateTime</span><span class=\"mtk4\"> time </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">LocalDateTime</span><span class=\"mtk1\">.</span><span class=\"mtk3\">of</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2022</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">22</span><span class=\"mtk1\">, </span><span class=\"mtk7\">20</span><span class=\"mtk1\">, </span><span class=\"mtk7\">47</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h1 id=\"정적-팩터리-메서드의-장점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"정적 팩터리 메서드의 장점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 팩터리 메서드의 장점</h1>\n<h2 id=\"1-이름을-가질-수-있다\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EB%A6%84%EC%9D%84-%EA%B0%80%EC%A7%88-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"1 이름을 가질 수 있다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이름을 가질 수 있다.</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// BigInteger.java</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 두 메서드 모두 양의 소수를 반환하는 메서드</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk3\">BigInteger</span><span class=\"mtk4\">(</span><span class=\"mtk9\">int</span><span class=\"mtk4\"> bitLength</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> certainty</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Random</span><span class=\"mtk4\"> rnd) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">BigInteger</span><span class=\"mtk4\"> prime</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">if</span><span class=\"mtk4\"> (bitLength </span><span class=\"mtk8\">&lt;</span><span class=\"mtk4\"> </span><span class=\"mtk7\">2</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">throw</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">ArithmeticException</span><span class=\"mtk4\">(</span><span class=\"mtk6\">&quot;bitLength &lt; 2&quot;</span><span class=\"mtk4\">)</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    prime </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> (bitLength </span><span class=\"mtk8\">&lt;</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SMALL_PRIME_THRESHOLD</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">            </span><span class=\"mtk9\">?</span><span class=\"mtk4\"> </span><span class=\"mtk3\">smallPrime</span><span class=\"mtk4\">(bitLength</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> certainty</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> rnd)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">            </span><span class=\"mtk9\">:</span><span class=\"mtk4\"> </span><span class=\"mtk3\">largePrime</span><span class=\"mtk4\">(bitLength</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> certainty</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> rnd))</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    signum </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    mag </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">prime</span><span class=\"mtk1\">.</span><span class=\"mtk4\">mag</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">BigInteger</span><span class=\"mtk4\"> </span><span class=\"mtk3\">probablePrime</span><span class=\"mtk4\">(</span><span class=\"mtk9\">int</span><span class=\"mtk4\"> bitLength</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Random</span><span class=\"mtk4\"> rnd) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">if</span><span class=\"mtk4\"> (bitLength </span><span class=\"mtk8\">&lt;</span><span class=\"mtk4\"> </span><span class=\"mtk7\">2</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">throw</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">ArithmeticException</span><span class=\"mtk4\">(</span><span class=\"mtk6\">&quot;bitLength &lt; 2&quot;</span><span class=\"mtk4\">)</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> (bitLength </span><span class=\"mtk8\">&lt;</span><span class=\"mtk4\"> SMALL_PRIME_THRESHOLD </span><span class=\"mtk9\">?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">            </span><span class=\"mtk3\">smallPrime</span><span class=\"mtk4\">(bitLength</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> DEFAULT_PRIME_CERTAINTY</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> rnd) </span><span class=\"mtk9\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">            </span><span class=\"mtk3\">largePrime</span><span class=\"mtk4\">(bitLength</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> DEFAULT_PRIME_CERTAINTY</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> rnd))</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<p>위의 코드는 BigInteger.java에 있는 소수를 반환하는 생성자와 메서드입니다.\n코드에서 생성자를 보면 어떤 생각이 드나요?? 해당 생성자의 매개변수를 통해 <code>이 생성자는 소수를 반환하는거야~</code>라는 사실을 설명할 수 있을까요??\n아마 해당 생성자를 자주 사용한 사람을 제외한 대부분의 사람들은 <strong>No❗️</strong> 라고 답을 할 겁니다.\n그러면 생성자와 비교하였을 때 probablePrime메서드는 어떤가요?? 확실히 생성자보다는 소수인 BigInteger를 반환한다는 것을 알기 쉽습니다.</p>\n<p><strong>이와같이 매개변수가 여러개인 클래스에 시그니처가 같은 생성자가 여러개 필요할 것 같으면, 매개변수의 순서를 다르게 하여 생성자를 추가하기보다는\n생성자를 정적 팩터리 메서드로 바꾸고 각각의 차이를 잘 드러내는 이름을 지어주는 것이 좋습니다.</strong></p>\n<blockquote>\n<p>만약 하나의 시그니처로 매개변수의 순서를 다르게 생성자를 추가하고 사용할 경우 개발자들이 API를 잘못 호출하는 실수를 유발할 수도 있다.🤯</p>\n</blockquote>\n<h2 id=\"2-호출될-때마다-인스턴스를-새로-생성하지-않아도-된다\" style=\"position:relative;\"><a href=\"#2-%ED%98%B8%EC%B6%9C%EB%90%A0-%EB%95%8C%EB%A7%88%EB%8B%A4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%83%88%EB%A1%9C-%EC%83%9D%EC%84%B1%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%9C%EB%8B%A4\" aria-label=\"2 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.</h2>\n<p>두번쨰 장점 덕분에 불변 클래스(Immutable class)는 인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하는 식으로 객체의 생성을 피할 수 있습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Boolean</span><span class=\"mtk4\"> </span><span class=\"mtk9\">implements</span><span class=\"mtk4\"> java.io.</span><span class=\"mtk11\">Serializable</span><span class=\"mtk1\">,</span><span class=\"mtk11\">Comparable</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">Boolean</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Boolean</span><span class=\"mtk4\"> TRUE </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">Boolean</span><span class=\"mtk4\">(</span><span class=\"mtk7\">true</span><span class=\"mtk4\">)</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Boolean</span><span class=\"mtk4\"> FALSE </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">Boolean</span><span class=\"mtk4\">(</span><span class=\"mtk7\">false</span><span class=\"mtk4\">)</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk11\">Boolean</span><span class=\"mtk3\"> valueOf</span><span class=\"mtk1\">(</span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">b</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> (b </span><span class=\"mtk9\">?</span><span class=\"mtk1\"> TRUE </span><span class=\"mtk9\">:</span><span class=\"mtk1\"> FALSE);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>대표적인 예로 위의 <code>Boolean.valueOf(boolean)</code>메서드는 TRUE, FALSE를 미리 상수로 정의해두어 메서드에서\n객체를 아예 생성하지 않는 것을 확인할 수 있습니다. 따라서 팩터리 메서드는 같은 객체가 자주 요청되는 상황이라면 성능을 향상시켜주기도 합니다.</p>\n<p>정적 팩터리 방식의 클래스는 언제 어느 인스턴스를 살아 있게 할지를 철저히 통제할 수 있으며 이를 인스턴스 통제(instance-controlled)클래스라고 합니다.</p>\n<h3 id=\"인스턴스를-통제하려는-이유는-다음과-같습니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%ED%86%B5%EC%A0%9C%ED%95%98%EB%A0%A4%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"인스턴스를 통제하려는 이유는 다음과 같습니다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스를 통제하려는 이유는 다음과 같습니다.</h3>\n<ul>\n<li>인스턴스를 통제하면 클래스를 싱글턴(Singleton)으로 만들 수도, 인스턴스화 불가(noninstantiable)로 만들 수도 있습니다.</li>\n<li>불변 값 클래스에서 동치인 인스턴스가 단 하나뿐임을 보장할 수 있습니다. (a==b일때 a.equals(b)가 성립)</li>\n<li>플라이웨이트 패턴의 근간이 되며, 열거타입은 인스턴스가 하나만 만들어짐을 보장합니다.</li>\n</ul>\n<blockquote>\n<h3 id=\"플라이웨이트-패턴이란-br\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-br\" aria-label=\"플라이웨이트 패턴이란 br permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>플라이웨이트 패턴이란? <br></h3>\n<p>플라이웨이트 패턴(Flyweight pattern)는 동일하거나 유사한 객체들 사이에 가능한 많은 데이터를 서로 공유하여 사용하도록 하여 메모리 사용량을 최소화하는 소프트웨어 디자인 패턴이다.</p>\n</blockquote>\n<h2 id=\"3-반환-타입의-하위-타입-객체를-반환할-수-있는-능력이-있다\" style=\"position:relative;\"><a href=\"#3-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85%EC%9D%98-%ED%95%98%EC%9C%84-%ED%83%80%EC%9E%85-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%8A%A5%EB%A0%A5%EC%9D%B4-%EC%9E%88%EB%8B%A4\" aria-label=\"3 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.</h2>\n<p>해당 능력은 자바의 다형성의 특징을 이용하여 코드의 유연성이 늘어납니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">CarType</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">CarType</span><span class=\"mtk3\"> getSuvType</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">SuvType</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">CarType</span><span class=\"mtk3\"> getSedanType</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">SedanType</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SuvType</span><span class=\"mtk4\"> </span><span class=\"mtk9\">implements</span><span class=\"mtk4\"> </span><span class=\"mtk11\">CarType</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SedanType</span><span class=\"mtk4\"> </span><span class=\"mtk9\">implements</span><span class=\"mtk4\"> </span><span class=\"mtk11\">CarType</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{}</span></span></span></code></pre>\n<p>자바 8 이후부터는 인터페이스에 정적 메서드를 선언할 수 있게 되어 위와 같이 인터페이스에 선언된 정적 메서드를 통해 해당 인터페이스를 구현한 클래스 인스턴스를 생성할 수 있습니다.\n이러한 방법을 사용한다면 구현 클래스를 공개하지 않고도 해당 객체를 반환할 수 있어 API를 작게 유지할 수 있습니다.</p>\n<p>이는 인터페이스를 정적 팩터리 메서드의 반환타입으로 사용하는 인터페이스 기반 프레임워크를 만드는 핵심 기술이기도 합니다.</p>\n<p>자바의 컬렉션 프레임워크도 정적 팩터리 메서드 방법을 사용해 45개의 클래스를 공개하지 않으며, API크기를 작게 만들 수 있었습니다.</p>\n<h2 id=\"4-입력-매개변수에-따라-매번-다른-클래스의-객체를-반환할-수-있다\" style=\"position:relative;\"><a href=\"#4-%EC%9E%85%EB%A0%A5-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%A7%A4%EB%B2%88-%EB%8B%A4%EB%A5%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"4 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.</h2>\n<p>반환 타입의 하위 타입이기만 하면 어떤 클래스의 객체를 반환하던지 상관없습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">abstract</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">EnumSet</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk4\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Enum</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk4\"> </span><span class=\"mtk11\">AbstractSet</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">implements</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Cloneable</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> java.io.</span><span class=\"mtk11\">Serializable</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk3\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk3\"> </span><span class=\"mtk11\">Enum</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;&gt;</span><span class=\"mtk3\"> </span><span class=\"mtk11\">EnumSet</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;</span><span class=\"mtk3\"> noneOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Class</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt; </span><span class=\"mtk4 mtki\">elementType</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">Enum</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">?</span><span class=\"mtk1\">&gt;[] </span><span class=\"mtk4\">universe</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">getUniverse</span><span class=\"mtk1\">(elementType);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (universe </span><span class=\"mtk8\">==</span><span class=\"mtk1\"> </span><span class=\"mtk7\">null</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk9\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">ClassCastException</span><span class=\"mtk1\">(elementType </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot; not an enum&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">universe</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&lt;=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">64</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">RegularEnumSet</span><span class=\"mtk1\">&lt;&gt;(elementType, universe);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">JumboEnumSet</span><span class=\"mtk1\">&lt;&gt;(elementType, universe);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>EnumSet.java의 <code>noneOf</code>메서드를 보면 원소 수에 따라 하위 클래스 중 하나의 인스턴스를 생성하여 반환하고 있습니다.\n원소들이 64개 이하면 <code>RegularEnumSet</code>인스턴스를, 이상이면 <code>JumboEnumSet</code> 인스턴스를 반환하고 있습니다.</p>\n<p>해당 메서드를 사용하는 클라이언트는 <code>RegularEnumSet</code>, <code>JumboEnumSet</code>의 존재를 모르고 사용하며, Java언어 개발 쪽에서는 특정 클래스를\n없애거나 추가하더라도 <code>EnumSet</code>의 하위 타입이기만하면 문제없이 사용할 수 있습니다.</p>\n<h2 id=\"5-정적-팩터리-메서드를-작성하는-시점에는-반환할-객체의-클래스가-존재하지-않아도-된다\" style=\"position:relative;\"><a href=\"#5-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EC%8B%9C%EC%A0%90%EC%97%90%EB%8A%94-%EB%B0%98%ED%99%98%ED%95%A0-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%9C%EB%8B%A4\" aria-label=\"5 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.</h2>\n<p>말 그대로 때때로 컴파일 시점에 알려지지 않은 클래스 객체를 생성해야할 때도 존재하는데, 이런 경우 정적 팩터리 메서드를 사용하면 쉽게 구현할 수 있습니다.</p>\n<h1 id=\"정적-팩터리-메서드의-단점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"정적 팩터리 메서드의 단점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 팩터리 메서드의 단점</h1>\n<h2 id=\"1-상속을-하려면-public이나-protected생성자가-필요하니-정적-팩터리-메서드만-제공하면-하위-클래스를-만들-수-없다\" style=\"position:relative;\"><a href=\"#1-%EC%83%81%EC%86%8D%EC%9D%84-%ED%95%98%EB%A0%A4%EB%A9%B4-public%EC%9D%B4%EB%82%98-protected%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%88-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A7%8C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%A9%B4-%ED%95%98%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%A7%8C%EB%93%A4-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"1 상속을 하려면 public이나 protected생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 상속을 하려면 public이나 protected생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.</h2>\n<p>상속을 하려면 public이나 protected생성자가 필요한데 이러한 생성자를 private로 만들고 정적 팩터리 메서드만을 public으로 만든다면\n상속을 한 하위 클래스를 만들 수가 없다.</p>\n<p>하지만 이러한 제약은 상속보다 컴포지션을 사용하도록 유도하고 불변타입으로 만들려면 이 제약으르 지켜야한다는 점에서 오히려 장점이 될 수도 있다.</p>\n<h2 id=\"2-정적-팩터리-메서드는-프로그래머가-찾기-어렵다\" style=\"position:relative;\"><a href=\"#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EC%B0%BE%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\" aria-label=\"2 정적 팩터리 메서드는 프로그래머가 찾기 어렵다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 정적 팩터리 메서드는 프로그래머가 찾기 어렵다.</h2>\n<p>생성자처럼 API설명에 명확히 드러나지 않아 사용자는 정적 팩터리 메서드 방식 클래스를 인스턴스화할 방법을 알아내야합니다.</p>\n<p>API문서를 잘 쓰고 메서드 이름도 널리 알려진 규약을 따라 짓는 식으로 문제를 완화해줘야합니다.</p>\n<h3 id=\"정적-팩터리-메서드에-흔히-사용되는-명명-방식들\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-%ED%9D%94%ED%9E%88-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EB%AA%85%EB%AA%85-%EB%B0%A9%EC%8B%9D%EB%93%A4\" aria-label=\"정적 팩터리 메서드에 흔히 사용되는 명명 방식들 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 팩터리 메서드에 흔히 사용되는 명명 방식들</h3>\n<ul>\n<li>from : 매개변수를 하나 받아서 해당 타입의 인스턴스를 반환하는 형 변환 메서드</li>\n<li>of : 여러 매개변수를 받아 적합한 타입의 인스턴스를 반환하는 집계 메서드</li>\n<li>valueOf : from과 of의 더 자세한 버전</li>\n<li>instance or getInstance : 매개변수로 명시한 인스턴스를 반환하지만, 같은 인스턴스임을 보장하지 않는다.</li>\n<li>create or new Instance : instance 혹은 getInstance와 같지만, 매번 새로운 인스턴스를 생성해 반환함을 보장한다.</li>\n<li>getType : getInstance와 같으나, 생성할 클래스가 아닌 다른 클래스에 팩터리 메서드를 정의할 때 쓴다. 'Type'은 팩터리 메서드가 반환할 객체의 타입이다.</li>\n<li>newType : newInstance와 같으나, 생성할 클래스가 아닌 다른 클래스에 팩토리 메소드를 정의할 때 쓴다. 'Type'은 팩토리 메소드가 반환할 객체의 타입이다.</li>\n<li>type : getType과 newType의 간결한 버전</li>\n</ul>\n<h1 id=\"핵심정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC\" aria-label=\"핵심정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심정리</h1>\n<p>정적 팩터리 메서드와 public 생성자는 각각의 쓰임새가 있으니 상대적인 장단점을 이해하고 사용하는 것이 좋다.\n그렇다고 하더라도 정적 팩터리를 사용하는 게 유리한 경우가 더 많으므로 무작정 public 생성자를 제공하던 습관이 있으면 고치자.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%9E%80\">정적 팩터리 메서드란?</a></li>\n<li>\n<p><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9E%A5%EC%A0%90\">정적 팩터리 메서드의 장점</a></p>\n<ul>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#1-%EC%9D%B4%EB%A6%84%EC%9D%84-%EA%B0%80%EC%A7%88-%EC%88%98-%EC%9E%88%EB%8B%A4\">1. 이름을 가질 수 있다.</a></li>\n<li>\n<p><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#2-%ED%98%B8%EC%B6%9C%EB%90%A0-%EB%95%8C%EB%A7%88%EB%8B%A4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%83%88%EB%A1%9C-%EC%83%9D%EC%84%B1%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%9C%EB%8B%A4\">2. 호출될 때마다 인스턴스를 새로 생성하지 않아도 된다.</a></p>\n<ul>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%ED%86%B5%EC%A0%9C%ED%95%98%EB%A0%A4%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%8A%B5%EB%8B%88%EB%8B%A4\">인스턴스를 통제하려는 이유는 다음과 같습니다.</a></li>\n</ul>\n</li>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#3-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85%EC%9D%98-%ED%95%98%EC%9C%84-%ED%83%80%EC%9E%85-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%8A%A5%EB%A0%A5%EC%9D%B4-%EC%9E%88%EB%8B%A4\">3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.</a></li>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#4-%EC%9E%85%EB%A0%A5-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%A7%A4%EB%B2%88-%EB%8B%A4%EB%A5%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\">4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.</a></li>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#5-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EC%8B%9C%EC%A0%90%EC%97%90%EB%8A%94-%EB%B0%98%ED%99%98%ED%95%A0-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%9C%EB%8B%A4\">5. 정적 팩터리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EB%8B%A8%EC%A0%90\">정적 팩터리 메서드의 단점</a></p>\n<ul>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#1-%EC%83%81%EC%86%8D%EC%9D%84-%ED%95%98%EB%A0%A4%EB%A9%B4-public%EC%9D%B4%EB%82%98-protected%EC%83%9D%EC%84%B1%EC%9E%90%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%88-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A7%8C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%A9%B4-%ED%95%98%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%A7%8C%EB%93%A4-%EC%88%98-%EC%97%86%EB%8B%A4\">1. 상속을 하려면 public이나 protected생성자가 필요하니 정적 팩터리 메서드만 제공하면 하위 클래스를 만들 수 없다.</a></li>\n<li>\n<p><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EC%B0%BE%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\">2. 정적 팩터리 메서드는 프로그래머가 찾기 어렵다.</a></p>\n<ul>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-%ED%9D%94%ED%9E%88-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EB%AA%85%EB%AA%85-%EB%B0%A9%EC%8B%9D%EB%93%A4\">정적 팩터리 메서드에 흔히 사용되는 명명 방식들</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/Java/20220222-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/#%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC\">핵심정리</a></li>\n</ul>","frontmatter":{"date":"2022년 02월 22일","title":"[Effective Java] Item1. 생성자 대신 정적 팩터리 메서드를 고려하라","tags":["Java","Effective Java","static factory method","정적 팩터리 메서드"]}}},"pageContext":{"slug":"/Java/20220222-이펙티브자바-1-생성자대신-정적펙토리-메서드/","previous":{"fields":{"slug":"/Woowacourse/20220221-우테코-레벨1-자동차경주-회고/"},"frontmatter":{"title":"[우아한테크코스] 레벨1 자동차경주 미션 회고 (2월 9일 ~ 21일)"}},"next":{"fields":{"slug":"/Java/20220223-이펙티브자바-2-생성자에-매개변수가-많다면-빌더를-고려하라/"},"frontmatter":{"title":"[Effective Java] Item2. 생성자에 매개변수가 많다면 빌더를 고려하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}