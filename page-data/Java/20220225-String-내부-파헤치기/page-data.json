{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220225-String-내부-파헤치기/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"본 게시글은 우테코 강의를 참조하여 작성되었습니다. String class String 선언의 차이 위의 코드는 String class를 만드는 두가지 방법을 나타낸다. 두가지 방법은 보기에는 같은 결과가 나온다고 생각할 수 있지만 내부적으로는 다른 결과를 냅니다.\nstring1과 string2는 스트링 풀(String pool)에 있는 같은 객체를 바라…","html":"<blockquote>\n<p>본 게시글은 우테코 강의를 참조하여 작성되었습니다.</p>\n</blockquote>\n<h1 id=\"string-class\" style=\"position:relative;\"><a href=\"#string-class\" aria-label=\"string class permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String class</h1>\n<h2 id=\"string-선언의-차이\" style=\"position:relative;\"><a href=\"#string-%EC%84%A0%EC%96%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"string 선언의 차이 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String 선언의 차이</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">String</span><span class=\"mtk4\"> string1 </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;abc&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">String</span><span class=\"mtk4\"> string2 </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;abc&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">String</span><span class=\"mtk4\"> string3 </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">String</span><span class=\"mtk4\">(</span><span class=\"mtk6\">&quot;abc&quot;</span><span class=\"mtk4\">)</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>위의 코드는 String class를 만드는 두가지 방법을 나타낸다. 두가지 방법은 보기에는 같은 결과가 나온다고 생각할 수 있지만 내부적으로는 다른 결과를 냅니다.\nstring1과 string2는 스트링 풀(String pool)에 있는 같은 객체를 바라보게 됩니다. 반면에 <code>new String()</code>을 통해 생성한 string3의 경우는 힙 메모리에 새로운 인스턴스를 만들어 괸리를 하게 됩니다.\n예시 코드를 작성하여 수행해보면 다음과 같은 결과가 나옵니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">StringTest</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">\t</span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> main</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\">[] </span><span class=\"mtk4 mtki\">args</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4\">string1</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">String</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;abc&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4\">string2</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">String</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;abc&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(string1 </span><span class=\"mtk8\">==</span><span class=\"mtk1\"> string2); </span><span class=\"mtk5 mtki\">// false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4\">string3</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;abc&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4\">string4</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;abc&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(string3 </span><span class=\"mtk8\">==</span><span class=\"mtk1\"> string4); </span><span class=\"mtk5 mtki\">// true</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>위의 코드의 경우 <code>new String</code>을 사용하여 새로운 인스턴스를 생성한 string1, string2의\n경우는 서로 다른 주소값을 가르켜 false라는 결과를 반환합니다. 반면에 스트링 풀의 주소만을 가르키며 생성한 string3, string4의 경우는 값이 같다는 결과가 나오게 됩니다.</p>\n<blockquote>\n<h3 id=\"string이-같은지-비교할-때는-동등성-비교\" style=\"position:relative;\"><a href=\"#string%EC%9D%B4-%EA%B0%99%EC%9D%80%EC%A7%80-%EB%B9%84%EA%B5%90%ED%95%A0-%EB%95%8C%EB%8A%94-%EB%8F%99%EB%93%B1%EC%84%B1-%EB%B9%84%EA%B5%90\" aria-label=\"string이 같은지 비교할 때는 동등성 비교 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String이 같은지 비교할 때는 동등성 비교!?</h3>\n<p>string3과 string4는 같은 객체를 바라본다는데 어째서 둘을 비교할 때 동일성(==)이 아닌 동등성(equals)으로 같은지 체크할까요?\nJava8 이후로는 <code>String string1 = \"abc\"</code>와 같이 선언한 내용도 GC의 지시 대상이 되어서 다른 객체가 될 수 있습니다.\n그래서 String 객체들의 비교는 동일성이 아닌 동등성으로 체크합니다.</p>\n</blockquote>\n<br>\n<h1 id=\"stringbuilder-stringbuffer\" style=\"position:relative;\"><a href=\"#stringbuilder-stringbuffer\" aria-label=\"stringbuilder stringbuffer permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StringBuilder, StringBuffer</h1>\n<p>String은 final로 만들어져 인스턴스의 값은 한번 생성하면 변경이 불가능합니다.\n그래서 concat과 문자열 덧셈 과 같이 string의 값을 변경하려고 한다면 기존 인스턴스는 남아있고 남아있는 기존 인스턴스를 사용하여 새로운 인스턴스를 만들게 되어 메모리 낭비가 발생합니다.</p>\n<blockquote>\n<p>Java8이후로는 <code>\"ab+\"bc\"+\"cd\"</code>와 같은 문자열 더하기 연산을 한다면 내부적으로 컴파일시 최적화를 해줍니다.\nJava8에서는 <code>StringBuilder</code>가 최적화를 해주며, Java11의 경우 <code>StringConcatFactory</code>가 최적화를 해줍니다. <br>\nJava8에서 자동으로 컴파일시점에 최적화를 해준 <code>StringBuilder</code>는 + 를 할 떄마다 StringBuilder를 생성하여 문자열을 합쳐주고 다시 String으로 반환을 하여 +연산을 할 떄마다\n각각의 StringBuilder를 선언을 해주는 단점이 존재하였습니다. 그래서 Java11부터 새로운 방법인 <code>StringConcatFactory</code>로 변경되었습니다.\n<code>StringBuilder</code>와 <code>StringConcatFactory</code>의 차이점을 간단히 설명하자면 StringBuilder는 +를 할 때마다 하나의 String객체를 반환하는 반면에 StringConcatFactory는 최종 상태에서만 String을 만들어줍니다.</p>\n</blockquote>\n<p>앞서 말했듯이 JVM이 컴파일 시점에 스스로 String연결을 최적화를 해줍니다. 하지만 최적화는 항상 해주는 것이 아니라 해주지 않는 경우도 존재합니다.\n그래서 우리는 긴 문자열들을 더할 때는 <code>StringBuilder</code>, <code>StringBuffer</code>를 사용하여 직접 낭비를 줄일 수 있습니다.</p>\n<h2 id=\"stringbuilder-stringbuffer의-특징과-차이점\" style=\"position:relative;\"><a href=\"#stringbuilder-stringbuffer%EC%9D%98-%ED%8A%B9%EC%A7%95%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"stringbuilder stringbuffer의 특징과 차이점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StringBuilder, StringBuffer의 특징과 차이점</h2>\n<ul>\n<li>둘 다 내부적으로 가변적인 char[]를 멤버 변수로 가집니다.</li>\n<li>새로운 인스턴스를 생성하지 않고 char[]를 변경할 수 있어서 문자열을 여러번 연결하거나 변경할 때 사용하면 유용합니다.</li>\n<li>출력은 나중에 toString() 메서드로 String반환을 해주면 됩니다.</li>\n<li>StringBuilder와 StringBuffer는 char[] (character buffer)를 갖는 공통점이 있으나 StringBuffer는 multi-thread환경에서 동기화(synchronization)가 보장됩니다.</li>\n<li>그래서 single thread 프로그래밍의 경우는 StringBuilder사용을 권장하며 multi-thread환경에서는 StringBuffer를 사용을 권장한다.</li>\n</ul>\n<p>📌 <strong>하지만 StringBuffer는 실제로 쓰일 일이 거의 없어 StringBuilder를 사용하는 것이 좋습니다.</strong></p>\n<h2 id=\"사용-예제-코드\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C\" aria-label=\"사용 예제 코드 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용 예제 코드</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">StringBuilderTest</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> main</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\">[] </span><span class=\"mtk4 mtki\">args</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4\">string1</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;Rex&#39;s &quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4\">string2</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;develop diary&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">StringBuilder</span><span class=\"mtk1\"> </span><span class=\"mtk4\">buffer</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">StringBuilder</span><span class=\"mtk1\">(string1);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk3\">identityHashCode</span><span class=\"mtk1\">(buffer)); </span><span class=\"mtk5 mtki\">//1809787067</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">buffer</span><span class=\"mtk1\">.</span><span class=\"mtk3\">append</span><span class=\"mtk1\">(string2);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk3\">identityHashCode</span><span class=\"mtk1\">(buffer)); </span><span class=\"mtk5 mtki\">//1809787067</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">buffer</span><span class=\"mtk1\">.</span><span class=\"mtk3\">toString</span><span class=\"mtk1\">()); </span><span class=\"mtk5 mtki\">// Rex&#39;s develop diary</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Java/20220225-String-%EB%82%B4%EB%B6%80-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0/#string-class\">String class</a></p>\n<ul>\n<li><a href=\"/Java/20220225-String-%EB%82%B4%EB%B6%80-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0/#string-%EC%84%A0%EC%96%B8%EC%9D%98-%EC%B0%A8%EC%9D%B4\">String 선언의 차이</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/20220225-String-%EB%82%B4%EB%B6%80-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0/#stringbuilder-stringbuffer\">StringBuilder, StringBuffer</a></p>\n<ul>\n<li><a href=\"/Java/20220225-String-%EB%82%B4%EB%B6%80-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0/#stringbuilder-stringbuffer%EC%9D%98-%ED%8A%B9%EC%A7%95%EA%B3%BC-%EC%B0%A8%EC%9D%B4%EC%A0%90\">StringBuilder, StringBuffer의 특징과 차이점</a></li>\n<li><a href=\"/Java/20220225-String-%EB%82%B4%EB%B6%80-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0/#%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C\">사용 예제 코드</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"2022년 02월 25일","title":"String 파헤치기","tags":["Java","String"]}}},"pageContext":{"slug":"/Java/20220225-String-내부-파헤치기/","previous":{"fields":{"slug":"/Java/20220223-이펙티브자바-2-생성자에-매개변수가-많다면-빌더를-고려하라/"},"frontmatter":{"title":"[Effective Java] Item2. 생성자에 매개변수가 많다면 빌더를 고려하라"}},"next":{"fields":{"slug":"/Java/20220227-자바의-Final/"},"frontmatter":{"title":"자바의 final"}}}},"staticQueryHashes":["3911196313","4111100897"]}