{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220314-이펙티브자바-11/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 서론 Ojbect 명세서에는 다음과 같은 규약이 있다. eauals 비교에 사용되는 정보가 변경되지 않느다면,\n애플리케이션이 실행되는 동안 그 객체의 hashCode 메서드는 몇 번을 호출해도 일관되게 항상 같은 값을 반환해야 한다.\n단, 애플리…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<h1 id=\"서론\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%A1%A0\" aria-label=\"서론 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서론</h1>\n<p>Ojbect 명세서에는 다음과 같은 규약이 있다.</p>\n<ul>\n<li>eauals 비교에 사용되는 정보가 변경되지 않느다면,\n애플리케이션이 실행되는 동안 그 객체의 hashCode 메서드는 몇 번을 호출해도 일관되게 항상 같은 값을 반환해야 한다.\n단, 애플리케이션을 다시 실행한다면 이 값이 달라져도 상관없다.</li>\n<li>equals(Object)가 두 객체를 같다고 판단했다면, 두 객체의 hashCode는 똑같은 값을 반환해야 한다.</li>\n<li>equals(Object)가 두 객체를 다르다고 판단했더라도, 두 객체의 hashCode가 서로 다른 값을 반환할 필요는 없다.\n단, 다른 객체에 대해서는 다른 값을 반환해야 해시테이블의 성능이 좋아진다.</li>\n</ul>\n<p>여기서 두번째에 위치한 조항을 지키기 위해 우리는 equals를 재정의한 클래스에는 hashCode도 재정의해줘야 합니다.</p>\n<h1 id=\"좋은-hashcode작성하는-방법\" style=\"position:relative;\"><a href=\"#%EC%A2%8B%EC%9D%80-hashcode%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"좋은 hashcode작성하는 방법 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>좋은 hashCode작성하는 방법</h1>\n<p>해시 테이블은 linked list처럼 동작하여 아래의 코드와 같이 hashCode를 재정의한다면 O(1)인 테이블이 O(n)으로 성능이 안좋아질 것입니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">Override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">boolean</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> </span><span class=\"mtk3\">hashCode</span><span class=\"mtk4\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> </span><span class=\"mtk7\">42</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<p>좋은 해시코드를 만들려면 세번째 규약이 요구하는 서로 다른 인스턴스는 다른 해시코드를 반환하도록 해야합니다.\n요령은 다음과 같습니다.</p>\n<ol>\n<li>int 변수 result를 선언한 후 값을 c로 초기화합니다.</li>\n<li>\n<p>해당 객체의 나머지 핵심 필드 f 각각에 대해 다음 작업을 수행합니다.</p>\n<ul>\n<li>A. 해당 필드의 해시코드 c를 계산한다.</li>\n<li>기본 타입 필드라면 <code>Type.hashCode(f)</code>를 수행한다. 여기서 Type은 해당 기본 타입의 박싱 클래스이다.</li>\n<li>참조 타입의 필드면서 이 클래스의 equals메서드가 이 필드의 equals를 재귀적으로 호출해 비교한다면, 이 필드의 hashCode를\n재귀적으로 호출한다. 계산이 더 복잡해질 것 같으면, 이 필드의 표준형을 만들어 그 표준형의 hashCode를 호출한다.\n필드의 값이 null이면 0을 사용한다. (다른 상수도 괜찮지만 전통적으로 0을 사용)</li>\n<li>필드가 배열이라면, 핵심 원소 각각을 별도 필드처럼 다룬다. 이상의 규칙을 재귀적으로 적용해 각 핵심 원소의 해시 코드를 다시 계산한 다음,</li>\n<li>다음 단계 B 방식으로 갱신한다. 배열의 핵심 원소가 하나도 없다면 단순히 상수(0을 추천)를 사용한다. 모든 원소가 핵심 원소라면 <code>Arrays.hashCode</code>를 사용한다.</li>\n<li>B. A에서 계산한 해시코드 c로 result를 갱신한다. 코드로는 다음과 같다.\n<code>result = 31 * result + c;</code></li>\n</ul>\n</li>\n<li>result를 반환한다.</li>\n</ol>\n<p>적용 예시는 다음과 같다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 핸드폰 번호 객체에 적용 예시</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">Override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> </span><span class=\"mtk3\">hashCode</span><span class=\"mtk4\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> result </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Short</span><span class=\"mtk1\">.</span><span class=\"mtk3\">hashCode</span><span class=\"mtk1\">(areaCode);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    result </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk7\">31</span><span class=\"mtk4\"> </span><span class=\"mtk8\">*</span><span class=\"mtk4\"> result </span><span class=\"mtk8\">+</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Short</span><span class=\"mtk1\">.</span><span class=\"mtk3\">hashCode</span><span class=\"mtk1\">(prefix);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    result </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk7\">31</span><span class=\"mtk4\"> </span><span class=\"mtk8\">*</span><span class=\"mtk4\"> result </span><span class=\"mtk8\">+</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Short</span><span class=\"mtk1\">.</span><span class=\"mtk3\">hashCode</span><span class=\"mtk1\">(lineNum);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> result</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<blockquote>\n<p>hashCode 구현에 무시해도 되는 필드</p>\n<ul>\n<li>다른 필드로부터 게산해 낼 수 있는 파생 필드</li>\n<li>equals 비교에 사용되지 않은 필드 (반드시 제외)</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><code>result = 31 * result + c;</code>에서 31을 쓰는 이유</p>\n<ul>\n<li>31이 홀수이면서 소수이기 때문에 사용한다. (전통적으로 소수를 곱해왔다.)</li>\n<li>\n<p>31은 곱셈을 시프트 연산과 뺄셈으로 대체해 최적화할 수 있다.</p>\n<ul>\n<li><code>31 * 1</code>는 <code>(i &#x3C;&#x3C; 5) - i</code>와 같다.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"obejct-클래스에서-제공하는-방법\" style=\"position:relative;\"><a href=\"#obejct-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"obejct 클래스에서 제공하는 방법 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Obejct 클래스에서 제공하는 방법</h1>\n<p>위의 방법이 귀찮다면 아래와 같이 Object 클래스에서 임의의 개수만큼 객체를 받아 해시코드를 만들어주는 <code>hash</code>메서드를 사용해도 된다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">Override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> </span><span class=\"mtk3\">hashCode</span><span class=\"mtk4\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Objects</span><span class=\"mtk1\">.</span><span class=\"mtk3\">hash</span><span class=\"mtk1\">(lineNum, prefix, areaCode);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  }</span></span></span></code></pre>\n<p>하지만 <code>Obejects.hash</code>는 입력 인수를 담기 위한 배열을 만들고 입력중 기본타입이 있다면 박싱, 언박싱도 거쳐야 하기 떄문에 더 느리다!</p>\n<p>그래서 <code>Obejects.hash</code>는 성능에 민감하지 않은 경우에만 사용하는 것이 좋다.</p>\n<h1 id=\"hashcode-재정의의-주의사항\" style=\"position:relative;\"><a href=\"#hashcode-%EC%9E%AC%EC%A0%95%EC%9D%98%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"hashcode 재정의의 주의사항 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hashCode 재정의의 주의사항</h1>\n<ul>\n<li>\n<p>성능을 높이기 위해 해시코드를 계산할 때 핵심 필드를 생략해서는 안 된다.</p>\n<ul>\n<li>속도가 빨라질 수 있어도 해시 품질이 나빠져 해시 테이블의 성능을 심각하게 떨어뜨릴 수도 있다.</li>\n</ul>\n</li>\n<li>\n<p>hashCode가 반환하는 값의 생성 규칙을 API사용자에게 자세히 공표하지 말아야 한다.</p>\n<ul>\n<li>그래야지 클라이언트가 해당 값에 의지하지 않게 되고, 추후에 계산 방식을 바꿀 수도 있다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h1>\n<p>equals를 재정의할 때는 hashCode도 반드시 재정의해야 한다.\n재정의한 hashCode는 Object의 API 문서에 기술된 일반 규약을 따라야 하며, 서로 다른 인스턴스라면 되도록 해시코드도 서로 다르게 구현해야한다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/20220314-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-11/#%EC%84%9C%EB%A1%A0\">서론</a></li>\n<li><a href=\"/Java/20220314-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-11/#%EC%A2%8B%EC%9D%80-hashcode%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">좋은 hashCode작성하는 방법</a></li>\n<li><a href=\"/Java/20220314-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-11/#obejct-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">Obejct 클래스에서 제공하는 방법</a></li>\n<li><a href=\"/Java/20220314-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-11/#hashcode-%EC%9E%AC%EC%A0%95%EC%9D%98%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">hashCode 재정의의 주의사항</a></li>\n<li><a href=\"/Java/20220314-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-11/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 14일","title":"[Effective Java] Item11. equals를 재정의하려거든 hashCode도 재정의하라","tags":["Java","Effective Java","equals & hashCode"]}}},"pageContext":{"slug":"/Java/20220314-이펙티브자바-11/","previous":{"fields":{"slug":"/Java/20220312-이펙티브자바-9/"},"frontmatter":{"title":"[Effective Java] Item9. try-finally보다는 try-with-resources를 사용하라"}},"next":{"fields":{"slug":"/Java/20220314-이펙티브자바-12-toString재정의/"},"frontmatter":{"title":"[Effective Java] Item12. toString을 항상 재정의하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}