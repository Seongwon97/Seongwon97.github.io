{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220304-이펙티브자바-7/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 자바에서는 사용하지 않는 객체의 경우 GC(Garbage Collection)에서 알아서 회수를 해주며 메모리 관리를 해줍니다.\n하지만 GC가 메모리 관리를 해준다고해서 우리가 완전히 신경을 쓰지 않아도 되는건 아닙니다.\n가비지 컬렉션에서는 특정…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<p>자바에서는 사용하지 않는 객체의 경우 GC(Garbage Collection)에서 알아서 회수를 해주며 메모리 관리를 해줍니다.\n하지만 GC가 메모리 관리를 해준다고해서 우리가 완전히 신경을 쓰지 않아도 되는건 아닙니다.\n가비지 컬렉션에서는 특정 상황에서 메모리 누수가 발생하고, 우리는 그러한 상황을 인지하고 대응해줘야합니다.</p>\n<h1 id=\"메모리-누수는-언제-발생할까\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98%EB%8A%94-%EC%96%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D%ED%95%A0%EA%B9%8C\" aria-label=\"메모리 누수는 언제 발생할까 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 누수는 언제 발생할까?</h1>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Stack</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Object</span><span class=\"mtk4\">[] elements</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> size </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> DEFAULT_CAPACITY </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk7\">16</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> Stack</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        elements </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Object</span><span class=\"mtk1\">[DEFAULT_CAPACITY];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> push</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Object</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">e</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">ensureCapacity</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        elements[size++] </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> e;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk11\">Object</span><span class=\"mtk3\"> pop</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (size </span><span class=\"mtk8\">==</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk9\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">EmptyStackException</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> elements[--size];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> ensureCapacity</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{ </span><span class=\"mtk5 mtki\">// 원소들이 들어갈 공간 확보</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">elements</span><span class=\"mtk1\">.</span><span class=\"mtk4\">length</span><span class=\"mtk1\"> </span><span class=\"mtk8\">==</span><span class=\"mtk1\"> size)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            elements </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Arrays</span><span class=\"mtk1\">.</span><span class=\"mtk3\">copyOf</span><span class=\"mtk1\">(elements, </span><span class=\"mtk7\">2</span><span class=\"mtk1\"> </span><span class=\"mtk8\">*</span><span class=\"mtk1\"> size </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>해당 코드는 별 생각 없이 봤을 때 아무 문제가 없어보이지만 메모리 누수가 발생하는 코드입니다.</p>\n<p>메모리 누수는 어디에서 발생하였을까요? 바로 pop을 하였을 때 스택에서 꺼내진 객체들에게서 발생합니다.\n객체들이 pop을 통해 꺼내졌다 하더라도 실제 코드를 보면 <code>elements[--size]</code>를 통해 Index만 이동시켰을 뿐\n실제 객체의 참조값은 스택이 갖고 있습니다. 이렇게 스택이 다 쓴 참조(obsolete reference)를 갖고 있을 경우\n해당 참조값들은 GC가 처리하지 못하게 됩니다.</p>\n<p>이러한 메모리 누수를 관리하지 않을 경우 점차 가비지 컬렉션 활동과 메모리 사용량이 늘어나 성능이 저하됩니다.\n또한 심할경우 디스크 페이징이나 <code>OutOfMemoryError</code>가 발생하여 프로그램이 종료될 수 있습니다.</p>\n<h1 id=\"메모리-누수-해결방법\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-label=\"메모리 누수 해결방법 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 누수 해결방법</h1>\n<p>메모리 누수를 해결하는 방법은 해당 참조를 다 사용하였을 때 <code>null</code>로 변경해주면 됩니다. 참조 값을 <code>null</code>로\n변경할 경우 해당 참조 값은 더이상 사용되는 곳이 없다면 GC에서 처리를 해주게 됩니다.</p>\n<p>위의 pop()메서드를 올바르게 고치면 다음과 같습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Object</span><span class=\"mtk4\"> </span><span class=\"mtk3\">pop</span><span class=\"mtk4\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">if</span><span class=\"mtk4\"> (size </span><span class=\"mtk8\">==</span><span class=\"mtk4\"> </span><span class=\"mtk7\">0</span><span class=\"mtk4\">) </span><span class=\"mtk9\">throw</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">EmptyStackException</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">Object</span><span class=\"mtk4\"> popObject </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> elements[size]</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        elements[size</span><span class=\"mtk1\">--</span><span class=\"mtk4\">] </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk7\">null</span><span class=\"mtk1\">;</span><span class=\"mtk4\"> </span><span class=\"mtk5 mtki\">// 참조 해제</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> popObject</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span></code></pre>\n<p>이와 같이 다 쓴 참조를 <code>null</code>로 변경할 경우 해당 참조에 접근하게 될 때 <code>NullPointException</code>을 발생시킬 수 있다는 장점도 있습니다.</p>\n<h1 id=\"null로는-항상-바꿔야하나\" style=\"position:relative;\"><a href=\"#null%EB%A1%9C%EB%8A%94-%ED%95%AD%EC%83%81-%EB%B0%94%EA%BF%94%EC%95%BC%ED%95%98%EB%82%98\" aria-label=\"null로는 항상 바꿔야하나 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null로는 항상 바꿔야하나?</h1>\n<p>사용이 끝난 객체 참조를 null로 변경하는 것은 예외적인 경우에만 사용하는 것이 좋으며, 다 쓴 객체 참조를 해제하는\n가장 좋은 방법은 해당 객체 참조를 담은 변수를 유효 범위 밖으로 밀어내는 것입니다.</p>\n<p>그렇다면 <code>null</code>로 변경을 하는 메모리 관리는 언제 해야할까요? 일반적으로는 <strong>자신의 메모리를 직접 관리하는 클래스를 사용할 때 항시 주의를 해야합니다.</strong></p>\n<h1 id=\"메모리-누수를-발생시키는-3개의-주범\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98%EB%A5%BC-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EB%8A%94-3%EA%B0%9C%EC%9D%98-%EC%A3%BC%EB%B2%94\" aria-label=\"메모리 누수를 발생시키는 3개의 주범 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메모리 누수를 발생시키는 3개의 주범</h1>\n<ol>\n<li>앞서 말한 Stack과 같이 자신의 메모리를 직접 관리하는 클래스</li>\n<li>\n<p>캐시 메모리</p>\n<ul>\n<li>객체 참조를 캐시에 넣고 한참을 낮으면 누수가 일어난다.</li>\n<li>해결방법 1: 캐시 외부에서 key를 참조하는 동안만 엔트리가 살아있는 캐시가 필요한 상황이면 <code>WaekHachMap</code>을 사용한다.</li>\n<li>해결방법 2: 엔트리 유효 기간이 정의되지 않아 시간이 지남에 따라 엔트리 가치를 떨어뜨리는 방식일 경우 <code>백그라운드 스레드</code> 또는 캐시에 새 엔트리를 추가할 때 추가적인 작업을 해준다.</li>\n</ul>\n</li>\n<li>\n<p>리스너(listener) or 콜백(callback)</p>\n<ul>\n<li>클라이언트가 콜백을 등록만하고 해지하지 않는다면 콜백은 계속 쌓여갈 것입니다.</li>\n<li>해결방법: 콜백을 약한 참조(weak reference)로 저장하면 컬렉터가 즉시 수거해갑니다.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h1>\n<p>메모리 누수는 겉으로 잘 드러나지 않아 시스템에 수년간 잠복하는 사례도 존재합니다.\n이런 누수는 철저한 코드리뷰나 힙 프로파일러 같은 디버깅 도구를 동원해야만 발견되기도 한다.\n그래서 이런 종류의 문제는 예방법을 익혀두는 것이 매우 중요하다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/20220304-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-7/#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98%EB%8A%94-%EC%96%B8%EC%A0%9C-%EB%B0%9C%EC%83%9D%ED%95%A0%EA%B9%8C\">메모리 누수는 언제 발생할까?</a></li>\n<li><a href=\"/Java/20220304-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-7/#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\">메모리 누수 해결방법</a></li>\n<li><a href=\"/Java/20220304-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-7/#null%EB%A1%9C%EB%8A%94-%ED%95%AD%EC%83%81-%EB%B0%94%EA%BF%94%EC%95%BC%ED%95%98%EB%82%98\">null로는 항상 바꿔야하나?</a></li>\n<li><a href=\"/Java/20220304-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-7/#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98%EB%A5%BC-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EB%8A%94-3%EA%B0%9C%EC%9D%98-%EC%A3%BC%EB%B2%94\">메모리 누수를 발생시키는 3개의 주범</a></li>\n<li><a href=\"/Java/20220304-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-7/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 04일","title":"[Effective Java] Item7. 다 쓴 객체 참조를 해체하라","tags":["Java","Effective Java"]}}},"pageContext":{"slug":"/Java/20220304-이펙티브자바-7/","previous":{"fields":{"slug":"/Git/20220303-파일의_마지막_개행/"},"frontmatter":{"title":"No newline at a end of file, 파일의 끝에는 개행 추가❗️"}},"next":{"fields":{"slug":"/Java/20220304-이펙티브자바-6/"},"frontmatter":{"title":"[Effective Java] Item6. 불필요한 객체 생성을 피하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}