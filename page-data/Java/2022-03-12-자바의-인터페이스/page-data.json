{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/2022-03-12-자바의-인터페이스/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"Interface 인터페이스는 클래스나 프로그램이 제공하는 기능을 명시적으로 선언하여주는 클래스나 프로그램이 제공하는 명세이다. 인터페이스를 사용하면 클라이언트 프로그램들은 인터페이스에 선언된 메서드 명세만을 보고 이를 구현한 클래스를 사용할 수 있어서 편리하다. 어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메서드를 구현했…","html":"<h2 id=\"interface\" style=\"position:relative;\"><a href=\"#interface\" aria-label=\"interface permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface</h2>\n<ul>\n<li>인터페이스는 클래스나 프로그램이 제공하는 기능을 명시적으로 선언하여주는 클래스나 프로그램이 제공하는 명세이다.</li>\n<li>인터페이스를 사용하면 클라이언트 프로그램들은 인터페이스에 선언된 메서드 명세만을 보고 이를 구현한 클래스를 사용할 수 있어서 편리하다.</li>\n<li>어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메서드를 구현했다는 의미이다. (하나의 클래스가 인터페이스를 implements 받은 것은 구현코드의 상속이 아니라서 <strong>타입상속</strong>을 받았다고 한다.)</li>\n<li>하나의 인터페이스로 선언된 명세를 이용하여 여러 다양한 객체를 구현하여 사용하는 것이 자바의 특성중 하나인 다형성이다.</li>\n</ul>\n<h2 id=\"interface의-특징\" style=\"position:relative;\"><a href=\"#interface%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"interface의 특징 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface의 특징</h2>\n<ul>\n<li>구현코드가 없는 추상 메서드로만 구성되어있다. (메서드를 선언하면 모든 메서드가 <code>public abstract</code>으로 컴파일된다.)</li>\n<li>구현 class는 interface의 모든 abstract method들을 overriding하거나 class를 abstract class로 만들어야한다.</li>\n<li>구현코드가 없어서 <strong>멤버변수를 가질 수 없고 모든 변수는 상수로 선언</strong>된다. (변수들은 <code>public static final</code>로 컴파일된다.)</li>\n<li>클래스 상속과 달리 구현 코드가 없으므로 하나의 클래스에 여러 인터페이스를 구현할 수 있다.</li>\n</ul>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">인터페이스_이름</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">float</span><span class=\"mtk4\"> pi </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk7\">3.14F</span><span class=\"mtk1\">;</span><span class=\"mtk4\"> </span><span class=\"mtk5 mtki\">// public static final으로 컴파일된다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> makeSomething</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<blockquote>\n<p>Java 8부터는 default method와 static method가 생겨 일부 구현 코드들도 존재한다.</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>default method</strong></p>\n<ul>\n<li>해당 인터페이스를 구현하는 클래스들에서 기본적으로 공통으로 사용할 수 있는 메서드이다.</li>\n<li><strong>구현 코드를 넣을 수 있다.</strong></li>\n<li>구현 클래스에서 필요에 따라 재정의하여 사용할 수도 있다.</li>\n<li>interface내에서 default method는 private method를 호출할 때 private method, private static method 둘 다 호출가능하다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Test</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">default</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> defaultMetnod</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">privateMethod</span><span class=\"mtk1\">();  </span><span class=\"mtk5 mtki\">// private method</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">privateStaticMethod</span><span class=\"mtk1\">();   </span><span class=\"mtk5 mtki\">// private static method</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>\n<p><strong>static method</strong></p>\n<ul>\n<li>static method는 static변수와 같이 인스턴스를 생성하지 않아도 사용가능하다.</li>\n<li><strong>구현 코드를 넣을 수 있다.</strong></li>\n<li>\n<p>static method에서 private method를 호출할 때는 private static만 호출가능하다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Test</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span></code></pre>\n</li>\n</ul>\n<p>static int total(int[] arr) {\nint total = 0;\nfor (int num : arr) {\ntotal += num;</p>\n<p>}\n//privateMethod();  //private method라 오류발생\nprivateStaticMethod();  // private static method라 호출 가능\nreturn total;\n}\n}</p>\n<pre><code></code></pre>\n</li>\n<li>\n<p><strong>private method</strong></p>\n<ul>\n<li>인터페이스 내부에서만 사용하기 위해 구현한 메서드로 인터페이스를 구현한 클래스에서 사용하거나 재정의 할 수 없다.</li>\n<li>\n<p>default method나 static method에서만 사용한다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Test</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span></code></pre>\n</li>\n</ul>\n<p>private void privateMethod() {\nSystem.out.println(\"myMethod\");\n}</p>\n<p>private static void privateStaticMethod() {\nSystem.out.println(\"my Static Method\");\n}\n}</p>\n<pre><code></code></pre>\n</li>\n</ul>\n<h3 id=\"🧑-예시-코드\" style=\"position:relative;\"><a href=\"#%F0%9F%A7%91-%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C\" aria-label=\"🧑 예시 코드 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧑🏻‍💻 예시 코드</h3>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Calculator</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">double</span><span class=\"mtk4\"> PI </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk7\">3.14</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> ERROR </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk8\">-</span><span class=\"mtk7\">999999</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">int</span><span class=\"mtk3\"> add</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">num1</span><span class=\"mtk1\">, </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">num2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">int</span><span class=\"mtk3\"> substract</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">num1</span><span class=\"mtk1\">, </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">num2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">int</span><span class=\"mtk3\"> times</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">num1</span><span class=\"mtk1\">, </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">num2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">int</span><span class=\"mtk3\"> divide</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">num1</span><span class=\"mtk1\">, </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">num2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk5 mtki\">// default method는 위의 method와는 다르게 이 interface를 implement하는 클래스에서</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk5 mtki\">// 꼭 재정의를 하지 않아도 사용가능하다. (원하면 재정의도 가능)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">default</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> description</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;정수의 사칙연산을 제공합니다.&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">myMethod</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">myStaticMethod</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk5 mtki\">// default method에서는 private메서드를 기본, static둘 다 호출 가능하다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk5 mtki\">// interface에서 static으로 생성한 method는 인스턴스 없이 사용 가능하다!!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk3\"> total</span><span class=\"mtk1\">(</span><span class=\"mtk9\">int</span><span class=\"mtk1\">[] </span><span class=\"mtk4 mtki\">arr</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4\">total</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk9\">int</span><span class=\"mtk1\"> </span><span class=\"mtk4\">num</span><span class=\"mtk9\">:</span><span class=\"mtk1\"> arr) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            total </span><span class=\"mtk8\">+=</span><span class=\"mtk1\"> num;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk5 mtki\">//myMethod();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">myStaticMethod</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk5 mtki\">// static method에서 private method를 호출할때는 private static만 호출가능하다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> total;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> myMethod</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;myMethod&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> myStaticMethod</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;my Static Method&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2 id=\"interface의-형-변환\" style=\"position:relative;\"><a href=\"#interface%EC%9D%98-%ED%98%95-%EB%B3%80%ED%99%98\" aria-label=\"interface의 형 변환 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface의 형 변환</h2>\n<ul>\n<li>\n<p>인터페이스를 구현한 클래스는 아래와 같이 인터페이스 형으로 선언한 변수로 형 변환 할 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">Calculator</span><span class=\"mtk4\"> calculator </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">CompleteCalculator</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// Calc는 interface, CompleteCalc는 Calc를 구현한 class</span></span></span></code></pre>\n</li>\n<li>상속에서의 형 변환과 동일한 의미를 가지며 형 변환을 하는 경우 인터페이스에 선언된 메서드만을 사용가능하다. (클래스에서 새로 선언한 method는 사용불가하다.)</li>\n</ul>\n<h2 id=\"여러-인터페이스-구현-및-상속\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84-%EB%B0%8F-%EC%83%81%EC%86%8D\" aria-label=\"여러 인터페이스 구현 및 상속 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러 인터페이스 구현 및 상속</h2>\n<ul>\n<li>자바의 인터페이스는 구현 코드가 없어서 하나의 클래스가 여러 인터페이스를 구현할 수 있다. (인터페이스는 다중 상속이 가능하다는 의미)</li>\n<li>default method가 중복되는 경우는 구현 class에서 해당 default method를 재정의해야한다.</li>\n<li>default method의 재정의의 경우 <code>super</code>를 사용하여 interface의 method를 읽어와 재정의해도 되며 아예 새로 재정의하여도 된다.</li>\n<li>인터페이스 사이에도 상속을 할 수 있으며 이럴때는 <code>extends</code>를 사용한다.</li>\n<li>여러 interface를 구현한 클래스를 인터페이스 타입으로 형 변환 하는 경우, 형변환하는 인터페이스에 선언된 메서드만 사용가능하다.</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/2022-03-12-%EC%9E%90%EB%B0%94%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/#interface\">Interface</a></li>\n<li>\n<p><a href=\"/Java/2022-03-12-%EC%9E%90%EB%B0%94%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/#interface%EC%9D%98-%ED%8A%B9%EC%A7%95\">Interface의 특징</a></p>\n<ul>\n<li><a href=\"/Java/2022-03-12-%EC%9E%90%EB%B0%94%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/#%F0%9F%A7%91-%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C\">🧑🏻‍💻 예시 코드</a></li>\n</ul>\n</li>\n<li><a href=\"/Java/2022-03-12-%EC%9E%90%EB%B0%94%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/#interface%EC%9D%98-%ED%98%95-%EB%B3%80%ED%99%98\">Interface의 형 변환</a></li>\n<li><a href=\"/Java/2022-03-12-%EC%9E%90%EB%B0%94%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/#%EC%97%AC%EB%9F%AC-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84-%EB%B0%8F-%EC%83%81%EC%86%8D\">여러 인터페이스 구현 및 상속</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 12일","title":"자바의 인터페이스","tags":["Java","Interface"]}}},"pageContext":{"slug":"/Java/2022-03-12-자바의-인터페이스/","previous":{"fields":{"slug":"/Java/2022-03-11-자바-상속/"},"frontmatter":{"title":"자바의 상속"}},"next":{"fields":{"slug":"/Java/2022-03-12-이펙티브자바-9/"},"frontmatter":{"title":"[Effective Java] Item9. try-finally보다는 try-with-resources를 사용하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}