{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220303-이펙티브자바-5/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 정적 유틸리티와 싱글턴의 단점 대부분의 많은 클래스들은 하나의 자원에 의존합니다. 위의 두 코드는 사전을 정적 유틸리티와 싱글턴을 통해 구현한 각각의 코드입니다. 작은 단위의 작업을 하는 유틸리티 클래스 또는 싱글턴 객체일 경우\n위와 같은 코드는…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<h1 id=\"정적-유틸리티와-싱글턴의-단점\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%A0%81-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0%EC%99%80-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"정적 유틸리티와 싱글턴의 단점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정적 유틸리티와 싱글턴의 단점</h1>\n<p>대부분의 많은 클래스들은 하나의 자원에 의존합니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 정적 유틸리티를 잘못 사용한 예</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SpellChecker</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Lexicon</span><span class=\"mtk4\"> dictionary </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk1\">...;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> SpellChecker</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk9\">boolean</span><span class=\"mtk3\"> isValid</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">word</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{...}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk11\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">String</span><span class=\"mtk1\">&gt;</span><span class=\"mtk3\"> suggestions</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">typo</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{...}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 싱글턴 패턴을 잘못 사용한 예</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SpellChecker</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Lexicon</span><span class=\"mtk4\"> dictionary </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk1\">...;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> SpellChecker</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk11\">SpellChecker</span><span class=\"mtk3\"> getInstance</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> = new SpellChecker</span><span class=\"mtk1\">(..);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">boolean</span><span class=\"mtk3\"> isValid</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">word</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{...}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk11\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">String</span><span class=\"mtk1\">&gt;</span><span class=\"mtk3\"> suggestions</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">typo</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{...}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>위의 두 코드는 사전을 정적 유틸리티와 싱글턴을 통해 구현한 각각의 코드입니다. 작은 단위의 작업을 하는 유틸리티 클래스 또는 싱글턴 객체일 경우\n위와 같은 코드는 나쁘지 않습니다. 하지만 위의 예시로 들어진 사전과 같이 하는 작업이 큰 경우(언어별, 특수 어휘용 등으로 분류 가능)에는\n하나의 사전에서 모든 일을 하는 것을 효율적이지 않습니다.</p>\n<h1 id=\"의존-객체-주입-패턴\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4-%EA%B0%9D%EC%B2%B4-%EC%A3%BC%EC%9E%85-%ED%8C%A8%ED%84%B4\" aria-label=\"의존 객체 주입 패턴 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존 객체 주입 패턴</h1>\n<p>이와 같이 <strong>사용하는 자원에 따라 동작이 달라지는 클래스들은 정적 유틸리티 클래스나 싱글턴 방식이 적합하지 않습니다.</strong>\n이러한 경우에는 클래스가 단일 인스턴스가 아닌 여러 인스턴스를 지원하고 사용자 입장에서 원하는 자원을 사용할 수 있도록\n<strong>인스턴스를 생성할 때 생성자에 필요한 자원을 넘겨주는 방식을 사용</strong>해야 합니다. (의존 객체 주입의 한 형태)</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 의존 객체 주입을 한 예</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SpellChecker</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Lexicon</span><span class=\"mtk4\"> dictionary </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk1\">...;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> SpellChecker</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Lexicon</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">dictionary</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk4\">dictionary</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Objects</span><span class=\"mtk1\">.</span><span class=\"mtk3\">requireNonNull</span><span class=\"mtk1\">(dictionary);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">boolean</span><span class=\"mtk3\"> isValid</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">word</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{...}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk11\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">String</span><span class=\"mtk1\">&gt;</span><span class=\"mtk3\"> suggestions</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">typo</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{...}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>위의 코드는 의존 객체 주입을 한 예시 코드입니다. 코드를 보면 위의 싱글턴과 정적 유틸리티 클래스를 통한 공통된 메서드 사용이 아닌\n생성자에 원하는 자원(dictionary)를 넘겨주며 원하는 인스턴스를 만들고 그에 맞는 자원을 쓸 수 있습니다.</p>\n<blockquote>\n<p>이러한 생성자 주입은 정적 팩터리와 빌더에도 모두 응용 가능하다.</p>\n</blockquote>\n<h1 id=\"팩터리-메서드-패턴\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%8C%A8%ED%84%B4\" aria-label=\"팩터리 메서드 패턴 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩터리 메서드 패턴</h1>\n<p>의존 객체 주입 패턴의 변형으로 생성자에게 자원 팩터리를 넘겨주는 팩터리 메서드 패턴(Factory Method Pattern)이 있습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">FunctionalInterface</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Supplier</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">T</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">T</span><span class=\"mtk3\"> get</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>다음 인터페이스를 예시로 들자면 <code>Supplier&#x3C;T></code>는 <code>&#x3C;T></code>를 통해 타입 매개변수를 제한하고, 클라이언트는\n제한한 타입의 하위 타입이라면 무엇이든 생성할 수 있는 팩터리를 넘길 수 있습니다.</p>\n<blockquote>\n<p>팩터리란? 호출될 때마다 특정 타입의 인스턴스를 반복해서 만들어주는 객체</p>\n</blockquote>\n<h1 id=\"의존-객체-주입의-장단점\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4-%EA%B0%9D%EC%B2%B4-%EC%A3%BC%EC%9E%85%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"의존 객체 주입의 장단점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존 객체 주입의 장단점</h1>\n<p>장점</p>\n<ul>\n<li>유연성, 재사용성, 테스트 용이성을 개선해줍니다.\n단점</li>\n<li>\n<p>의존성이 많은 큰 프로젝트에서는 코드를 어지럽게 만들기도 합니다.</p>\n<blockquote>\n<p>스프링(Spring), 대거(Dagger)와 같은 의존 객체 주입 프레임워크는 의존 객체를 직접 주입하도록 설계된 API를 사용하여 개발자의 불편함을 감소시켜준다.</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h1>\n<p>클래스가 내부적으로 하나 이상의 자원에 의존하고, 그 자원이 클래스 동작에 영향을 준다면 싱글턴과 정적 유틸리티 클래스는\n사용하지 않는 것이 좋다. 이 자원들은 클래스가 직접 만들게 해서도 안 된다. 대신 필요한 자원을 생성자에 혹은 정적 팩터리나 빌더에 넘겨주도록 하는 것이 좋다.\n의존 객체 주입이라 하는 이 기법은 클래스의 유연성, 재사용성, 테스트 용이성을 개선해준다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/20220303-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-5/#%EC%A0%95%EC%A0%81-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0%EC%99%80-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9D%98-%EB%8B%A8%EC%A0%90\">정적 유틸리티와 싱글턴의 단점</a></li>\n<li><a href=\"/Java/20220303-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-5/#%EC%9D%98%EC%A1%B4-%EA%B0%9D%EC%B2%B4-%EC%A3%BC%EC%9E%85-%ED%8C%A8%ED%84%B4\">의존 객체 주입 패턴</a></li>\n<li><a href=\"/Java/20220303-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-5/#%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%8C%A8%ED%84%B4\">팩터리 메서드 패턴</a></li>\n<li><a href=\"/Java/20220303-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-5/#%EC%9D%98%EC%A1%B4-%EA%B0%9D%EC%B2%B4-%EC%A3%BC%EC%9E%85%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">의존 객체 주입의 장단점</a></li>\n<li><a href=\"/Java/20220303-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-5/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 03일","title":"[Effective Java] Item5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라.","tags":["Java","Effective Java","의존 객체 주입 패턴","팩터리 메서드 패턴"]}}},"pageContext":{"slug":"/Java/20220303-이펙티브자바-5/","previous":{"fields":{"slug":"/Java/20220302-동등성과-동일성/"},"frontmatter":{"title":"동등성과 동일성"}},"next":{"fields":{"slug":"/Git/20220303-파일의_마지막_개행/"},"frontmatter":{"title":"No newline at a end of file, 파일의 끝에는 개행 추가❗️"}}}},"staticQueryHashes":["3911196313","4111100897"]}