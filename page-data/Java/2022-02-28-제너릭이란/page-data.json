{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/2022-02-28-제너릭이란/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"제너릭이란? 제너릭이란 무엇일까요?? 제너릭이 무엇인지 몰라도 자바 프로그래밍을 하며 <T>, <E>와 같은 문자들을 접해봤을 것입니다.\n딱 봐도 어려워보이는 이것, 이러한 것들을 우리는 제너릭이라고 합니다. 그럼 제너릭에 대해 알아보도록 하겠습니다. 제너릭은 하나의 값이 여러 자료형으로 쓰일 수 있도록 하는 방법을 의미합니다.\n대표적인 예시를 들어보면 …","html":"<h1 id=\"제너릭이란\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80\" aria-label=\"제너릭이란 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너릭이란?</h1>\n<p>제너릭이란 무엇일까요?? 제너릭이 무엇인지 몰라도 자바 프로그래밍을 하며 <code>&#x3C;T></code>, <code>&#x3C;E></code>와 같은 문자들을 접해봤을 것입니다.\n딱 봐도 어려워보이는 이것, 이러한 것들을 우리는 제너릭이라고 합니다.</p>\n<p>그럼 제너릭에 대해 알아보도록 하겠습니다.</p>\n<p>제너릭은 하나의 값이 여러 자료형으로 쓰일 수 있도록 하는 방법을 의미합니다.\n대표적인 예시를 들어보면 <code>List</code>가 있습니다. <code>List</code> 인터페이스와 <code>ArrayList</code>의 구현체를 보면 다음과 같습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Collection</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">ArrayList</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk9\">extends</span><span class=\"mtk4\"> </span><span class=\"mtk11\">AbstractList</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  </span><span class=\"mtk9\">implements</span><span class=\"mtk4\"> </span><span class=\"mtk11\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;,</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RandomAccess</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Cloneable</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> java.io.</span><span class=\"mtk11\">Serializable</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span><span class=\"mtk4\">)</span></span></span></code></pre>\n<p>이러한 인터페이스와 구현체를 통해 우리가 인스턴스를 생성할 떄는 어떤 식으로 생성하나요?\n정수형의 리스트와 문자열의 리스트를 생성하면 아마 아래의 코드와 같이 생성하였을 것입니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">Integer</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> integers </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk11\">ArrayList</span><span class=\"mtk1\">&lt;&gt;</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">List</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">String</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> strings </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk11\">ArrayList</span><span class=\"mtk1\">&lt;&gt;</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>이와 같이 <code>List&#x3C;E></code>에서 <code>&#x3C;E></code>위치에 Integer타입이 들어가면 정수형 리스트, String타입이 들어가면 문자열 리스트가 생성됩니다.</p>\n<p>이렇게 <strong>클래스 내부에서 지정하는 것이 아닌 외부에서 사용자에 의해 타입을 지정하는 것을 제너릭(Generic)이라고 합니다.</strong></p>\n<h1 id=\"제너릭의-장점\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"제너릭의 장점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너릭의 장점</h1>\n<ul>\n<li>잘못된 타입이 들어올 수 있는 것을 컴파일 단계에서 방지할 수 있다.</li>\n<li>특정 타입으로 제한함으로써 타입의 안정성을 제공한다.</li>\n<li>타입 체크와 형변환을 생략할 수 있으므로 코드가 간결해진다.</li>\n<li>비슷한 기능을 지원하는 경우 코드의 재사용성이 높아진다.</li>\n</ul>\n<h1 id=\"제너릭-사용하기\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A6%AD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"제너릭 사용하기 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너릭 사용하기</h1>\n<h2 id=\"제너릭-타입\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A6%AD-%ED%83%80%EC%9E%85\" aria-label=\"제너릭 타입 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너릭 타입</h2>\n<p>일반적으로 제너릭을 사용할 때는 아래의 타입들을 많이 사용합니다.\n꼭 해당 타입과 일치할 필요는 없지만 암묵적으로 정해진 규칙인 만큼 우리도 지키는 것이 좋습니다.👍🏻</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">타입</th>\n<th align=\"center\">내용</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>&#x3C;T></code></td>\n<td align=\"center\">Type</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&#x3C;E></code></td>\n<td align=\"center\">Element</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&#x3C;K></code></td>\n<td align=\"center\">Key</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&#x3C;V></code></td>\n<td align=\"center\">Value</td>\n</tr>\n<tr>\n<td align=\"center\"><code>&#x3C;N></code></td>\n<td align=\"center\">Number</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"클래스와-인터페이스-선언\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%84%A0%EC%96%B8\" aria-label=\"클래스와 인터페이스 선언 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 인터페이스 선언</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">GenericClass</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">T</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span><span class=\"mtk4\"> </span><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">interface</span><span class=\"mtk4\"> </span><span class=\"mtk11\">GenericInterface</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">T</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span><span class=\"mtk4\"> </span><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>제너릭 클래스와 인터페이스는 아래와 같이 선언을 합니다. 이때 제너릭 타입의 경우 1개가 아닌 두개 이상으로도 둘 수 있습니다.\n2개 이상의 제너릭타입을 사용하는 대표적인 예로는 Map 인터페이스와 구현체가 있습니다.</p>\n<blockquote>\n<p>객체 생성을 할 떄 제너릭 타입에 입력할 타입의 경우 int,double,long,char과 같은 기본 타입(Primitive type)은\n들어갈 수가 없으며, 참조 타입(Reference type)만 들어갈 수 있습니다.\n만약 primitive type을 사용하고 싶다면 wrapper class를 사용해야합니다.</p>\n</blockquote>\n<p>사용 예시는 다음과 같습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">GenericClass</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">E</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk11\">E</span><span class=\"mtk4\"> element</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Main</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">GenericClass</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">Integer</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> integerGenericClass </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk11\">GenericClass</span><span class=\"mtk1\">&lt;&gt;</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">GenericClass</span><span class=\"mtk1\">&lt;</span><span class=\"mtk11\">String</span><span class=\"mtk1\">&gt;</span><span class=\"mtk4\"> stringGenericClass </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk11\">GenericClass</span><span class=\"mtk1\">&lt;&gt;</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2 id=\"제너릭-메서드\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%EB%84%88%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"제너릭 메서드 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제너릭 메서드</h2>\n<p>제너릭을 사용한 클래스와 인터페이스의 경우, 클래스와 인터페이스 내에서 해당 제너릭을 사용할 수 있었습니다.\n제너릭은 클래스 뿐만 아니라 특정 메서드 내에서만 사용할 수도 있습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;</span><span class=\"mtk4\">T</span><span class=\"mtk8\">&gt;</span><span class=\"mtk4\"> </span><span class=\"mtk11\">T</span><span class=\"mtk4\"> </span><span class=\"mtk3\">genericMethod</span><span class=\"mtk4\">(</span><span class=\"mtk11\">T</span><span class=\"mtk4\"> o) { }</span></span></span></code></pre>\n<blockquote>\n<p>제너릭 메서드의 경우 반환타입 이전에 제너릭타입(<code>&#x3C;T></code>)을 선언해줘야 합니다.</p>\n</blockquote>\n<p>사용 예시는 다음과 같습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">void</span><span class=\"mtk4\"> </span><span class=\"mtk3\">main</span><span class=\"mtk4\">(</span><span class=\"mtk11\">String</span><span class=\"mtk4\">[] args) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">GenericTest</span><span class=\"mtk4\"> genericTest </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">GenericTest</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">genericTest</span><span class=\"mtk1\">.</span><span class=\"mtk3\">genericMethod</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;Test&quot;</span><span class=\"mtk1\">).</span><span class=\"mtk3\">getClass</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk5 mtki\">// result : class java.lang.String</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">genericTest</span><span class=\"mtk1\">.</span><span class=\"mtk3\">genericMethod</span><span class=\"mtk1\">(</span><span class=\"mtk7\">123</span><span class=\"mtk1\">).</span><span class=\"mtk3\">getClass</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk5 mtki\">// result : class java.lang.Integer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<blockquote>\n<p>만약 <strong>제너릭 메서드를 정적(static) 메서드로 만들 경우, 제너릭 클래스에 위치한 제너릭과 다른 제너릭을 사용해야합니다.</strong>\n그렇지 않을 경우 클래스에 정의된 제너릭 타입이 지정되지 않아 에러가 발생합니다.</p>\n</blockquote>\n<h2 id=\"제한된-제너릭과-와일드-카드\" style=\"position:relative;\"><a href=\"#%EC%A0%9C%ED%95%9C%EB%90%9C-%EC%A0%9C%EB%84%88%EB%A6%AD%EA%B3%BC-%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C\" aria-label=\"제한된 제너릭과 와일드 카드 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한된 제너릭과 와일드 카드</h2>\n<p>제너릭 범위를 제한하고 싶다면 <code>extends</code>, <code>super</code>, 와일드카드(<code>?</code>)를 사용해야합니다.</p>\n<p>범위 지정의 방법들은 다음과 같습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">&lt;</span><span class=\"mtk11\">K</span><span class=\"mtk4\"> extends T</span><span class=\"mtk8\">&gt;</span><span class=\"mtk4\">\t</span><span class=\"mtk5 mtki\">// T와 T의 자손 타입만 가능 (K는 들어오는 타입으로 지정 됨)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">&lt;</span><span class=\"mtk11\">K</span><span class=\"mtk4\"> </span><span class=\"mtk11\">super</span><span class=\"mtk4\"> T</span><span class=\"mtk8\">&gt;</span><span class=\"mtk4\">\t</span><span class=\"mtk5 mtki\">// T와 T의 부모(조상) 타입만 가능 (K는 들어오는 타입으로 지정 됨)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">&lt;</span><span class=\"mtk9\">?</span><span class=\"mtk4\"> extends T</span><span class=\"mtk8\">&gt;</span><span class=\"mtk4\">\t</span><span class=\"mtk5 mtki\">// T와 T의 자손 타입만 가능</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">&lt;</span><span class=\"mtk9\">?</span><span class=\"mtk4\"> </span><span class=\"mtk11\">super</span><span class=\"mtk4\"> T</span><span class=\"mtk8\">&gt;</span><span class=\"mtk4\">\t</span><span class=\"mtk5 mtki\">// T와 T의 부모(조상) 타입만 가능</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">&lt;</span><span class=\"mtk9\">?</span><span class=\"mtk8\">&gt;</span><span class=\"mtk4\">\t\t</span><span class=\"mtk5 mtki\">// 모든 타입 가능. &lt;? extends Object&gt;랑 같은 의미</span></span></span></code></pre>\n<blockquote>\n<p>이 떄 <code>extends</code>는 상한 경계, <code>super</code>는 하한 경계라고 합니다.</p>\n</blockquote>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://st-lab.tistory.com/153\">https://st-lab.tistory.com/153</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/2022-02-28-%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80/#%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80\">제너릭이란?</a></li>\n<li><a href=\"/Java/2022-02-28-%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80/#%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%98-%EC%9E%A5%EC%A0%90\">제너릭의 장점</a></li>\n<li>\n<p><a href=\"/Java/2022-02-28-%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80/#%EC%A0%9C%EB%84%88%EB%A6%AD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">제너릭 사용하기</a></p>\n<ul>\n<li><a href=\"/Java/2022-02-28-%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80/#%EC%A0%9C%EB%84%88%EB%A6%AD-%ED%83%80%EC%9E%85\">제너릭 타입</a></li>\n<li><a href=\"/Java/2022-02-28-%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80/#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%84%A0%EC%96%B8\">클래스와 인터페이스 선언</a></li>\n<li><a href=\"/Java/2022-02-28-%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80/#%EC%A0%9C%EB%84%88%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C\">제너릭 메서드</a></li>\n<li><a href=\"/Java/2022-02-28-%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80/#%EC%A0%9C%ED%95%9C%EB%90%9C-%EC%A0%9C%EB%84%88%EB%A6%AD%EA%B3%BC-%EC%99%80%EC%9D%BC%EB%93%9C-%EC%B9%B4%EB%93%9C\">제한된 제너릭과 와일드 카드</a></li>\n</ul>\n</li>\n<li><a href=\"/Java/2022-02-28-%EC%A0%9C%EB%84%88%EB%A6%AD%EC%9D%B4%EB%9E%80/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 02월 28일","title":"제너릭(Generic)이란?","tags":["Java","Generic"]}}},"pageContext":{"slug":"/Java/2022-02-28-제너릭이란/","previous":{"fields":{"slug":"/Java/2022-02-28-큰-숫자의-언더스코어/"},"frontmatter":{"title":"자바에서 큰 숫자를 가독성 좋게 하는 방법"}},"next":{"fields":{"slug":"/Java/2022-02-28-이펙티브자바-4/"},"frontmatter":{"title":"[Effective Java] Item4. 인스턴스화를 막으려거든 private 생성자를 사용하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}