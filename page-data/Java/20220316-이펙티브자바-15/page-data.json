{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220316-이펙티브자바-15/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 잘 설계된 컴포넌트와 어슬픈 컴포넌트의 차이는 컴포넌트의 정보 은닉의 정도 입니다.\n정보 은닉을 하면 내부 구현을 숨겨 구현과 API를 깔끔하게 분리할 수 있습니다. 정보은닉의 장점은 다음과 같습니다. 여러 컴포넌트를 병렬로 개발할 수 있기 때문…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<p>잘 설계된 컴포넌트와 어슬픈 컴포넌트의 차이는 컴포넌트의 정보 은닉의 정도 입니다.\n정보 은닉을 하면 내부 구현을 숨겨 구현과 API를 깔끔하게 분리할 수 있습니다.</p>\n<p>정보은닉의 장점은 다음과 같습니다.</p>\n<ul>\n<li>여러 컴포넌트를 병렬로 개발할 수 있기 때문에 <strong>개발 속도를 높여준다.</strong></li>\n<li>각각의 컴포넌트를 더 빨리 파악하여 디버깅할 수 있고, 다른 컴포넌트로 교체하는 부담도 적기 때문에 <strong>시스템 관리 비용을 낮출 수 있다.</strong></li>\n<li>정보 은닉 자체가 성능을 높여주지 않지만, 완성된 시스템을 프로파일링해 최적화할 컴포넌트를 정한 다음 다른 컴포넌트에 영향을 주지 않고 해당 컴포넌트만을 최적화 할 수 있어 <strong>성능 최적화에 도움을 준다.</strong></li>\n<li>외부에 거의 의존하지 않고 독자적으로 동작할 수 있는 컴포넌트라면 낯선 환경에서도 유용하게 쓰일 가능성이 있어 <strong>소프트웨어의 재사용성을 높일 수 있다.</strong></li>\n<li>시스템 전체가 아직 완성되지 않은 상태에서도 개별 컴포넌트의 동작을 검증할 수 있기 떄문에 <strong>큰 시스템을 제작하는 난의도를 낮춰준다.</strong></li>\n</ul>\n<p>이러한 장점을 얻기 위해 자바는 정보 은닉을 위한 다양한 장치들을 제공합니다.\n그 중에서도 접근 제한자를 제대로 활용하는 것이 자바 정보 은닉의 핵심이라 할 수 있습니다.</p>\n<h1 id=\"자바의-접근-제어자의-기본-원칙\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%9D%98-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4%EC%9E%90%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EC%B9%99\" aria-label=\"자바의 접근 제어자의 기본 원칙 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바의 접근 제어자의 기본 원칙</h1>\n<p>접근 제어자의 활용은 <strong>모든 클래스와 멤버의 접근성을 가능한 좁히면 됩니다.</strong></p>\n<ul>\n<li>\n<p>톱레벨 클래스와 인터페이스에 부여할 수 있는 접근 수준은 <code>package-private</code>와 <code>public</code>이 있다.</p>\n<ul>\n<li><code>public</code>으로 선언할 경우 공개 API가 된다.</li>\n<li><code>package-private</code>으로 선언하면 해당 패키지 안에서만 이용할 수 있다.</li>\n<li>패키지 외부에서 쓸 일이 없으면 <code>package-private</code>으로 선언하도록 하자</li>\n</ul>\n</li>\n<li>\n<p>한 클래스에서만 사용하는 <code>package-private</code> 톱레벨 클래스나 인터페이스는 이를 사용하는 클래스 안에 <code>private static</code>으로 중첩시켜보자</p>\n<ul>\n<li>톰레벨로 두면 같은 패키지의 모든 클래스가 접근할 수 있다.</li>\n<li><code>private static</code>은 바깥 클래스 하나에서만 접근 가능하다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"멤버-접근-수준\" style=\"position:relative;\"><a href=\"#%EB%A9%A4%EB%B2%84-%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80\" aria-label=\"멤버 접근 수준 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멤버 접근 수준</h2>\n<p>멤버(필드, 메서드, 중첩 클래스, 중첩 인터페이스)에 부여할 수 있는 접근 수준은 네 가지다.</p>\n<ul>\n<li><code>private</code> : 멤버를 선언한 톱레벨 클래스에서만 접근할 수 있다.</li>\n<li><code>package-private</code> : 멤버가 소속된 패키지 안의 모든 클래스에서 접근할 수 있다.\n접근 제한자를 명시하지 않았을 때 적용되는 패키지 접근 수준이다(단, 인터페이스의 멤버는 기본적으로 <code>public</code>이 적용된다).</li>\n<li><code>protected</code> : <code>package-private</code>의 접근 범위를 포함하며, 이 멤버를 선언한 클래스의 하위 클래스에서도 접근할 수 있다.</li>\n<li><code>public</code> : 모든 곳에서 접근할 수 있다.</li>\n</ul>\n<h2 id=\"클래스의-접근-수준-설정-순서\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80-%EC%84%A4%EC%A0%95-%EC%88%9C%EC%84%9C\" aria-label=\"클래스의 접근 수준 설정 순서 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스의 접근 수준 설정 순서</h2>\n<ol>\n<li>클래스의 공개 API외의 모든 멤버는 <code>private</code>으로 만드는 것이 좋다.</li>\n<li>같은 패키지의 다른 클래스가 접근해야 하는 멤버에 한하여 <code>private</code>을 제거해 <code>package-private</code>으로 풀어준다.</li>\n<li><code>package-private</code>와 <code>private</code>은 API에 영향을 주지 않는다.</li>\n<li>권하는 풀어주는 일이 자주 발생한다면 시스템에서 컴포넌트를 더 분해하는 것을 고민해봐야한다.</li>\n</ol>\n<h2 id=\"public-클래스에서-멤버의-접근-수준\" style=\"position:relative;\"><a href=\"#public-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EB%A9%A4%EB%B2%84%EC%9D%98-%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80\" aria-label=\"public 클래스에서 멤버의 접근 수준 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>public 클래스에서 멤버의 접근 수준</h2>\n<p>멤버의 접근 수준을 <code>package-private</code>에서 <code>protected</code>로 바꾸는 순간 접근할 수 있는 대상이 넓어지게 됩니다.\n특히 <code>public</code> 클래스의 <code>protected</code>는 API로 공개가 되어 <code>protected</code>는 적을수록 좋습니다.</p>\n<h2 id=\"멤버-접근성-제약\" style=\"position:relative;\"><a href=\"#%EB%A9%A4%EB%B2%84-%EC%A0%91%EA%B7%BC%EC%84%B1-%EC%A0%9C%EC%95%BD\" aria-label=\"멤버 접근성 제약 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>멤버 접근성 제약</h2>\n<ul>\n<li>상위 클래스의 메서드를 재정의할 때는 <code>상위 클래스의 인스턴스는 하위 클래스의 인스턴스로 대체해 사용할 수 있어야 한다는 규칙을 지키기 위해(리스코프 치환 원칙)</code> 그 접근 수준을 상위 클래스에서보다 좁게 설정 할 수 없다.</li>\n<li>해당 규칙을 어기면 컴파일 오류가 발생하게 됩니다.</li>\n</ul>\n<h2 id=\"테스트와-접근-범위\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%A0%91%EA%B7%BC-%EB%B2%94%EC%9C%84\" aria-label=\"테스트와 접근 범위 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트와 접근 범위</h2>\n<p>테스트를 위해 접근 제어자의 범위를 넓히는 것은 좋지 않은 방법이다.</p>\n<h2 id=\"public-클래스의-인스턴스-필드\" style=\"position:relative;\"><a href=\"#public-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%95%84%EB%93%9C\" aria-label=\"public 클래스의 인스턴스 필드 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>public 클래스의 인스턴스 필드</h2>\n<ul>\n<li><code>public</code> 클래스의 인스턴스 필드는 되도록 <code>public</code>이 아니어야 한다.</li>\n<li><code>public</code> 가편 필드를 갖는 클래스는 일반적으로 thread-safe하지 않다</li>\n<li>\n<p>정적 필드에서 해당 클래스가 표현하는 추상적 개념을 완성하는데 꼭 필요한 구성요소로써의 상수라면 <code>public static final</code>필드로 공개해도 좋다.</p>\n<ul>\n<li>반드시 기본 타입 값이나 불변 객체를 참조해야한다.</li>\n<li>가변 객체를 참조한다면 <code>final</code>이 아닌 필드에 적용되는 모든 불이익이 그대로 적용된다.</li>\n<li>클래스에서 <code>public static final</code> 배열 필드를 두거나 이 필드를 반환하는 접근자 메서드를 제공해서는 안 된다.(클라이언트에서 수정할 수 있다.)</li>\n<li>해결방법1. <code>private static final</code> 배열을 만들고 <code>Collections.unmodifiableList(Arrays.asList(~~))</code>를 통해 불변 리스트를 추가하는 것이다.</li>\n<li>해결방법2. <code>private static final</code> 배열을 만들고 복사본을 반환하는 public 메서드를 추가한다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"모듈-시스템자바9-이후\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9E%90%EB%B0%949-%EC%9D%B4%ED%9B%84\" aria-label=\"모듈 시스템자바9 이후 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 시스템(자바9 이후)</h1>\n<ul>\n<li>모듈 시스템이 도임된 이후 두가지 암묵적 접근 수준이 추가되었다.</li>\n<li>패키지가 클래스들의 묶음이듯, 모듈은 패키지들의 묶음이다. 모듈은 자신에 속하는 패키지 중 공개(export)할 것들을 (관례상 <code>module-info.java 파일</code>에) 선언한다.</li>\n<li><code>protected</code> 혹은 <code>public</code> 멤버라도 해당 패키지를 공개하지 않았다면 모듈 외부에서는 접근할 수 없다.</li>\n<li>모듈 안에서는 <code>exports</code>로 선언했는지 여부에 아무런 영향도 받지 않는다.</li>\n<li>모듈 시스템을 활용하면 클래스를 외부에 공개하지 않으면서도 같은 모듈을 이루는 패키지 사이에서는 자유롭게 공유할 수 있다.</li>\n</ul>\n<h1 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h1>\n<p>프로그램 요소의 접근성은 가능한 한 최소한으로 하라. 꼭 필요한 것만 골라 최소한의 <code>public API</code>를 설계하자.\n그 외에는 클래스, 인터페이스, 멤버가 의도치 않게 API로 공개되는 일이 없도록 해야 한다.\n<code>public</code> 클래스는 상수용 <code>public static final</code> 필드 외에는 어떠한 <code>public</code> 필드도 가져서는 안 된다.\n<code>public static final</code> 필드가 참조하는 객체가 불변인지 확인하라.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#%EC%9E%90%EB%B0%94%EC%9D%98-%EC%A0%91%EA%B7%BC-%EC%A0%9C%EC%96%B4%EC%9E%90%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EC%B9%99\">자바의 접근 제어자의 기본 원칙</a></p>\n<ul>\n<li><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#%EB%A9%A4%EB%B2%84-%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80\">멤버 접근 수준</a></li>\n<li><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80-%EC%84%A4%EC%A0%95-%EC%88%9C%EC%84%9C\">클래스의 접근 수준 설정 순서</a></li>\n<li><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#public-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90%EC%84%9C-%EB%A9%A4%EB%B2%84%EC%9D%98-%EC%A0%91%EA%B7%BC-%EC%88%98%EC%A4%80\">public 클래스에서 멤버의 접근 수준</a></li>\n<li><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#%EB%A9%A4%EB%B2%84-%EC%A0%91%EA%B7%BC%EC%84%B1-%EC%A0%9C%EC%95%BD\">멤버 접근성 제약</a></li>\n<li><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%A0%91%EA%B7%BC-%EB%B2%94%EC%9C%84\">테스트와 접근 범위</a></li>\n<li><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#public-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%95%84%EB%93%9C\">public 클래스의 인스턴스 필드</a></li>\n</ul>\n</li>\n<li><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#%EB%AA%A8%EB%93%88-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9E%90%EB%B0%949-%EC%9D%B4%ED%9B%84\">모듈 시스템(자바9 이후)</a></li>\n<li><a href=\"/Java/20220316-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-15/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 16일","title":"[Effective Java] Item15. 클래스와 멤버의 접근 권한을 최소화하라","tags":["Java","Effective Java","접근 제어자"]}}},"pageContext":{"slug":"/Java/20220316-이펙티브자바-15/","previous":{"fields":{"slug":"/Java/20220315-이펙티브자바-13/"},"frontmatter":{"title":"[Effective Java] Item13. clone 재정의는 주의해서 진행하라"}},"next":{"fields":{"slug":"/Java/20220316-이펙티브자바-14/"},"frontmatter":{"title":"[Effective Java] Item14. Comparable을 구현할지 고려하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}