{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220312-이펙티브자바-9/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. try-finally와 try-with-resources의 차이 InputStream, OutPutStream, java.sql.Connection과 같은 자원들은 사용 후에 close()메서드를 통해 닫아줘야 합니다.\n이는 실제로 클라이언트가 …","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<h1 id=\"try-finally와-try-with-resources의-차이\" style=\"position:relative;\"><a href=\"#try-finally%EC%99%80-try-with-resources%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"try finally와 try with resources의 차이 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-finally와 try-with-resources의 차이</h1>\n<p><code>InputStream</code>, <code>OutPutStream</code>, <code>java.sql.Connection</code>과 같은 자원들은 사용 후에 <code>close()</code>메서드를 통해 닫아줘야 합니다.\n이는 실제로 클라이언트가 놓치기 쉬워 예측하기 어려운 성능 문제로 이어지기도 합니다.</p>\n<blockquote>\n<p>finalizer는 믿음직하지 못하여 사용을 지양하는 것이 좋다.(이펙티브자바 아이템 7)</p>\n</blockquote>\n<p>자원회수를 위한 전통적인 코드로는 많은 프로그래머들이 아래의 코드와 같이 <code>try-finally</code>를 사용하였다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> </span><span class=\"mtk3\">firstLiseOfFile</span><span class=\"mtk4\">(</span><span class=\"mtk11\">String</span><span class=\"mtk4\"> path) throws IOException {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk11\">BufferedReader</span><span class=\"mtk4\"> reader </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">BufferedReader</span><span class=\"mtk4\">(</span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">FileReader</span><span class=\"mtk4\">(path))</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">try</span><span class=\"mtk4\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> </span><span class=\"mtk11\">br</span><span class=\"mtk1\">.</span><span class=\"mtk3\">readLine</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    } </span><span class=\"mtk9\">finally</span><span class=\"mtk4\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">br</span><span class=\"mtk1\">.</span><span class=\"mtk3\">close</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<p>하지만 <code>try-finally</code>를 올바르게 사용하여도 미묘한 결점들이 존재합니다.\n예시 코드가 물리적인 오류로 인해 try문에 위치한 <code>return br.readLine();</code>와 finally에 위치한 <code>br.close();</code>가 모두 실패한다 생각해보자,\n이와같이 두번의 예외가 발생하게 된다면 두번쨰 예외가 처번째 예외를 완전히 삼켜먹어 디버깅을 어렵게 할 것입니다.\n물론 여기서도 두번째 예외 대신 첫번째 예외가 나오게 코드를 수정할 수는 있지만 코드가 지저분해져서 좋지 않은 방법입니다.</p>\n<p>이러한 문제들은 자바 7에서 나온 <code>try-with-resources</code>를 통해 해결할 수 있습니다.</p>\n<blockquote>\n<p>해당 구조를 사용하려면 <code>void</code>를 반환하는 <code>close()</code>메서드 하나만 정의되어있는 <code>AutoCloseable</code>인터페이스를 구현해야합니다.\n수많은 자바 라이브러리들은 이미 <code>AutoCloseable</code>를 구현하거나 확장하였습니다. 개발을 하며 닫아야 하는 자원 클래스를 생성한다면 <code>AutoCloseable</code>인터페이스를 구현하길 바랍니다.</p>\n</blockquote>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> </span><span class=\"mtk3\">firstLiseOfFile</span><span class=\"mtk4\">(</span><span class=\"mtk11\">String</span><span class=\"mtk4\"> path) throws IOException {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">try</span><span class=\"mtk4\"> (</span><span class=\"mtk11\">BufferedReader</span><span class=\"mtk4\"> reader </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">BufferedReader</span><span class=\"mtk4\">(</span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">FileReader</span><span class=\"mtk4\">(path))</span><span class=\"mtk1\">;</span><span class=\"mtk4\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> </span><span class=\"mtk11\">br</span><span class=\"mtk1\">.</span><span class=\"mtk3\">readLine</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<p><code>try-with-resources</code>를 적용한 코드는 위와 같습니다.\n해당 코드는 위의 <code>try-finally</code>로 구현한 코드와 비교하였을 때 코드도 짧아져 가독성이 좋아졌습니다.\n또한 앞에서 설명했던 <code>return br.readLine();</code>와 <code>br.close();</code>에서 예외가 발생하는 상황만 생각해도\n<code>close()</code>의 예외는 숨겨지고 <code>br.readLine();</code>의 예외만 기록되어 문제를 진단하기 쉽습니다.</p>\n<blockquote>\n<p><code>close()</code>와 같이 숨겨진 예외들은 버려지는 것은 아니고 \"숨겨졌다.(suppressed)\"라는 꼬리표를 달고 출력됩니다.</p>\n</blockquote>\n<h1 id=\"핵심정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC\" aria-label=\"핵심정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심정리</h1>\n<p>꼭 회수해야하는 자원을 다룰 때는 예외 상황 없이 <code>try-finally</code>말고, <code>try-with-resources</code>를 사용하도록 하자.\n<code>try-with-resources</code>를 사용하면 코드는 더 짧고 분명해지며, 만들어지는 예외 정보도 훨씬 유용하다. 또한 정확하고 쉽게 자원을 회수할 수도 있다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/20220312-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-9/#try-finally%EC%99%80-try-with-resources%EC%9D%98-%EC%B0%A8%EC%9D%B4\">try-finally와 try-with-resources의 차이</a></li>\n<li><a href=\"/Java/20220312-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-9/#%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC\">핵심정리</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 12일","title":"[Effective Java] Item9. try-finally보다는 try-with-resources를 사용하라","tags":["Java","Effective Java","try-finally","자원 회수"]}}},"pageContext":{"slug":"/Java/20220312-이펙티브자바-9/","previous":{"fields":{"slug":"/Java/20220312-자바의-인터페이스/"},"frontmatter":{"title":"자바의 인터페이스"}},"next":{"fields":{"slug":"/Java/20220314-이펙티브자바-12-toString재정의/"},"frontmatter":{"title":"[Effective Java] Item12. toString을 항상 재정의하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}