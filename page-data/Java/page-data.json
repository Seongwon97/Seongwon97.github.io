{"componentChunkName":"component---src-templates-category-js","path":"/Java/","result":{"data":{"site":{"siteMetadata":{"configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 불변 클래스란? 인스턴스의 내부 값을 수정할 수 없는 클래스이다. 인스턴스에 있는 정보는 고정되어 객체가 파괴되는 순간까지 바뀌지 않는다. 자바에서 제공하는 불면 클래스는 String, Wrapper class, BigInteger, BigDec…","fields":{"slug":"/Java/2022-03-17-이펙티브자바-17/"},"frontmatter":{"date":"2022년 03월 17일","title":"[Effective Java] Item17. 변경 가능성을 최소화하라","tags":["Java","Effective Java"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 일반적으로 사용하는 접근자 제공 방법 다음과 같은 클래스는 필드에 위치한 데이터를 외부에서 직접 접근할 수 있어 캡슐화의 이점을 제공하지 못한다.\n그래서 우리는 일반적으로 필드를 private으로 변경 후 getter를 추가하여 사용합니다. 우리…","fields":{"slug":"/Java/2022-03-17-이펙티브자바-16/"},"frontmatter":{"date":"2022년 03월 17일","title":"[Effective Java] Item16. public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라","tags":["Java","Effective Java","접근 제어자"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. Comparable의 compareTo 메서드 compareTo는 Object의 메서드가 아닙니다. Comparable은 equals와 유사하며, 동치성 비교 뿐만 아니라 순서 비교까지 한다는 특징과 제너릭하다는 특징이 있습니다. 자바 플랫폼 라…","fields":{"slug":"/Java/2022-03-16-이펙티브자바-14/"},"frontmatter":{"date":"2022년 03월 16일","title":"[Effective Java] Item14. Comparable을 구현할지 고려하라","tags":["Java","Effective Java","Comparable"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 잘 설계된 컴포넌트와 어슬픈 컴포넌트의 차이는 컴포넌트의 정보 은닉의 정도 입니다.\n정보 은닉을 하면 내부 구현을 숨겨 구현과 API를 깔끔하게 분리할 수 있습니다. 정보은닉의 장점은 다음과 같습니다. 여러 컴포넌트를 병렬로 개발할 수 있기 때문…","fields":{"slug":"/Java/2022-03-16-이펙티브자바-15/"},"frontmatter":{"date":"2022년 03월 16일","title":"[Effective Java] Item15. 클래스와 멤버의 접근 권한을 최소화하라","tags":["Java","Effective Java","접근 제어자"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 자바에서는 클래스를 복제해도 되는 것을 명시하는 용도인 Cloneable 인터페이스를 제공하고 있습니다.\nCloneable 인터페이스를 구현하여 clone()메서드를 재정의한다면 객체의 필드들을 하나씩 복사하여 객체를 반환할 수 있습니다. 하지만…","fields":{"slug":"/Java/2022-03-15-이펙티브자바-13/"},"frontmatter":{"date":"2022년 03월 15일","title":"[Effective Java] Item13. clone 재정의는 주의해서 진행하라","tags":["Java","Effective Java","clone"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. java의 Object들에 재정의를 하는 equals의 경우 잘못 사용하면 끔찍한 결과를 초래할 수 있습니다.\n그래서 equals는 객체의 논리적 동치성을 확인해야할 때 빼고 불필요한 경우에는 재정의를 하지 않는 것이 더 좋습니다. equals를…","fields":{"slug":"/Java/2022-03-14-이펙티브자바-10/"},"frontmatter":{"date":"2022년 03월 14일","title":"[Effective Java] Item10. equals는 일반 규약을 지켜 재정의하라","tags":["Java","Effective Java","equals & hashCode"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 서론 Ojbect 명세서에는 다음과 같은 규약이 있다. eauals 비교에 사용되는 정보가 변경되지 않느다면,\n애플리케이션이 실행되는 동안 그 객체의 hashCode 메서드는 몇 번을 호출해도 일관되게 항상 같은 값을 반환해야 한다.\n단, 애플리…","fields":{"slug":"/Java/2022-03-14-이펙티브자바-11/"},"frontmatter":{"date":"2022년 03월 14일","title":"[Effective Java] Item11. equals를 재정의하려거든 hashCode도 재정의하라","tags":["Java","Effective Java","equals & hashCode"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. toString 메서드 Object의 기본 toString메서드는 기본적으로 클래스 이름@16진수로 표현한 해시코드를 반환합니다. 실제로 Object.java파일의 toString메서드를 보면 다음과 같습니다. 위의 메서드를 보면 처음 말한바와 …","fields":{"slug":"/Java/2022-03-14-이펙티브자바-12-toString재정의/"},"frontmatter":{"date":"2022년 03월 14일","title":"[Effective Java] Item12. toString을 항상 재정의하라","tags":["Java","Effective Java","toString"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. try-finally와 try-with-resources의 차이 InputStream, OutPutStream, java.sql.Connection과 같은 자원들은 사용 후에 close()메서드를 통해 닫아줘야 합니다.\n이는 실제로 클라이언트가 …","fields":{"slug":"/Java/2022-03-12-이펙티브자바-9/"},"frontmatter":{"date":"2022년 03월 12일","title":"[Effective Java] Item9. try-finally보다는 try-with-resources를 사용하라","tags":["Java","Effective Java","try-finally","자원 회수"]}}},{"node":{"excerpt":"Interface 인터페이스는 클래스나 프로그램이 제공하는 기능을 명시적으로 선언하여주는 클래스나 프로그램이 제공하는 명세이다. 인터페이스를 사용하면 클라이언트 프로그램들은 인터페이스에 선언된 메서드 명세만을 보고 이를 구현한 클래스를 사용할 수 있어서 편리하다. 어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메서드를 구현했…","fields":{"slug":"/Java/2022-03-12-자바의-인터페이스/"},"frontmatter":{"date":"2022년 03월 12일","title":"자바의 인터페이스","tags":["Java","Interface"]}}},{"node":{"excerpt":"자바의 상속 상속 기능을 사용하면 이미 구현되어있는 class를 이용하여 속성이나 기능들을 확장하여 새로운 class를 만들 수 있다.\n이를 이용해 A,B 클래스에 중복된 코드가 있을 경우 중복된 코드를 갖는 부모 클래스 C를 생성하고 상속을 시켜 코드의 중복을 줄일 수 있다. 상속은 일반적으로 기존 클래스보다 더 구체적이고 새로운 기능을 가진 클래스를 …","fields":{"slug":"/Java/2022-03-11-자바-상속/"},"frontmatter":{"date":"2022년 03월 11일","title":"자바의 상속","tags":["Java","상속"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 똑같은 기능의 객체를 매번 생성하기보다 하나의 객체를 재사용하는 것이 나을 떄가 많다. 1. new String()은 사용하지 말아라 String 파헤치기 에서 학습을 했듯이\nString string1 = new String(\"abc\");와 같이…","fields":{"slug":"/Java/2022-03-04-이펙티브자바-6/"},"frontmatter":{"date":"2022년 03월 04일","title":"[Effective Java] Item6. 불필요한 객체 생성을 피하라","tags":["Java","Effective Java"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 자바에서는 사용하지 않는 객체의 경우 GC(Garbage Collection)에서 알아서 회수를 해주며 메모리 관리를 해줍니다.\n하지만 GC가 메모리 관리를 해준다고해서 우리가 완전히 신경을 쓰지 않아도 되는건 아닙니다.\n가비지 컬렉션에서는 특정…","fields":{"slug":"/Java/2022-03-04-이펙티브자바-7/"},"frontmatter":{"date":"2022년 03월 04일","title":"[Effective Java] Item7. 다 쓴 객체 참조를 해체하라","tags":["Java","Effective Java"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 정적 유틸리티와 싱글턴의 단점 대부분의 많은 클래스들은 하나의 자원에 의존합니다. 위의 두 코드는 사전을 정적 유틸리티와 싱글턴을 통해 구현한 각각의 코드입니다. 작은 단위의 작업을 하는 유틸리티 클래스 또는 싱글턴 객체일 경우\n위와 같은 코드는…","fields":{"slug":"/Java/2022-03-03-이펙티브자바-5/"},"frontmatter":{"date":"2022년 03월 03일","title":"[Effective Java] Item5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라.","tags":["Java","Effective Java","의존 객체 주입 패턴","팩터리 메서드 패턴"]}}},{"node":{"excerpt":"동일성과 동등성 동일성과 동등성은 아무생각 없이 모르고 들었을 때는 같은 말, 다른 표현이라 생각하실 수 있습니다.\n하지만 프로그래밍 내에서 동일성과 동등성은 엄연하게 다른 의미를 갖고 있습니다. 일단 프로그래밍적으로 결론부터 말하면 동일하다는 == 이고 동등하다는 equals()입니다. 그럼 지금부터 각각의 차이점에 대해 알아보도록 하겠습니다. 일반적으…","fields":{"slug":"/Java/2022-03-02-동등성과-동일성/"},"frontmatter":{"date":"2022년 03월 02일","title":"동등성과 동일성","tags":["Java","동일성","동등성"]}}},{"node":{"excerpt":"Utils의 이해 우아한테크코스의 로또 미션을 진행하던중 다음과 같은 피드백을 받았습니다.  정리를 해보면 utils에는 비즈니스 로직과 직접적인 관계가 없고 범용적으로 사용할 수 있는 도구들이 있어야한다.는 피드백입니다.\n하지만 제가 utils 디렉터리에 작성한 InputValidation.java 파일에서는 어떤 작업들을 하였을까요? 해당 파일에 위치…","fields":{"slug":"/Java/2022-03-02-제너릭-인터페이스를-활용한-예외처리/"},"frontmatter":{"date":"2022년 03월 02일","title":"utils의 이해 & 제너릭 인터페이스를 활용한 예외처리","tags":["Java"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 싱글턴은 하나의 프로그램 내에 하나의 인스턴스만을 가질 수 있도록 하는 전략 패턴입니다. 자세한 내용은 싱글턴 패턴이란? 을 통해 확인하실 수 있습니다 싱글턴을 사용하는 대표적인 예로는 stateless 객체나 설계적으로 프로그램 내에 하나만 존…","fields":{"slug":"/Java/2022-02-28-이펙티브자바-3-싱글턴임을-보증하라/"},"frontmatter":{"date":"2022년 02월 28일","title":"[Effective Java] Item3. private 생성자나 열거 타입으로 싱글턴임을 보증하라","tags":["Java","Effective Java","Singleton"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 객체 지향적인 사고로 보이지 않지만, 개발을 할 때 가끔씩 정적 메서드와 정적 필드만을 담은 클래스를 생성하고 싶을 때가 존재합니다. 사용될 예시를 보면 다음과 같습니다. java.lang.Math, java.util.Arrays와 같이 기본 타…","fields":{"slug":"/Java/2022-02-28-이펙티브자바-4/"},"frontmatter":{"date":"2022년 02월 28일","title":"[Effective Java] Item4. 인스턴스화를 막으려거든 private 생성자를 사용하라","tags":["Java","Effective Java","Instance 관리","private"]}}},{"node":{"excerpt":"제너릭이란? 제너릭이란 무엇일까요?? 제너릭이 무엇인지 몰라도 자바 프로그래밍을 하며 <T>, <E>와 같은 문자들을 접해봤을 것입니다.\n딱 봐도 어려워보이는 이것, 이러한 것들을 우리는 제너릭이라고 합니다. 그럼 제너릭에 대해 알아보도록 하겠습니다. 제너릭은 하나의 값이 여러 자료형으로 쓰일 수 있도록 하는 방법을 의미합니다.\n대표적인 예시를 들어보면 …","fields":{"slug":"/Java/2022-02-28-제너릭이란/"},"frontmatter":{"date":"2022년 02월 28일","title":"제너릭(Generic)이란?","tags":["Java","Generic"]}}},{"node":{"excerpt":"우테코 과정을 시작하고 2번째 미션인 로또 미션을 진행하며 로또 우승 상금으로 큰 단위의 숫자를 입력해야하는 상황을 마주했습니다. 우승 금액이 1등의 경우 20억을 받는 것으로 설정하는 만큼 숫자의 단위가 엄청 크고, 숫자를 입력하면서도, 읽으면서도\n매우 불편합니다..🥲 저 또한 미션을 진행하면서도 숫자를 올바르게 입력한 것이 맞는지 확인하면서 눈이 빠지…","fields":{"slug":"/Java/2022-02-28-큰-숫자의-언더스코어/"},"frontmatter":{"date":"2022년 02월 28일","title":"자바에서 큰 숫자를 가독성 좋게 하는 방법","tags":["Java"]}}},{"node":{"excerpt":"우테코를 진행하며 final의 중요성에 대해 많은 언급을 받았습니다. 저는 final은 불변하게 만들어주는 키워드이다!!로만 이해를 하고 사용을 하고 있었습니다. 그러던중 과연 final은 언제 붙여주는 것이 좋을까??\n라는 의문이 들었고, 이에 대해 학습을 하고 정리를 해보고자 합니다. final은 무엇인가? In the Java programming …","fields":{"slug":"/Java/2022-02-27-자바의-Final/"},"frontmatter":{"date":"2022년 02월 27일","title":"자바의 final","tags":["Java","final"]}}},{"node":{"excerpt":"본 게시글은 우테코 강의를 참조하여 작성되었습니다. String class String 선언의 차이 위의 코드는 String class를 만드는 두가지 방법을 나타낸다. 두가지 방법은 보기에는 같은 결과가 나온다고 생각할 수 있지만 내부적으로는 다른 결과를 냅니다.\nstring1과 string2는 스트링 풀(String pool)에 있는 같은 객체를 바라…","fields":{"slug":"/Java/2022-02-25-String-내부-파헤치기/"},"frontmatter":{"date":"2022년 02월 25일","title":"String 파헤치기","tags":["Java","String"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 이번 주제는 매개변수가 많은 클래스에서 적용할 수 있는 여러 패턴과 각각의 장단점, 추천하는 방법 등을 설명한 챕터입니다.\n그럼 지금부터 하나씩 알아보겠습니다. 포스트에서 사용하는 예시는 환자 건강정보라는 새로운 예시를 만들어 하나씩 작성해봤습니…","fields":{"slug":"/Java/2022-02-23-이펙티브자바-2-생성자에-매개변수가-많다면-빌더를-고려하라/"},"frontmatter":{"date":"2022년 02월 23일","title":"[Effective Java] Item2. 생성자에 매개변수가 많다면 빌더를 고려하라","tags":["Java","Effective Java","점증적 생성자 패턴","자바빈즈 패턴","빌더 패턴"]}}},{"node":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 일반적으로 클래스의 인스턴스를 만들 떄 public 생성자를 통해 만들 것입니다.\n하지만 생성자를 통한 인스턴스 생성하는 방법이 존재합니다. 그것이 바로 오늘 다룰 주제인 정적 팩터리 메서드(static factory method) 입니다. 정적…","fields":{"slug":"/Java/2022-02-22-이펙티브자바-1-생성자대신-정적펙토리-메서드/"},"frontmatter":{"date":"2022년 02월 22일","title":"[Effective Java] Item1. 생성자 대신 정적 팩터리 메서드를 고려하라","tags":["Java","Effective Java","static factory method","정적 팩터리 메서드"]}}},{"node":{"excerpt":"우테코 프리코스 3주차 과제의 요구사항 중 아래의 enum코드를 사용하라는 조건을 접하게 되었습니다. 기존까지는 enum을 사용을 크게 하지 않고 간단하게 보기 항목을 정의할 때만 사용을 하여 조건으로 주어진 코드는 새롭기도 하고 이해하기도 어려웠습니다. 코드를 한참 찾아보고 다른 지원자의 코드를 봐도 처음에 이해가 어려웠어서 enum을 이번 기회에 새롭…","fields":{"slug":"/Java/2021-12-13-Enum이란/"},"frontmatter":{"date":"2021년 12월 13일","title":"Enum이란?","tags":["Java","Enum"]}}},{"node":{"excerpt":"일급 컬렉션(First Class Collection)이란? 일급 컬렉션을 간단하게 설명하면 Collection을 Wrapping하면서 그 외의 다른 멤버 변수가 없는 상태를 일급 컬렉션이라고 합니다. 예시를 들면 다음과 같습니다. 다음과 같은 collection을 아래와 같이 wrapping하는 것이 일급 컬렉션입니다. 일급 컬렉션은 소트윅스 앤솔로지의…","fields":{"slug":"/Java/2021-12-10-일급_컬렉션이란/"},"frontmatter":{"date":"2021년 12월 10일","title":"일급 컬렉션이란?","tags":["Java","일급컬렉션"]}}},{"node":{"excerpt":"Unit Test란? Unit test는 프로그래밍을 할 때 소스코드의 특정 모듈(메서드)이 의도된 대로 정확히 작동하는지 검증하는 절차입니다. 다시 말해 작성한 모든 메서드들에 대해서 테스트케이스를 작성하는 것을 의미합니다. Unit Test의 장점 Unit Test를 진행하게 된다면 하나의 기능을 독립적으로 테스트를 하며 코드 변경으로 인해 문제가 발…","fields":{"slug":"/Java/2022-02-18-Unit-Test란/"},"frontmatter":{"date":"2021년 12월 03일","title":"JUnit5로 단위 테스트하기","tags":["Java","Test","Junit5"]}}},{"node":{"excerpt":"들어가기 전 취업 준비를 하며 우아한형제들의 프로그래밍 교육 프로그램인 우테코에 대해 알게 되어 지원하게 되었습니다.\n서류와 1차 코딩테스트 결과 운이 좋게 우테코 프리코스를 수강할 기회가 생겨 오늘부터 미션을 수행하게 되었습니다. 프리코스는 매주 주어진 미션을 수행하며 주도적으로 프로그래밍 학습하며 성장을 하는 과정입니다. 프리코스를 참여하며 Googl…","fields":{"slug":"/Java/2021-11-25-Google_Java_Style_Guide/"},"frontmatter":{"date":"2021년 11월 25일","title":"Google Java Style Guide","tags":["Java","Google Java Style Guide"]}}}]}},"pageContext":{"categoryRegex":"/^(/home/runner/work/Seongwon97.github.io/Seongwon97.github.io/content/posts/)(Java/)([^/]*.md$)/"}},"staticQueryHashes":["1900723382","3911196313","4111100897"]}