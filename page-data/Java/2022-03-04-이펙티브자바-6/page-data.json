{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/2022-03-04-이펙티브자바-6/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 똑같은 기능의 객체를 매번 생성하기보다 하나의 객체를 재사용하는 것이 나을 떄가 많다. 1. new String()은 사용하지 말아라 String 파헤치기 에서 학습을 했듯이\nString string1 = new String(\"abc\");와 같이…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<p>똑같은 기능의 객체를 매번 생성하기보다 하나의 객체를 재사용하는 것이 나을 떄가 많다.</p>\n<h1 id=\"1-new-string은-사용하지-말아라\" style=\"position:relative;\"><a href=\"#1-new-string%EC%9D%80-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%90%EC%95%84%EB%9D%BC\" aria-label=\"1 new string은 사용하지 말아라 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. new String()은 사용하지 말아라</h1>\n<p><a href=\"https://seongwon97.github.io/posts/String-%EB%82%B4%EB%B6%80-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0/\">String 파헤치기</a> 에서 학습을 했듯이\n<code>String string1 = new String(\"abc\");</code>와 같이 생성자를 통해 string1을 만들 경우 코드가 실행될 때마다 새로운 인스턴스가 생성됩니다.\n반면 <code>String string2 = \"abc\";</code>와 같은 코드는 반복된다면 스트링 풀에 위치한 하나의 주소를 공유하는 식으로 진행이 됩니다.</p>\n<h1 id=\"2-정적-팩터리-메서드를-통해-인스턴스를-재사용할-수-있다\" style=\"position:relative;\"><a href=\"#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%9E%AC%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"2 정적 팩터리 메서드를 통해 인스턴스를 재사용할 수 있다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 정적 팩터리 메서드를 통해 인스턴스를 재사용할 수 있다.</h1>\n<p>정적 팩터리 메서드에서도 <a href=\"https://seongwon97.github.io/posts/%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-1-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8C%80%EC%8B%A0-%EC%A0%95%EC%A0%81%ED%8E%99%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C/\">Effective Java 1. 생성자 대신 정적 팩터리 메서드를 고려하라</a>\n에서 호출될 때 인스턴스를 새로 생성하지 않아도 됩니다.\n또한 불변이 아닌 가변 객체라도 사용중에 변경되지 않는다면 재사용이 가능합니다.</p>\n<h1 id=\"3-생성-비용이-비싼-객체는-캐싱을-하여-재사용을-하라\" style=\"position:relative;\"><a href=\"#3-%EC%83%9D%EC%84%B1-%EB%B9%84%EC%9A%A9%EC%9D%B4-%EB%B9%84%EC%8B%BC-%EA%B0%9D%EC%B2%B4%EB%8A%94-%EC%BA%90%EC%8B%B1%EC%9D%84-%ED%95%98%EC%97%AC-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%9D%84-%ED%95%98%EB%9D%BC\" aria-label=\"3 생성 비용이 비싼 객체는 캐싱을 하여 재사용을 하라 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 생성 비용이 비싼 객체는 캐싱을 하여 재사용을 하라.</h1>\n<p><code>String.matches</code>에 사용되는 <code>Pattern</code>는 인스턴스 생성비용이 큽니다. 이러한 클래스의 경우\n반복되어 사용할 때 한번 쓰고 버리기보다는 정적 초기화(static final)를 통한 재사용을 하여야 한다.\n재사을 할 경우 프로그램의 속도도 개선될 것입니다.</p>\n<blockquote>\n<p>📌 해당 클래스가 한번도 호출하지 않을 경우를 대비해 지연 초기화(Lazy initialization)을 할 수도 있지만 지연초기화는\n코드를 복잡하게 만들지만 성능은 크게 개선하지 못하는 경우가 많아 추천하지 않는다</p>\n</blockquote>\n<h1 id=\"4-어댑터는-뒷단-객체-하나당-하나씩-만드는거로-충분하다\" style=\"position:relative;\"><a href=\"#4-%EC%96%B4%EB%8C%91%ED%84%B0%EB%8A%94-%EB%92%B7%EB%8B%A8-%EA%B0%9D%EC%B2%B4-%ED%95%98%EB%82%98%EB%8B%B9-%ED%95%98%EB%82%98%EC%94%A9-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B1%B0%EB%A1%9C-%EC%B6%A9%EB%B6%84%ED%95%98%EB%8B%A4\" aria-label=\"4 어댑터는 뒷단 객체 하나당 하나씩 만드는거로 충분하다 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 어댑터는 뒷단 객체 하나당 하나씩 만드는거로 충분하다.</h1>\n<p>어댑터 뷰의 경우 어댑터의 실제 작업은 뒷단에 위입하고 본인은 인터페이스 역할을 합니다.\n이러한 경우 어댑터는 뒷단 객체 외에는 관리할 상태가 없으므로 뒷단 객체 하나당 어댑터 하나씩 만들면 충분하다.</p>\n<h1 id=\"5-wrapper-class보다는-primitive-type을-사용하자\" style=\"position:relative;\"><a href=\"#5-wrapper-class%EB%B3%B4%EB%8B%A4%EB%8A%94-primitive-type%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"5 wrapper class보다는 primitive type을 사용하자 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. wrapper class보다는 primitive type을 사용하자</h1>\n<p>primitive type과 wrapper class를 섞어서 사용할 때는 오토 박싱(auto boxing)을 통해 자동으로 둘 사이의 변환이 이루어집니다.\n하지만 <strong>오토박싱이 기본타입과 그에 대응하는 박싱된 기본 타입의 구분을 흐려주지만, 완전히 없애주는 것은 아닙니다.\n그리하여 wrapper class보다는 primitive type을 사용하고, 의도치 않은 오토박싱이 숨어들지 않도록 주의해야합니다.</strong></p>\n<h1 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h1>\n<p>생성하는데 비용이 많이드는 무거운 객체의 경우 인스턴스의 재사용을 하는 것이 좋습니다.\n하지만 그 외에는 불필요한 객체를 생성하고 회수하는 일은 JVM이 크게 부담을 갖지 않아 무리해서 인스턴스의 재사용을 할 필요는 없습니다.\n오히려 프로그래밍의 명확성, 간결성, 기능을 위해서 객체를 추가로 생성하는 일이라면 일반적으로 좋은 일이기 때문입니다.</p>\n<p>단순히 객체 생성을 피하고자 객체 풀(Pool)을 만드는 것도 좋지 않습니다. DB연결의 경우 생성비용이 비싸 객체 풀을 통해\n재사용을 하는 것이 좋지만 일반적으로 객체 풀은 코드를 헷갈리게 만들고 메모리 사용량을 늘리고 성능을 떨어뜨립니다.</p>\n<p>그리고 요즘 GC(Garbage Collection)는 최적화가 잘 되어 가벼운 객체를 생성하는게 직접 만든 객체풀보다 훨씬 빠릅니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/2022-03-04-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-6/#1-new-string%EC%9D%80-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%90%EC%95%84%EB%9D%BC\">1. new String()은 사용하지 말아라</a></li>\n<li><a href=\"/Java/2022-03-04-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-6/#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%9E%AC%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\">2. 정적 팩터리 메서드를 통해 인스턴스를 재사용할 수 있다.</a></li>\n<li><a href=\"/Java/2022-03-04-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-6/#3-%EC%83%9D%EC%84%B1-%EB%B9%84%EC%9A%A9%EC%9D%B4-%EB%B9%84%EC%8B%BC-%EA%B0%9D%EC%B2%B4%EB%8A%94-%EC%BA%90%EC%8B%B1%EC%9D%84-%ED%95%98%EC%97%AC-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%9D%84-%ED%95%98%EB%9D%BC\">3. 생성 비용이 비싼 객체는 캐싱을 하여 재사용을 하라.</a></li>\n<li><a href=\"/Java/2022-03-04-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-6/#4-%EC%96%B4%EB%8C%91%ED%84%B0%EB%8A%94-%EB%92%B7%EB%8B%A8-%EA%B0%9D%EC%B2%B4-%ED%95%98%EB%82%98%EB%8B%B9-%ED%95%98%EB%82%98%EC%94%A9-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B1%B0%EB%A1%9C-%EC%B6%A9%EB%B6%84%ED%95%98%EB%8B%A4\">4. 어댑터는 뒷단 객체 하나당 하나씩 만드는거로 충분하다.</a></li>\n<li><a href=\"/Java/2022-03-04-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-6/#5-wrapper-class%EB%B3%B4%EB%8B%A4%EB%8A%94-primitive-type%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\">5. wrapper class보다는 primitive type을 사용하자</a></li>\n<li><a href=\"/Java/2022-03-04-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-6/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 04일","title":"[Effective Java] Item6. 불필요한 객체 생성을 피하라","tags":["Java","Effective Java"]}}},"pageContext":{"slug":"/Java/2022-03-04-이펙티브자바-6/","previous":{"fields":{"slug":"/Java/2022-03-04-이펙티브자바-7/"},"frontmatter":{"title":"[Effective Java] Item7. 다 쓴 객체 참조를 해체하라"}},"next":{"fields":{"slug":"/Git/2022-03-05-Git-Branch전략/"},"frontmatter":{"title":"Git Branch 전략"}}}},"staticQueryHashes":["3911196313","4111100897"]}