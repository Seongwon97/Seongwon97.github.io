{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220228-이펙티브자바-3-싱글턴임을-보증하라/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 싱글턴은 하나의 프로그램 내에 하나의 인스턴스만을 가질 수 있도록 하는 전략 패턴입니다. 자세한 내용은 싱글턴 패턴이란? 을 통해 확인하실 수 있습니다 싱글턴을 사용하는 대표적인 예로는 stateless 객체나 설계적으로 프로그램 내에 하나만 존…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<p>싱글턴은 하나의 프로그램 내에 하나의 인스턴스만을 가질 수 있도록 하는 전략 패턴입니다.</p>\n<blockquote>\n<p>자세한 내용은 <a href=\"https://seongwon97.github.io/posts/%EC%8B%B1%EA%B8%80%ED%84%B4-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80/\">싱글턴 패턴이란?</a> 을 통해 확인하실 수 있습니다</p>\n</blockquote>\n<p>싱글턴을 사용하는 대표적인 예로는 stateless 객체나 설계적으로 프로그램 내에 하나만 존재해야하는 시스템 컴포넌트 들이 있습니다.\n하지만 이러한 싱글턴 패턴은 해당 인스턴스를 사용하는 클라이언트를 테스트하기 어려워질 수 있다는 단점이 존재합니다.</p>\n<blockquote>\n<p>싱글턴의 경우 interface를 통해 구현하여 만든 것이 아니라면 싱글턴 인스턴스를 mock 구현으로 대체할 수 없기 때문입니다.</p>\n</blockquote>\n<h1 id=\"싱글턴-패턴을-만드는-방식\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%84%B4-%ED%8C%A8%ED%84%B4%EC%9D%84-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"싱글턴 패턴을 만드는 방식 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글턴 패턴을 만드는 방식</h1>\n<h2 id=\"1-public-static-final-필드-방식의-싱글턴\" style=\"position:relative;\"><a href=\"#1-public-static-final-%ED%95%84%EB%93%9C-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%8B%B1%EA%B8%80%ED%84%B4\" aria-label=\"1 public static final 필드 방식의 싱글턴 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. public static final 필드 방식의 싱글턴</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk4\"> INSTANCE </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">Singleton</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> Singleton</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>다음 방법은 생성자를 <code>private</code> 접근 제어자로 설정하고, 유일한 인스턴스에 접근할 수 있는 수단으로 <code>public static</code>으로 설정한 <code>INSTANCE</code>멤버 변수를 생성해둬야합니다.\n<code>private</code>으로 설정된 생성자는 INSTANCE를 처음 초기화할 때만 한번 호출하며 프로그램 내에 인스턴스가 하나만 존재하도록 하는 방법입니다.</p>\n<p>해당 방법의 장점은 해당 클래스가 싱글턴임을 API에서 명백하게 드러낼 수 있고 간결하다는 점이 있습니다.</p>\n<h2 id=\"2-정적-팩터리-방식의-싱글턴\" style=\"position:relative;\"><a href=\"#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%8B%B1%EA%B8%80%ED%84%B4\" aria-label=\"2 정적 팩터리 방식의 싱글턴 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 정적 팩터리 방식의 싱글턴</h2>\n<p>해당 방법은 생성자를 <code>private</code> 접근 제어자로 설정하고, 유일한 인스턴스에 접근할 수 있는 수단으로 <code>private static</code>으로 설정한 <code>INSTANCE</code>멤버 변수를 생성해둬야합니다.\n1번 방식과 다른점이라면 INSTANCE 멤버 변수의 접근제어자가 <code>public</code>이 아닌 <code>private</code>이라는 점입니다.</p>\n<p>그러면 해당 INSTANCE에는 어떻게 접근을 할까요??\n해당 방법에서는 정적 팩터리 메서드를 생성하여 해당 메서드를 통해 접근을 합니다.</p>\n<p>예시 코드는 다음과 같습니다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk4\"> INSTANCE </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">Singleton</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> Singleton</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk9\">final</span><span class=\"mtk3\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk3\"> getInstance</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{ </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> INSTANCE; }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><code>getInstance()</code>메서드를 통해 사용자들은 INSTANCE에 접근을 할 수 있으며 만들어진 인스턴스를 가져오는 식으로 운영되기에 새로운 인스턴스가 생성될 일이 없습니다.</p>\n<p>해당 방법의 장점은 개발을 하며 마음이 바뀔 경우 API를 바꾸지 않고도 싱글턴이 아니게 변경을 할 수 있으며, 원한다면 정적 팩터리 메서드를 제너릭 싱글턴 팩터리로 만들 수 있다는 점이 있습니다.\n또한 정적 팩터리 메서드를 공급자(Supplier)로 활용할 수 있다는 점이 있습니다.</p>\n<blockquote>\n<p>만약 해당 장점들이 필요하지 않다면 1번(public필드)방식이 좋습니다.</p>\n</blockquote>\n<h3 id=\"1-2번-방식의-주의할-점\" style=\"position:relative;\"><a href=\"#1-2%EB%B2%88-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"1 2번 방식의 주의할 점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1, 2번 방식의 주의할 점</h3>\n<ul>\n<li>두 방법 모두 권한이 있는 클라이언트가 리플렉션 API인 <code>AccessibleObject.setAccessible</code>을 통해 private 생성자를 호출하게 된다면 두개 이상의 인스턴스가 생성될 수 있는데\n이러한 문제는 생성자 내에서 두번째 객체를 생성하려고 할 때 exception을 발생시키도록 설정함으로써 예방할 수 있습니다.</li>\n<li>\n<p>1, 2번 방식으로 싱글턴 클래스를 직렬화 하려면 단순히 <code>Serializable</code>을 구현한다고 선언하는 것 뿐만 아니랏 새로운 작업이 필요합니다.</p>\n<ul>\n<li>모든 인스턴스 필드를 <code>transient</code>(일시적)이라고 선언을 하고 <code>readResolve</code>메서드를 통해 인스턴스를 반환해야합니다. (그렇지 않을 경우 새로운 인스턴스가 생성됩니다.)</li>\n<li>예시코드는 아래와 같습니다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk4\"> </span><span class=\"mtk9\">implements</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Serializable</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk4\"> INSTANCE </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">Singleton</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> Singleton</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk3\"> readResolve</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk5 mtki\">// 진짜 Singleton 인스턴스를 반환 후 가짜 인스턴스는 가비지 컬렉터로~</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> INSTANCE;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<blockquote>\n<p><code>transient</code>란? <br>\ntransient는 Serialize하는 과정에 제외하고 싶은 경우 선언하는 키워드입니다.</p>\n</blockquote>\n<h2 id=\"3-열거타입enum타입의-싱글턴\" style=\"position:relative;\"><a href=\"#3-%EC%97%B4%EA%B1%B0%ED%83%80%EC%9E%85enum%ED%83%80%EC%9E%85%EC%9D%98-%EC%8B%B1%EA%B8%80%ED%84%B4\" aria-label=\"3 열거타입enum타입의 싱글턴 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 열거타입(Enum)타입의 싱글턴</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">enum</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Singleton</span><span class=\"mtk4\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk7\">INSTANCE</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> method</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<p>해당 방법은 1번 public 필드 방식과 유사하지만 더 간결하고, 추가적인 노력 없이 직렬화를 할 수 있습니다.\n또한 아주 복잡한 직렬화 상황이나 리플렉션 공격에도 다른 인스턴스가 생성되는 것을 완벽하게 막아줍니다.</p>\n<p><strong>열거타입의 싱글턴은 원소가 하나뿐이라 부자연스러워 보일 수 있지만 대부분의 상황에서는 가장 좋은 방법입니다.</strong>\n단, 만들고자하는 싱글턴이 Enum이외의 클래스를 상속해야한다면 해당 방법은 사용할 수 없습니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Java/20220228-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-3-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC/#%EC%8B%B1%EA%B8%80%ED%84%B4-%ED%8C%A8%ED%84%B4%EC%9D%84-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EC%8B%9D\">싱글턴 패턴을 만드는 방식</a></p>\n<ul>\n<li><a href=\"/Java/20220228-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-3-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC/#1-public-static-final-%ED%95%84%EB%93%9C-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%8B%B1%EA%B8%80%ED%84%B4\">1. public static final 필드 방식의 싱글턴</a></li>\n<li>\n<p><a href=\"/Java/20220228-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-3-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC/#2-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%8B%B1%EA%B8%80%ED%84%B4\">2. 정적 팩터리 방식의 싱글턴</a></p>\n<ul>\n<li><a href=\"/Java/20220228-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-3-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC/#1-2%EB%B2%88-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\">1, 2번 방식의 주의할 점</a></li>\n</ul>\n</li>\n<li><a href=\"/Java/20220228-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-3-%EC%8B%B1%EA%B8%80%ED%84%B4%EC%9E%84%EC%9D%84-%EB%B3%B4%EC%A6%9D%ED%95%98%EB%9D%BC/#3-%EC%97%B4%EA%B1%B0%ED%83%80%EC%9E%85enum%ED%83%80%EC%9E%85%EC%9D%98-%EC%8B%B1%EA%B8%80%ED%84%B4\">3. 열거타입(Enum)타입의 싱글턴</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"2022년 02월 28일","title":"[Effective Java] Item3. private 생성자나 열거 타입으로 싱글턴임을 보증하라","tags":["Java","Effective Java","Singleton"]}}},"pageContext":{"slug":"/Java/20220228-이펙티브자바-3-싱글턴임을-보증하라/","previous":{"fields":{"slug":"/Java/20220228-이펙티브자바-4/"},"frontmatter":{"title":"[Effective Java] Item4. 인스턴스화를 막으려거든 private 생성자를 사용하라"}},"next":{"fields":{"slug":"/Java/20220302-동등성과-동일성/"},"frontmatter":{"title":"동등성과 동일성"}}}},"staticQueryHashes":["3911196313","4111100897"]}