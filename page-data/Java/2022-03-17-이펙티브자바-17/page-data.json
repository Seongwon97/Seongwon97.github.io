{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/2022-03-17-이펙티브자바-17/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 불변 클래스란? 인스턴스의 내부 값을 수정할 수 없는 클래스이다. 인스턴스에 있는 정보는 고정되어 객체가 파괴되는 순간까지 바뀌지 않는다. 자바에서 제공하는 불면 클래스는 String, Wrapper class, BigInteger, BigDec…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<h1 id=\"불변-클래스란\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%9E%80\" aria-label=\"불변 클래스란 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변 클래스란?</h1>\n<ul>\n<li>\n<p>인스턴스의 내부 값을 수정할 수 없는 클래스이다.</p>\n<ul>\n<li>인스턴스에 있는 정보는 고정되어 객체가 파괴되는 순간까지 바뀌지 않는다.</li>\n</ul>\n</li>\n<li>자바에서 제공하는 불면 클래스는 <code>String</code>, <code>Wrapper class</code>, <code>BigInteger</code>, <code>BigDecimal</code> 등이 있다.</li>\n</ul>\n<p>이러한 불변 클래슨느 가변 클래스보다 설계, 구현, 사용이 쉽고 오류가 생길 여지가 적어 훨씬 안전하다는 장점이 있다.</p>\n<h2 id=\"불변-클래스를-만드는-5가지-규칙\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-5%EA%B0%80%EC%A7%80-%EA%B7%9C%EC%B9%99\" aria-label=\"불변 클래스를 만드는 5가지 규칙 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변 클래스를 만드는 5가지 규칙</h2>\n<ol>\n<li>객체의 상태를 변경하는 메서드를 제공하지 않는다.</li>\n<li>\n<p>클래스를 확장할 수 없도록 한다.</p>\n<ul>\n<li>상속을 한 하위 클래스에서 발생할 수 있는 문제점을 막아준다.</li>\n<li>클래스를 <code>final</code>로 선언하는 방법이 대표적이다.</li>\n</ul>\n</li>\n<li>모든 필드를 <code>final</code>로 선언한다.</li>\n<li>\n<p>모든 필드를 <code>private</code>로 선언한다.</p>\n<ul>\n<li>필드가 참조하는 가변 객체를 클라이언트가 직접 접근하는 일을 막는다.</li>\n</ul>\n</li>\n<li>\n<p>자신 외에는 내부의 가변 컴포넌트에 접근할 수 없도록 한다.</p>\n<ul>\n<li>클래스에서 가변 객체를 참조하는 필드가 하나라도 있으면 클라이언트에서 해당 객체의 참조를 얻을 수 없도록 해야한다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"함수형-프로그래밍과-절차적명령형-프로그래밍\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EC%A0%88%EC%B0%A8%EC%A0%81%EB%AA%85%EB%A0%B9%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"함수형 프로그래밍과 절차적명령형 프로그래밍 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 프로그래밍과 절차적/명령형 프로그래밍</h2>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 함수형 프로그래밍 예시</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Complex</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk9\">double</span><span class=\"mtk4\"> re</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk9\">double</span><span class=\"mtk4\"> im</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> Complex</span><span class=\"mtk1\">(</span><span class=\"mtk9\">double</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">re</span><span class=\"mtk1\">, </span><span class=\"mtk9\">double</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">im</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk4\">re</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> re;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk4\">im</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> im;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk11\">Complex</span><span class=\"mtk3\"> plus</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Complex</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">c</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">Complex</span><span class=\"mtk1\">(re </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk11\">c</span><span class=\"mtk1\">.</span><span class=\"mtk4\">re</span><span class=\"mtk1\">, im </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk11\">c</span><span class=\"mtk1\">.</span><span class=\"mtk4\">im</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  </span><span class=\"mtk1\">....</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>\n<p>함수형 프로그래밍</p>\n<ul>\n<li>피연산자에 함수를 적용해 결과를 반환하지만, 피연산자 자체는 그대로인 프로그래밍이다.</li>\n<li>메서드 이름을 전차사를 사용한다. (ex. plus)</li>\n</ul>\n</li>\n<li>\n<p>절차적/명령형 프로그래밍</p>\n<ul>\n<li>함수형 프로그래밍과 다르게 메서드를 실행하면 자기 자신을 수정해 상태가 바뀌게 된다.</li>\n<li>메서드 이름을 동사를 사용한다. (ex. add)</li>\n</ul>\n</li>\n</ul>\n<p><strong>함수형 프로그래밍으로 프로그래밍하면 코드에서 불변이 되는 영역의 비율이 높아진다.</strong></p>\n<h1 id=\"불변-객체의-장단점\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"불변 객체의 장단점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변 객체의 장단점</h1>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>불변 객체는 스레드끼리 영향을 줄 수 없는 thread-safe하여 따로 동기화를 할 필요가 없다. 그래서 안심하고 공유를 할 수 있다.</li>\n<li>\n<p>불변 클래스는 인스턴스를 최대한 재활용하기를 권한다.</p>\n<ol>\n<li>상수 사용: 자주 쓰이는 값들을 <code>public static final</code>의 상수로 제공을 하여 재사용할 수 있다.</li>\n<li>정적 팩터리 제공: 자주 사용되는 인스턴스를 캐싱하여 같은 인스턴스를 중복 생성하지 않게 해주는 정적 팩터리 메서드를 제공할 수 있다.\n(정적 팩터리를 사용하면 클라이언트가 인스턴스를 공유해, 메모리 사용량과 가비지 컬랙션 비용이 줄어든다.)</li>\n</ol>\n</li>\n<li>불변 객체는 복사를 해도 원본과 똑같아 의미가 없어 <code>clone</code>메서드나 복사 생성자를 제공하지 않는 것이 좋다.</li>\n<li>불변 객체는 자유롭게 공유할 수 있고, 불변 객체끼리는 내부 데이터를 공유할 수 있다.</li>\n<li>\n<p>객체를 만들 때 다른 불변 객체들을 구성 요소로 사용하면 이점이 많다.</p>\n<ul>\n<li>구성 요소들이 바뀌지 않아 구조가 아무리 복잡하더라도 불변식을 유지하기 수월하다. (ex. Map의 Key로 사용)</li>\n</ul>\n</li>\n<li>\n<p>불변 객체는 그 자체로 실패 원자성을 제공한다.</p>\n<ul>\n<li>실패 원자성은 예외가 발생한 후에도 그 객체는 여전히 이전과 유요한 상태인 것을 의미한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li>\n<p>값이 다르면 반드시 독립된 객체로 만들어야 한다는 단점이 있다.</p>\n<ul>\n<li>값의 가지수가 많아지면 이들을 모두 만드는 데 큰 비용이 든다.</li>\n<li>클라이언트가 복잡한 연산들을 정확히 예측할 수 있으면 <code>package-private</code>의 가변 동반 클래스로 충분하며 그렇지 않을 경우 클래스를 <code>public</code>으로 제공하는 것이 좋다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"불변-객체의-설계-방법\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95\" aria-label=\"불변 객체의 설계 방법 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변 객체의 설계 방법</h1>\n<p>클래스가 불변이라 상속하지 못하게 하는 것을 보장하는 가장 쉬운 방법은 <code>final</code>을 선언하는 것이다.\n하지만 더 유연한 방법이 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Complex</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk9\">double</span><span class=\"mtk4\"> re</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk4\"> </span><span class=\"mtk9\">final</span><span class=\"mtk4\"> </span><span class=\"mtk9\">double</span><span class=\"mtk4\"> im</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">private</span><span class=\"mtk3\"> Complex</span><span class=\"mtk1\">(</span><span class=\"mtk9\">double</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">re</span><span class=\"mtk1\">, </span><span class=\"mtk9\">double</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">im</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk4\">re</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> re;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">this</span><span class=\"mtk1\">.</span><span class=\"mtk4\">im</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> im;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk9\">static</span><span class=\"mtk3\"> </span><span class=\"mtk11\">Complex</span><span class=\"mtk3\"> valueOf</span><span class=\"mtk1\">(</span><span class=\"mtk9\">double</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">re</span><span class=\"mtk1\">, </span><span class=\"mtk9\">double</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">im</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk9\">new</span><span class=\"mtk1\"> </span><span class=\"mtk3\">Complex</span><span class=\"mtk1\">(re, im);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">  </span><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>모든 생성자를 <code>private</code>혹은 <code>package-private</code>으로 만들고 <code>public 정적 팩터리</code>를 제공하는 방법이 있다.\n해당 방법은 다음과 같은 이점이 있다.</p>\n<ul>\n<li>밖에서 볼 수 없는 <code>package-private</code>클래스를 원하는 만큼 만듣어 활용할 수 있다.(유연)</li>\n<li>패키지 밖에서 봤을 때 해당 클래스는 <code>final</code>과 같다.</li>\n<li>정적 팩터리 방식이 다수의 구현 클래스를 활용한 유연성을 제공하고, 객체 캐싱 기능을 추가해 성능을 끌어올릴 수도 있다.</li>\n</ul>\n<h1 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h1>\n<ul>\n<li><code>getter</code>가 있다고 해서 무조건 <code>setter</code>를 만들지 말아야 한다.</li>\n<li>클래스는 꼭 필요한 경우가 아니라면 불변이어야 한다.</li>\n<li>\n<p>불변으로 만들 수 없는 클래스라도 변경할 수 있는 부분을 최소한으로 줄이는 것이 좋다.</p>\n<ul>\n<li>객체를 예측하기 쉬워지고 오류의 가능성도 줄일 수 있다.</li>\n</ul>\n</li>\n<li>합당한 이유가 없다면 모든 필드는 <code>private final</code>이어야 한다.</li>\n<li>\n<p>생성자는 불변식 설정이 모두 완료된, 초기화가 완벽히 끝난 상태의 객체를 생성해야한다.</p>\n<ul>\n<li>이유가 없다면, 생성자와 정적 팩터리 외에는 <code>public</code>을 가진 초기화 메서드를 제공하면 안된다.</li>\n<li>객체를 재활용할 목적으로 다시 초기화하는 메서드도 불가하다.</li>\n</ul>\n</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Java/2022-03-17-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-17/#%EB%B6%88%EB%B3%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%9E%80\">불변 클래스란?</a></p>\n<ul>\n<li><a href=\"/Java/2022-03-17-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-17/#%EB%B6%88%EB%B3%80-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-5%EA%B0%80%EC%A7%80-%EA%B7%9C%EC%B9%99\">불변 클래스를 만드는 5가지 규칙</a></li>\n<li><a href=\"/Java/2022-03-17-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-17/#%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EC%A0%88%EC%B0%A8%EC%A0%81%EB%AA%85%EB%A0%B9%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">함수형 프로그래밍과 절차적/명령형 프로그래밍</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/2022-03-17-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-17/#%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">불변 객체의 장단점</a></p>\n<ul>\n<li><a href=\"/Java/2022-03-17-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-17/#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"/Java/2022-03-17-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-17/#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li><a href=\"/Java/2022-03-17-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-17/#%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%84%A4%EA%B3%84-%EB%B0%A9%EB%B2%95\">불변 객체의 설계 방법</a></li>\n<li><a href=\"/Java/2022-03-17-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-17/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 17일","title":"[Effective Java] Item17. 변경 가능성을 최소화하라","tags":["Java","Effective Java"]}}},"pageContext":{"slug":"/Java/2022-03-17-이펙티브자바-17/","previous":{"fields":{"slug":"/Java/2022-03-16-이펙티브자바-14/"},"frontmatter":{"title":"[Effective Java] Item14. Comparable을 구현할지 고려하라"}},"next":{"fields":{"slug":"/Java/2022-03-17-이펙티브자바-16/"},"frontmatter":{"title":"[Effective Java] Item16. public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}