{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/2022-03-15-이펙티브자바-13/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 자바에서는 클래스를 복제해도 되는 것을 명시하는 용도인 Cloneable 인터페이스를 제공하고 있습니다.\nCloneable 인터페이스를 구현하여 clone()메서드를 재정의한다면 객체의 필드들을 하나씩 복사하여 객체를 반환할 수 있습니다. 하지만…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<p>자바에서는 클래스를 복제해도 되는 것을 명시하는 용도인 <code>Cloneable</code> 인터페이스를 제공하고 있습니다.\n<code>Cloneable</code> 인터페이스를 구현하여 <code>clone()</code>메서드를 재정의한다면 객체의 필드들을 하나씩 복사하여 객체를 반환할 수 있습니다.</p>\n<p>하지만 이러한 <code>clone</code>메서드는 <code>Cloneable</code>이 아닌 <code>Object</code>에 선언되어 있어 해당 객체가 <code>clone()</code>을 제공한다는 보장이 없다는 단점이 있습니다.</p>\n<h1 id=\"clone-메서드의-일반-규약\" style=\"position:relative;\"><a href=\"#clone-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD\" aria-label=\"clone 메서드의 일반 규약 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>clone() 메서드의 일반 규약</h1>\n<p>객체의 복사본을 만들어서 반환한다. 그리고 다음을 따른다.\n<code>x.clone() != x</code> 의 조건은 참이어야 한다,</p>\n<p><code>x.clone().getClass() == x.getClass()</code>\n위의 조건은 참이겠지만 반드시 그래야 하는 것은 아니다.</p>\n<p><code>x.clone().equals(x)</code>\n위의 코드를 실행한 결과도 true가 되겠지만 반드시 그래야하는것은 아니다.</p>\n<p>위의 코드를 실행한 결과도 true가 되겠지만 반드시 그래야 하는 것은 아니다.\n객체를 복사하면 보통 같은 클래스의 새로운 객체가 만들어지는데, 내부 자료 구조까지 복사해야 될 수도 있다. 어떤 생성자도 호출되지 않는다.</p>\n<h1 id=\"clone의-특징\" style=\"position:relative;\"><a href=\"#clone%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"clone의 특징 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>clone의 특징</h1>\n<ul>\n<li><code>clone</code>은 메서드가 <code>super.clone</code>이 아닌, 생성자를 호출해 얻은 인스턴스를 반환해도 컴파일러는 불평하지 않는 점에서 생성자 연쇄와 비슷하다.</li>\n<li><code>clone</code>을 재정의한 클래스가 <code>final</code>이면 걱정할 하위 클래스가 없습니다.\n만약 그렇지 않는다면 클래스의 하위 클래스에서 <code>super.clone</code>을 호출하면 잘못된 객체가 만들어져 하위 클래스의 <code>clone</code>이 잘 동작하지 않습니다.</li>\n<li><code>clone</code> 메서드는 원본 객체에 아무런 해를 끼치지 않는 동시에 복제된 객체의 불변식을 보장하는 생성자와 같은 효과를 낸다.</li>\n</ul>\n<h1 id=\"재정의-방법\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EC%A0%95%EC%9D%98-%EB%B0%A9%EB%B2%95\" aria-label=\"재정의 방법 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재정의 방법</h1>\n<h2 id=\"모든-필드가-기본-타임이거나-불변-객체를-참조하는-경우\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%A0-%ED%95%84%EB%93%9C%EA%B0%80-%EA%B8%B0%EB%B3%B8-%ED%83%80%EC%9E%84%EC%9D%B4%EA%B1%B0%EB%82%98-%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%B0%B8%EC%A1%B0%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"모든 필드가 기본 타임이거나 불변 객체를 참조하는 경우 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모든 필드가 기본 타임이거나 불변 객체를 참조하는 경우</h2>\n<ol>\n<li><code>super.clone</code>을 호출한다.</li>\n<li>모든 필드가 기본 타입이거나 불변 객체를 참조한다면 복사 완료</li>\n</ol>\n<h2 id=\"필드가-가변-타입일-경우-방법1\" style=\"position:relative;\"><a href=\"#%ED%95%84%EB%93%9C%EA%B0%80-%EA%B0%80%EB%B3%80-%ED%83%80%EC%9E%85%EC%9D%BC-%EA%B2%BD%EC%9A%B0-%EB%B0%A9%EB%B2%951\" aria-label=\"필드가 가변 타입일 경우 방법1 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필드가 가변 타입일 경우 방법1</h2>\n<ol>\n<li><code>super.clone</code>을 호출한다.</li>\n<li>\n<p>필드에 가변타입이 있다면 내부적으로 <code>clone</code>을 재귀적으로 호출하여 복사를 해줘야한다. (ex. 리스트)</p>\n<ol>\n<li>필드의 가변타입을 그대로 복사할 경우 문제가 생기는 경우도 존재한다.(링크드 리스트의 node) 그런 경우는 깊은 복사를 지원하도록 한다.\n이러한 방법은 재귀를 사용하면 리스트의 원소 수만큼 스택 프레임을 소비하여 스택 오버플로우를 일으킬 위험이 있어 반복자를 써서 순회하는 것이 좋다.</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"필드가-가변-타입일-경우-방법2\" style=\"position:relative;\"><a href=\"#%ED%95%84%EB%93%9C%EA%B0%80-%EA%B0%80%EB%B3%80-%ED%83%80%EC%9E%85%EC%9D%BC-%EA%B2%BD%EC%9A%B0-%EB%B0%A9%EB%B2%952\" aria-label=\"필드가 가변 타입일 경우 방법2 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필드가 가변 타입일 경우 방법2</h2>\n<ol>\n<li><code>super.clone</code>을 호출한다.</li>\n<li>객체의 모든 필드를 초기 상태로 설정한다.</li>\n<li>원본 객체의 상태를 다시 생성하는 고수준 메서드를 호출한다. (HashTable의 예로 보면, Table(map)을 초기화 한 후 put메서드를 통해 값 추가)</li>\n</ol>\n<p>이와 같이 고수준의 api를 활용하면 간단하고 이쁜 코드를 얻을 수 있지만 저수준에서 바로 처리를 할 떄보다는 느리다.\n또한 Cloneable의 기초가 되는 필드 단위의 복사를 하지 않아 Cloneable 아키텍쳐와는 어울리지 않는 방식이다.</p>\n<h1 id=\"clone-주의사항\" style=\"position:relative;\"><a href=\"#clone-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"clone 주의사항 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>clone 주의사항</h1>\n<ul>\n<li>\n<p><code>clone</code>에서도 생성자와 같이 재정의 될 수 있는 메서드를 호출하지 말아야한다.</p>\n<ul>\n<li>하위 클래스에서 재정의한 메서드를 호출하게 된다면 복사본의 상태가 달라질 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>Object의 <code>clone</code>메서드는 <code>CloneNotSupportedException</code>을 던지지만 <code>clone</code>을 재정의할 때는 <code>throws</code>절을 없애야 한다. (public일 경우)</p>\n<ul>\n<li>검사 예외를 던지지 않아야 그 메서드를 사용하기 편리하기 때문이다.</li>\n</ul>\n</li>\n<li>\n<p>상속용 클래스는 Cloneable을 구현해서는 안된다. 만약 사용한다면 아래와 같이 사용한다.</p>\n<ul>\n<li>제대로 작동하는 <code>clone()</code>을 구현해 <code>protected</code>로 두고 <code>CloneNotSupportedException</code>을 던질 수 있다고 선언하게 한다.</li>\n<li><code>clone</code>을 동작하지 않게 구현하고 하위 클래스에서 재정의하지 못하게 한다.</li>\n</ul>\n</li>\n<li>\n<p><code>Cloneable</code>을 구현한 스레드 안전 클래스를 작성할 때는 <code>clone</code>메서드 역시 적절히 동기화해줘야 한다.</p>\n<ul>\n<li>Object의 clone 메서드는 동기화에 신경을 쓰지 않아 <code>super.clone</code> 호출 외에 다른 할 일이 없더라도 <code>clone</code>을 재정의하고 동기화해줘야 한다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"반전\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EC%A0%84\" aria-label=\"반전 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반전</h1>\n<p><code>Cloneable</code>을 이미 구현한 클래스를 확장할 때는 어쩔 수 없지만 그렇지 않은 경우 <strong>복사 생성자</strong>와 <strong>복사 팩터리</strong>를 사용하는 것이 더 낫다.</p>\n<p>이들을 이용하면 클라이언트는 원본의 구현 타입에 얽매이지 않고 복제본의 타입을 직접 지킬 수 있으며 장점은 아래와 같다.</p>\n<ul>\n<li>언어 모순적이고 위험한 객체 생성 메커니즘을 사용하지 않는다</li>\n<li>모순적이고 엉성하게 문서화된 규약에 기대지 않는다.</li>\n<li>정상적인 final 필드 용법과도 충돌하지 않는다</li>\n<li>불필요한 검사 예외를 던지지 않는다</li>\n<li>형변환이 필요하지 않다.</li>\n<li>해당 클래스가 구현한 인터페이스 타입의 인스턴스를 인수로 받을 수 있다.</li>\n</ul>\n<h1 id=\"핵심-정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"핵심 정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 정리</h1>\n<p><code>Cloneable</code>이 몰고 온 모든 문제를 되짚어봤을 때, 새로운 인터페이스를 만들 때는 절대로 <code>Cloneable</code>을 확장해서는 안 되며,\n새로운 클래스도 이를 구현해서는 안 된다. <code>final</code> 클래스라면 <code>Cloneable</code>을 구현해도 위험이 크지 않지만, 성능 최적화 관점에서 검토한 후\n별다른 문제가 없을 때만 드물게 허용해야 한다. 기본 원칙은 \"복제 기능은 생성자와 팩터리를 이용하는 게 최고\"라는 것이다.\n단, 배욜만은 <code>clone</code> 메서드 방식이 가장 깔끔한, 이 규칙의 합당한 예외라 할 수 있다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#clone-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%9D%BC%EB%B0%98-%EA%B7%9C%EC%95%BD\">clone() 메서드의 일반 규약</a></li>\n<li><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#clone%EC%9D%98-%ED%8A%B9%EC%A7%95\">clone의 특징</a></li>\n<li>\n<p><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#%EC%9E%AC%EC%A0%95%EC%9D%98-%EB%B0%A9%EB%B2%95\">재정의 방법</a></p>\n<ul>\n<li><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#%EB%AA%A8%EB%93%A0-%ED%95%84%EB%93%9C%EA%B0%80-%EA%B8%B0%EB%B3%B8-%ED%83%80%EC%9E%84%EC%9D%B4%EA%B1%B0%EB%82%98-%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%B0%B8%EC%A1%B0%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">모든 필드가 기본 타임이거나 불변 객체를 참조하는 경우</a></li>\n<li><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#%ED%95%84%EB%93%9C%EA%B0%80-%EA%B0%80%EB%B3%80-%ED%83%80%EC%9E%85%EC%9D%BC-%EA%B2%BD%EC%9A%B0-%EB%B0%A9%EB%B2%951\">필드가 가변 타입일 경우 방법1</a></li>\n<li><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#%ED%95%84%EB%93%9C%EA%B0%80-%EA%B0%80%EB%B3%80-%ED%83%80%EC%9E%85%EC%9D%BC-%EA%B2%BD%EC%9A%B0-%EB%B0%A9%EB%B2%952\">필드가 가변 타입일 경우 방법2</a></li>\n</ul>\n</li>\n<li><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#clone-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">clone 주의사항</a></li>\n<li><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#%EB%B0%98%EC%A0%84\">반전</a></li>\n<li><a href=\"/Java/2022-03-15-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-13/#%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\">핵심 정리</a></li>\n</ul>","frontmatter":{"date":"2022년 03월 15일","title":"[Effective Java] Item13. clone 재정의는 주의해서 진행하라","tags":["Java","Effective Java","clone"]}}},"pageContext":{"slug":"/Java/2022-03-15-이펙티브자바-13/","previous":{"fields":{"slug":"/Java/2022-03-14-이펙티브자바-10/"},"frontmatter":{"title":"[Effective Java] Item10. equals는 일반 규약을 지켜 재정의하라"}},"next":{"fields":{"slug":"/Java/2022-03-16-이펙티브자바-15/"},"frontmatter":{"title":"[Effective Java] Item15. 클래스와 멤버의 접근 권한을 최소화하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}