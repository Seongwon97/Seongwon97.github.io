{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/20220228-이펙티브자바-4/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다. 객체 지향적인 사고로 보이지 않지만, 개발을 할 때 가끔씩 정적 메서드와 정적 필드만을 담은 클래스를 생성하고 싶을 때가 존재합니다. 사용될 예시를 보면 다음과 같습니다. java.lang.Math, java.util.Arrays와 같이 기본 타…","html":"<blockquote>\n<p>이 글은 Effective Java 3/E의 내용을 요약한 글입니다. 자세한 내용은 책을 참고하시기 바랍니다.</p>\n</blockquote>\n<p>객체 지향적인 사고로 보이지 않지만, 개발을 할 때 가끔씩 정적 메서드와 정적 필드만을 담은 클래스를 생성하고 싶을 때가 존재합니다.</p>\n<p>사용될 예시를 보면 다음과 같습니다.</p>\n<ul>\n<li><code>java.lang.Math</code>, <code>java.util.Arrays</code>와 같이 기본 타입 값이나 배열 관련 메서드를 모아둔 것</li>\n<li><code>java.util.Collectios</code>와 같이 특정 인터페이스를 구현하는 객체를 생성해주는 정적 메서드를 모아둔 것</li>\n<li>final 클래스를 상속하여 하위 클래스에 메서드를 넣는 것이 불가능하기에 final 클래스와 관련된 메서드를 모아둘 때</li>\n</ul>\n<p>이렇게 <strong>정적 멤버만 담은 유틸리티 클래스는 인스턴스로 만드려고 설계한게 아니라서, <code>private</code>접근 제어자를 가진 기본 생성자를 만들어 클래스의 인스턴스화를 막아줘야합니다.</strong></p>\n<p>private 생성자를 만들어줌으로써 클래스 안에서 실수로 생성자를 호출할 일이 발생하지 않으며, 이에 따라 해당 클래스가 인스턴스화 될 일이 발생하지 않습니다.\n또한 생성자가 private이라서 하위 클래스가 상위 클래스의 생성자에 접근할 길이 막혀 상속을 불가능하게 하는 효과도 낼 수 있습니다.</p>\n<blockquote>\n<p>private생성자는 직관적이지 않으니 아래의 코드와 같이 적절한 주석을 달아주면 좋습니다.</p>\n</blockquote>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Test</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk5 mtki\">// 기본 생성자가 만들어지는 것을 막는다(인스턴스화 방지용)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">private</span><span class=\"mtk3\"> Test</span><span class=\"mtk1\">()</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{ }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h1 id=\"핵심정리\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC\" aria-label=\"핵심정리 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심정리</h1>\n<p>정적 메서드와 정적 필드만을 담은 유틸리티 클래스를 생성할 때는 <code>private</code>접근 제어자를 가진 기본 생성자를 만들어줘야합니다.\n이를 만들어줌으로써 해당 클래스가 인스턴스화 될 일을 방지하고, 상속을 불가능하게 할 수 있습니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Java/20220228-%EC%9D%B4%ED%8E%99%ED%8B%B0%EB%B8%8C%EC%9E%90%EB%B0%94-4/#%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC\">핵심정리</a></li>\n</ul>","frontmatter":{"date":"2022년 02월 28일","title":"[Effective Java] Item4. 인스턴스화를 막으려거든 private 생성자를 사용하라","tags":["Java","Effective Java","Instance 관리","private"]}}},"pageContext":{"slug":"/Java/20220228-이펙티브자바-4/","previous":{"fields":{"slug":"/Java/20220228-제너릭이란/"},"frontmatter":{"title":"제너릭(Generic)이란?"}},"next":{"fields":{"slug":"/Java/20220228-이펙티브자바-3-싱글턴임을-보증하라/"},"frontmatter":{"title":"[Effective Java] Item3. private 생성자나 열거 타입으로 싱글턴임을 보증하라"}}}},"staticQueryHashes":["3911196313","4111100897"]}