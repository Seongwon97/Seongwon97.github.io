{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring-MVC/20220623-SpringBootTest어노테이션-학습하기/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"이번 게시글은 Spring에서 제공하는 테스트 라이브러리에 대한 간단한 설명과 @SpringBootTest를 이용한 통합 테스트를 하는 방법에 대해 정리해보고자 한다. 1. 테스트 의존성 추가하기 스프링은 테스트를 위해 아래의 2개의 Dependency를 제공하고 있다. spring-boot-test: core기능을 갖고 있다. spring-boot-st…","html":"<p>이번 게시글은 Spring에서 제공하는 테스트 라이브러리에 대한 간단한 설명과 @SpringBootTest를 이용한 통합 테스트를 하는 방법에 대해 정리해보고자 한다.</p>\n<h1 id=\"1-테스트-의존성-추가하기\" style=\"position:relative;\"><a href=\"#1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"1 테스트 의존성 추가하기 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 테스트 의존성 추가하기</h1>\n<p>스프링은 테스트를 위해 아래의 2개의 Dependency를 제공하고 있다.</p>\n<ul>\n<li><strong>spring-boot-test</strong>: core기능을 갖고 있다.</li>\n<li><strong>spring-boot-starter-test</strong>: Auto-configuration을 지원한다.</li>\n</ul>\n<h2 id=\"12-spring-boot-starter-test가-포함하는-모듈들\" style=\"position:relative;\"><a href=\"#12-spring-boot-starter-test%EA%B0%80-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EB%AA%A8%EB%93%88%EB%93%A4\" aria-label=\"12 spring boot starter test가 포함하는 모듈들 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. spring-boot-starter-test가 포함하는 모듈들</h2>\n<ul>\n<li><a href=\"https://junit.org/junit5/\">JUnit 5</a>: The de-facto standard for unit testing Java applications.</li>\n<li><a href=\"https://docs.spring.io/spring-framework/docs/5.3.20/reference/html/testing.html#integration-testing\">Spring Test</a> &#x26; Spring Boot Test: Utilities and integration test support for Spring Boot applications.</li>\n<li><a href=\"https://assertj.github.io/doc/\">AssertJ</a>: A fluent assertion library.</li>\n<li><a href=\"https://github.com/hamcrest/JavaHamcrest\">Hamcrest</a>: A library of matcher objects (also known as constraints or predicates).</li>\n<li><a href=\"https://site.mockito.org/\">Mockito</a>: A Java mocking framework.</li>\n<li><a href=\"https://github.com/skyscreamer/JSONassert\">JSONassert</a>: An assertion library for JSON.</li>\n<li><a href=\"https://github.com/jayway/JsonPath\">JsonPath</a>: XPath for JSON.</li>\n</ul>\n<p>spring-boot-starter-test는 이와 같이 많은 모듈들을 제공하기에 우리는 해당 의존성만을 추가하여도 테스트 환경을 쉽게 구축할 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">dependencies {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    testImplementation </span><span class=\"mtk6\">&#39;org.springframework.boot:spring-boot-starter-test&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">}</span></span></span></code></pre>\n<h1 id=\"2-spring-di로-인해-편리해진-test\" style=\"position:relative;\"><a href=\"#2-spring-di%EB%A1%9C-%EC%9D%B8%ED%95%B4-%ED%8E%B8%EB%A6%AC%ED%95%B4%EC%A7%84-test\" aria-label=\"2 spring di로 인해 편리해진 test permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Spring DI로 인해 편리해진 Test</h1>\n<p>DI의 장점으로는 단위 테스트를 하기 쉽다는 점이 있다. 객체의 의존성을 외부에서 주입을 해주기 때문에 우리는 테스트를 하며 진짜 객체가 아닌 Mock객체를 이용해 테스트 할 수 가 있다.</p>\n<p>덕분에 통합 테스트를 진행할 때 실제 서비스가 연결되어있는 인프라(운영 DB 등)에 연결을 하지 않아도 테스트를 진행할 수 있다.</p>\n<h1 id=\"3-springboottest\" style=\"position:relative;\"><a href=\"#3-springboottest\" aria-label=\"3 springboottest permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. @SpringBootTest</h1>\n<p>스프링 부트는 통합 테스트를 쉽게 하도록 <code>@SpringBootTest</code> 어노테이션을 제공하고 있다. <code>@SpringBootTest</code>를 사용하면 테스트들은 모든 빈들을 생성하며 Application Context를 만들어 테스트한다. 덕분에 여러 컴포넌트간의 연결을 테스트하는 통합 테스트를 진행할 수 있으나 테스트에 필요 없는 빈들까지 모두 등록을 하기때문에 테스트 자체가 무겁다는 단점이 있다. 만약 컨트롤러 테스트를 진행하고 싶은데 테스트에 필요한 빈들만을 등록하여 테스트를 하고 싶다면 <code>@WebMvcTest</code>를 사용하여 테스트 하는 방법도 존재한다.</p>\n<p>이번 게시글에서는 먼저 <code>@SpringBootTest</code>를 사용한 테스트 방법에 대해 자세히 알아보겠다.</p>\n<blockquote>\n<p>스프링 테스트 코드들을 보면 <code>@RunWith(SpringRunner.class)</code>, <code>@ExtendWith(SpringExtension.class)</code> 등이 붙은 코드들을 본 적이 있을 것이다. <code>@RunWith(SpringRunner.class)</code>는 JUnit 4버전에 필수적으로 들어가야하는 코드로 JUnit5에는 붙이지 않아도 된다. 그리고 <code>@ExtendWith(SpringExtension.class)</code>는 <code>@SpringBootTest</code>에 기본적으로 들어가있어서 <code>@SpringBootTest</code>를 사용하는 경우 붙이지 않아도 된다.\n즉, 우리가 최신 버전의 SpringBoot버전으로 <code>@SpringBootTest</code>를 사용할 경우 두 어노테이션들은 불이지 않아도 된다.</p>\n</blockquote>\n<h2 id=\"31-webenvironment\" style=\"position:relative;\"><a href=\"#31-webenvironment\" aria-label=\"31 webenvironment permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. webEnvironment</h2>\n<p><code>@SpringBootTest</code>는 기본적으로 서버를 실행시키지 않고 테스트를 진행한다. 이를 설정하기 위해서는 webEnvironment옵션을 설정해야 한다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">SpringBootTest</span><span class=\"mtk4\">(</span><span class=\"mtk7\">webEnvironment</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">SpringBootTest</span><span class=\"mtk1\">.</span><span class=\"mtk11\">WebEnvironment</span><span class=\"mtk1\">.</span><span class=\"mtk4\">RANDOM_PORT)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">IntegrationTest</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{}</span></span></span></code></pre>\n<ul>\n<li>\n<p><strong>MOCK</strong></p>\n<ul>\n<li>Default값으로 WebApplicationContext를 로드하여 <strong>가짜 웹 환경</strong>을 만들어 테스트한다. 해당 설정으로는 <strong>Embedded server(내장된 서블릿 컨테이너)를 실행하지 않고 테스트를 Mock Servlet을 만들어 테스트 하는 것으로 대체</strong>됩니다.</li>\n<li>테스트를 Mock기반의 테스트를 하기 때문에 다음 어노테이션을 같이 사용할 수 있다.</li>\n<li><code>[@AutoConfigureMockMvc</code> or <code>@AutoConfigureWebTestClient</code>](<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications.with-mock-environment\">https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.spring-boot-applications.with-mock-environment</a>)</li>\n<li><code>@AutoConfigureMockMvc</code>를 사용하면 별다른 설정 없이 컨트롤러 테스트를 용이하게 해주는 MockMvc를 사용해 테스트 할 수 있다.</li>\n<li><code>@AutoConfigureMockMvc</code>는 Mock 테스트시 필요한 의존성을 제공해준다. <code>MockMvc</code>객체를 통해 실제 컨테이너를 실행하는 것은 아니지만 로직상으로 테스트 가능하다.</li>\n</ul>\n</li>\n<li>\n<p><strong>RANDOM_PORT</strong></p>\n<ul>\n<li><code>WebServerApplicationContext</code>를 로드하고 랜덤한 포트에 실제 웹 환경과 동일한 환경(서블릿 환경)을 열어 테스트한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>DEFINED_PORT</strong></p>\n<ul>\n<li>RANDOM_PORT와 동일하게 구동되나 테스트 환경이 랜덤 포트가 아닌 <code>application.properties</code>에서 사전에 정의한 포트를 사용해 테스트한다. (default port는 8080이다.)</li>\n</ul>\n</li>\n<li>\n<p><strong>NONE</strong></p>\n<ul>\n<li>SpringApplication를 통해 ApplicationContext를 로드하나 mock이나 실제 환경과 같은 웹 환경을 제공하지 않는다.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>테스트들은 <code>@Transactional</code>이면 각각의 테스트들이 끝난 후 자동으로 roll-back됩니다. 하지만 <code>WebEnvironment.RANDOM_PORT, DEFINED_PORT</code>는 실제 테스트는 별도의 스레드에서 테스트를 수행하여 roll-back되지 않는다.🤡</p>\n</blockquote>\n<p><strong>8.3.2. Detecting Test Configuration</strong></p>\n<p>SpringBoot는 특정 @ContextConfiguration(loader=...)이 정의되지 않은 경우 SpringBootContextLoader를 기본 ContextLoader를 사용합니다. @Configuration이 사용되지 않고 명시적 클래스가 지정되지 않은 경우 @SpringBootConfiguration을 자동으로 검색합니다.</p>\n<blockquote>\n<p>Spring Test Framework는 테스트의 ApplicationContext를 캐싱합니다. 덕분에 동일한 Configuration을 갖게 된다면 Context를 로드하는 작업은 한번만 하게 됩니다.</p>\n</blockquote>\n<h2 id=\"testing-with-a-mock-environment\" style=\"position:relative;\"><a href=\"#testing-with-a-mock-environment\" aria-label=\"testing with a mock environment permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Testing with a mock environment</strong></h2>\n<p><code>@SpringBootTest</code>는 앞서 말했듯이 webEnvironment를 설정하지 않으면 기본적으로 Mock 서블릿 환경을 만들어 테스트를 한다.</p>\n<p>이를 테스트 하기 위해서는 MockMvc와 WebTestClient를 사용할 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.junit.jupiter.api.Test</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.beans.factory.annotation.Autowired</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.boot.test.context.SpringBootTest</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.test.web.reactive.server.WebTestClient</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.test.web.servlet.MockMvc</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.test.web.servlet.result.MockMvcResultMatchers.content</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk9\">static</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.test.web.servlet.result.MockMvcResultMatchers.status</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">SpringBootTest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">AutoConfigureMockMvc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">MyMockMvcTests</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">Test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> testWithMockMvc</span><span class=\"mtk1\">(@</span><span class=\"mtk11\">Autowired</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MockMvc</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">mvc</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk9\">throws</span><span class=\"mtk3\"> </span><span class=\"mtk11\">Exception</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">mvc</span><span class=\"mtk1\">.</span><span class=\"mtk3\">perform</span><span class=\"mtk1\">(</span><span class=\"mtk3\">get</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;/&quot;</span><span class=\"mtk1\">)).</span><span class=\"mtk3\">andExpect</span><span class=\"mtk1\">(</span><span class=\"mtk3\">status</span><span class=\"mtk1\">().</span><span class=\"mtk3\">isOk</span><span class=\"mtk1\">()).</span><span class=\"mtk3\">andExpect</span><span class=\"mtk1\">(</span><span class=\"mtk3\">content</span><span class=\"mtk1\">().</span><span class=\"mtk3\">string</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;Hello World&quot;</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk5 mtki\">// If Spring WebFlux is on the classpath, you can drive MVC tests with a WebTestClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">Test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> testWithWebTestClient</span><span class=\"mtk1\">(@</span><span class=\"mtk11\">Autowired</span><span class=\"mtk1\"> </span><span class=\"mtk11\">WebTestClient</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">webClient</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        webClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                .</span><span class=\"mtk3\">get</span><span class=\"mtk1\">().</span><span class=\"mtk3\">uri</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;/&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                .</span><span class=\"mtk3\">exchange</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                .</span><span class=\"mtk3\">expectStatus</span><span class=\"mtk1\">().</span><span class=\"mtk3\">isOk</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                .</span><span class=\"mtk3\">expectBody</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\">.</span><span class=\"mtk4\">class</span><span class=\"mtk1\">).</span><span class=\"mtk3\">isEqualTo</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;Hello World&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>모든 빈들을 만들며 ApplicationContext을 생성하지 않고 필요한 빈들만을 등록하며 Web Layer의 테스트에 집중하기 위해서는 @WebMvcTest를 사용할 수 있다.</li>\n</ul>\n<p>Mock환경에서 테스트하는 것은 실제 Servlet Container를 만들어 테스트하는 것보다 빠르다. 하지만 Spring MVC 계층에서 Mocking이 발생하기에 더욱 low level인 Servlet Container에 대한 테스트는 MockMvc로 테스트할 수가 없다.</p>\n<ul>\n<li>ex) 서블릿 컨테이너가 제공하는 error page가 랜더링 되는지 등의 테스트를 할 수 없다. 이를 테스트 하기 위해서는 실제 서버로 테스트해야한다.</li>\n</ul>\n<h2 id=\"testing-with-a-running-server\" style=\"position:relative;\"><a href=\"#testing-with-a-running-server\" aria-label=\"testing with a running server permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Testing with a running server</strong></h2>\n<p>실제 Servlet Container에서 테스트를 하기 위해서는 <code>WebEnvironment.RANDOM_PORT, DEFINED_PORT</code>에서 테스트를 해야한다.</p>\n<p><code>@LocalServerPort</code>주석을 사용 하여 테스트에 사용된 실제 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.webserver.discover-port\">포트를 삽입 할 수 있습니다.</a> 편의를 위해 시작된 서버에 대한 REST 호출을 수행해야 하는 테스트 는 다음 예제와 같이 실행 중인 서버에 대한 상대 링크를 확인하고 응답 확인을 위한 전용 API와 함께 제공되는 <code>[WebTestClient](https://docs.spring.io/spring-framework/docs/5.3.20/reference/html/testing.html#webtestclient-tests)</code> 를 <code>@Autowire</code>로 불러올 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.junit.jupiter.api.Test</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.beans.factory.annotation.Autowired</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.boot.test.context.SpringBootTest</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.boot.test.context.SpringBootTest.WebEnvironment</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">import</span><span class=\"mtk4\"> </span><span class=\"mtk11\">org.springframework.test.web.reactive.server.WebTestClient</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">SpringBootTest</span><span class=\"mtk4\">(</span><span class=\"mtk7\">webEnvironment</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">WebEnvironment</span><span class=\"mtk1\">.</span><span class=\"mtk4\">RANDOM_PORT)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">MyRandomPortWebTestClientTests</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">Test</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">void</span><span class=\"mtk3\"> exampleTest</span><span class=\"mtk1\">(@</span><span class=\"mtk11\">Autowired</span><span class=\"mtk1\"> </span><span class=\"mtk11\">WebTestClient</span><span class=\"mtk1\"> </span><span class=\"mtk4 mtki\">webClient</span><span class=\"mtk1\">)</span><span class=\"mtk3\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        webClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk3\">get</span><span class=\"mtk1\">().</span><span class=\"mtk3\">uri</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;/&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk3\">exchange</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk3\">expectStatus</span><span class=\"mtk1\">().</span><span class=\"mtk3\">isOk</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk3\">expectBody</span><span class=\"mtk1\">(</span><span class=\"mtk11\">String</span><span class=\"mtk1\">.</span><span class=\"mtk4\">class</span><span class=\"mtk1\">).</span><span class=\"mtk3\">isEqualTo</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;Hello World&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing\">Core Features 8. Testing</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Spring-MVC/20220623-SpringBootTest%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0/#1-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">1. 테스트 의존성 추가하기</a></p>\n<ul>\n<li><a href=\"/Spring-MVC/20220623-SpringBootTest%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0/#12-spring-boot-starter-test%EA%B0%80-%ED%8F%AC%ED%95%A8%ED%95%98%EB%8A%94-%EB%AA%A8%EB%93%88%EB%93%A4\">1.2. spring-boot-starter-test가 포함하는 모듈들</a></li>\n</ul>\n</li>\n<li><a href=\"/Spring-MVC/20220623-SpringBootTest%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0/#2-spring-di%EB%A1%9C-%EC%9D%B8%ED%95%B4-%ED%8E%B8%EB%A6%AC%ED%95%B4%EC%A7%84-test\">2. Spring DI로 인해 편리해진 Test</a></li>\n<li>\n<p><a href=\"/Spring-MVC/20220623-SpringBootTest%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0/#3-springboottest\">3. @SpringBootTest</a></p>\n<ul>\n<li><a href=\"/Spring-MVC/20220623-SpringBootTest%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0/#31-webenvironment\">3.1. webEnvironment</a></li>\n<li><a href=\"/Spring-MVC/20220623-SpringBootTest%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0/#testing-with-a-mock-environment\"><strong>Testing with a mock environment</strong></a></li>\n<li><a href=\"/Spring-MVC/20220623-SpringBootTest%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0/#testing-with-a-running-server\"><strong>Testing with a running server</strong></a></li>\n</ul>\n</li>\n<li><a href=\"/Spring-MVC/20220623-SpringBootTest%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%ED%95%99%EC%8A%B5%ED%95%98%EA%B8%B0/#reference\">Reference</a></li>\n</ul>","frontmatter":{"date":"2022년 06월 23일","title":"[Spring 테스트] @SpringBootTest를 이용해 통합 테스트하기","tags":["SpringFramework","Test","SpringBootTest"]}}},"pageContext":{"slug":"/Spring-MVC/20220623-SpringBootTest어노테이션-학습하기/","previous":{"fields":{"slug":"/Spring-MVC/20220622-Valid란/"},"frontmatter":{"title":"[Spring] Validation Annotation이란? + DTO에서는 어디까지 검증해야할까?"}},"next":{"fields":{"slug":"/Spring-MVC/20220624-MockMvc란/"},"frontmatter":{"title":"[Spring 테스트] MockMvc란 무엇일까?"}}}},"staticQueryHashes":["3911196313","4111100897"]}