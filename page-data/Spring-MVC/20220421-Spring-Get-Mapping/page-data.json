{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring-MVC/20220421-Spring-Get-Mapping/","result":{"data":{"site":{"siteMetadata":{"author":"Seongwon","comment":{"utterances":"Seongwon97/Seongwon97.github.io"},"sponsor":{"buyMeACoffeeId":"seongwon"}}},"markdownRemark":{"excerpt":"REST API디자인을 하기 위해서 자원에 대한 행위들은 HTTP Method로 표현을 해야한다. HTTP Method에는 GET, POST, PUT, DELETE 등이 존재한다. 오늘은 Spring Boot에서 GET API를 사용하는 방법에 대해 알아볼 것이다. GET API의 특징 리소스를 취득하는 작업을 하는 API이다. CRUD에서 R에 해당한다…","html":"<p>REST API디자인을 하기 위해서 자원에 대한 행위들은 HTTP Method로 표현을 해야한다. HTTP Method에는 GET, POST, PUT, DELETE 등이 존재한다.</p>\n<p>오늘은 Spring Boot에서 GET API를 사용하는 방법에 대해 알아볼 것이다.</p>\n<h2 id=\"get-api의-특징\" style=\"position:relative;\"><a href=\"#get-api%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"get api의 특징 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET API의 특징</h2>\n<ul>\n<li>리소스를 취득하는 작업을 하는 API이다.</li>\n<li>CRUD에서 R에 해당한다.</li>\n<li>값을 읽어오기만하여 멱등성과 안정성이 있다는 특징이 있다.</li>\n<li>Path Variable을 사용가능하다.</li>\n<li>Query Parameter도 사용가능하다.</li>\n</ul>\n<h2 id=\"사용되는-annotation의-종류\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-annotation%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"사용되는 annotation의 종류 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용되는 Annotation의 종류</h2>\n<ul>\n<li>\n<p><strong>@RestController</strong></p>\n<ul>\n<li>해당 annotation을 추가해주면 해당 class는 REST API를 처리하는 controller로 등록이 된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@RequestMapping(path)</strong></p>\n<ul>\n<li>리소스를 설정하는 코드이며 괄호안에 입력하는 값에 따라 URI가 localhost:8080/path로 설정된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@GetMapping(path)</strong></p>\n<ul>\n<li>Get API를 해당 uri로 mapping시켜준다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@PathVariable</strong></p>\n<ul>\n<li>변화하는 구간에 사용하는 annotation이며 URL path를 parsing해준다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@RequestParam</strong></p>\n<ul>\n<li>URL에 Query문을 추가할 때 parameter를 parshing해준다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"get-api사용하기\" style=\"position:relative;\"><a href=\"#get-api%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"get api사용하기 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET API사용하기</h2>\n<h3 id=\"getmapping사용하기\" style=\"position:relative;\"><a href=\"#getmapping%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"getmapping사용하기 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GetMapping사용하기</h3>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">RestController</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk11\">RequestMapping</span><span class=\"mtk4\">(</span><span class=\"mtk6\">&quot;/api/get&quot;</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk9\">class</span><span class=\"mtk4\"> </span><span class=\"mtk11\">GetApiController</span><span class=\"mtk4\"> </span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk5 mtki\">// http://localhost:9090/api/get/hello</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">GetMapping</span><span class=\"mtk4\">(</span><span class=\"mtk7\">path</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;/hello&quot;</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk3\"> </span><span class=\"mtk11\">String</span><span class=\"mtk3\"> Hello</span><span class=\"mtk1\">(){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk9\">return</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot;get Hello&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Spring boot가 처음이기에 코드에 대해 처음부터 설명을 하며 정리를 해보려한다.\n먼저 Class를 생성하는 코드부터 보겠다. 코드의 첫번째 줄인 <code>@RestController</code>은 해당 annotation을 추가해주면서 해당 class는 REST API를 처리하는 controller로 등록을 한다.\n두전째 줄인 <code>@RequestMapping(\"/api/get\")</code>은 URI를 지정해주는 annotation이다.\n이렇게 <code>@RestController</code>, <code>@RequestMapping(\"/api/get\")</code>를 통해 GetApiController class는 기본 uri를 <a href=\"http://localhost:8080/api/get\">http://localhost:8080/api/get</a> 로 갖으며 REST API를 처리하는 controller로 생성되었다.</p>\n<p>다음으로 Method를 확인해보겠다. Method위에 추가된 <code>@GetMapping(path = \"/hello\")</code>라는 annotatin은 GET 요청이 path로 들어오면 해당 method를 mapping시켜주겠다는 의미를 가진다. 위의 코드의 경우는 기본 주소인 <a href=\"http://localhost:8080/api/get%EC%97%90\">http://localhost:8080/api/get에</a> path인 /hello를 추가하여 <a href=\"http://localhost:9090/api/get/hello\">http://localhost:9090/api/get/hello</a> 로 GET request가 들어오면 method가 실행되고 결과인 \"get Hello\"를 return해주게 된다.</p>\n<p><code>@GetMapping</code>은 기본적으로 괄호안에 (\"/hello\")라고 입력을 해도 괄호 안의 값을 value값으로 인식을 해서 path = \"/hello\"와 같은 결과를 내게 된다. 그래서 path는 꼭 써주지 않아도 된다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">RequestMapping</span><span class=\"mtk4\">(</span><span class=\"mtk7\">path</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;/hi&quot;</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> </span><span class=\"mtk7\">method</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk11\">RequestMethod</span><span class=\"mtk1\">.</span><span class=\"mtk4\">GET)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> </span><span class=\"mtk3\">hi</span><span class=\"mtk4\">(){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;get hi&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span></code></pre>\n<p>위의 코드는 과거에 사용하던 방식으로 RequestMapping을 하면 Get, Post, Put, Delete가 모두 동작한다. 위와 같이 Get만 사용하도록 지정하고 싶다면 method parameter를 추가해주면 된다.</p>\n<h3 id=\"pathvariable-사용하기\" style=\"position:relative;\"><a href=\"#pathvariable-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"pathvariable 사용하기 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PathVariable 사용하기</h3>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">GetMapping</span><span class=\"mtk4\">(</span><span class=\"mtk6\">&quot;path-variable/{name}&quot;</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> </span><span class=\"mtk3\">pathVariable</span><span class=\"mtk4\">(</span><span class=\"mtk1\">@</span><span class=\"mtk11\">PathVariable</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> name){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk5 mtki\">// 일반적으로 34번,35번,38번 line의 변수명(name)이 같아야한다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;PathVariable : &quot;</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> name);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> name</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span></code></pre>\n<p>사용자의 이름, 아이디 등 변할 수 있는 정보를 URI에 넣어야 한다면 개발자는 같은 method를 각각의 path를 마다 생성해줘야 할 것이다. 하지만 이것은 매우 비효율적인 개발 방법이며 이러한 일을 해결해 주는 것이 PathVariable이다. 변화하는 구간에 대해서는 PathVariable을 사용해야한다.</p>\n<p>PathVariable은 <code>@GetMapping</code>의 Path를 \"path-variable/{name}\"와 같이 변경될 수 있는 부분을 { }로 지정해주며 사용한다. { }안에는 변수명을 적으며 method의 parameter에 <code>@PathVariable</code> 변수명을 입력하며 { }에 들어가는 값을 읽어온다.</p>\n<p>위의 코드의 경우는 <a href=\"http://localhost:8080/api/get/path-variable/seongwon\">http://localhost:8080/api/get/path-variable/seongwon</a> 이라는 URI로 request가 왔다면 name은 seongwon이 되며 return될 것이다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">   </span><span class=\"mtk1\">@</span><span class=\"mtk11\">GetMapping</span><span class=\"mtk4\">(</span><span class=\"mtk6\">&quot;path-variable/{name}&quot;</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> </span><span class=\"mtk3\">pathVariable</span><span class=\"mtk4\">(</span><span class=\"mtk1\">@</span><span class=\"mtk11\">PathVariable</span><span class=\"mtk4\">(</span><span class=\"mtk7\">name</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;name&quot;</span><span class=\"mtk4\">) </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> pathName){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;PathVariable : &quot;</span><span class=\"mtk1\"> </span><span class=\"mtk8\">+</span><span class=\"mtk1\"> pathName);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> pathName</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span></code></pre>\n<p>프로그래밍을 하다보면 변수가 꼬여 PathVariable의 변수명을 다르게 설정해야하는 상황이 생길 수도 있다. 그러한 경우에는 위의 코드와 같이 method parameter에 <code>@PathVariable</code>에 (name=~~)와 같이 지정을 하며 다른 변수명을 사용할 수도 있다.</p>\n<h3 id=\"query-parameter-사용하기\" style=\"position:relative;\"><a href=\"#query-parameter-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"query parameter 사용하기 permalink\" class=\"toc-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query Parameter 사용하기</h3>\n<p><a href=\"https://www.google.com/search?q=velog.&#x26;oq=velog.&#x26;aqs=chrome..69i57j0i512l2j0i30j69i60l4.4182j0j4&#x26;sourceid=chrome&#x26;ie=UTF-8\">https://www.google.com/search?q=velog.&#x26;oq=velog.&#x26;aqs=chrome..69i57j0i512l2j0i30j69i60l4.4182j0j4&#x26;sourceid=chrome&#x26;ie=UTF-8</a> 다음 주소를 한번 확인해보자.\nQuery parameter는 위의 주소에서 search? 부터의 주소를 의미한다. 즉, 검색을 할 때 여러가지 매개변수들을 의미한다.</p>\n<p>위의 주소를 자세히 보면 중간 중간 and 연산자가 있다.\n한번 Query parameter를 &#x26;로 나눠서 보도록 하자</p>\n<blockquote>\n<p>search?q=velog.\n&#x26;oq=velog.\n&#x26;aqs=chrome..69i57j0i512l2j0i30j69i60l4.4182j0j4\n&#x26;sourceid=chrome&#x26;ie=UTF-8</p>\n</blockquote>\n<p>&#x26; 단위로 나눠서 본 URI를 확인해보면 처음에 Search이후 ?로 시작을 하여 key=value의 형식으로 문장이 이어지는 것을 확인할 수 있다.</p>\n<p>Query parameter는 즉 Key, value값으로 이루어진 연속된 query문으로 이루어진 것을 알 수 있다.</p>\n<p>이제 Query parameter를 받는 방법을 알아보도록 하자.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">GetMapping</span><span class=\"mtk4\">(</span><span class=\"mtk7\">path</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;query-param01&quot;</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> </span><span class=\"mtk3\">queryParam01</span><span class=\"mtk4\">(</span><span class=\"mtk1\">@</span><span class=\"mtk11\">RequestParam</span><span class=\"mtk4\"> </span><span class=\"mtk11\">Map</span><span class=\"mtk8\">&lt;</span><span class=\"mtk4\">String</span><span class=\"mtk1\">,</span><span class=\"mtk4\"> String</span><span class=\"mtk8\">&gt;</span><span class=\"mtk4\"> queryParam){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk5 mtki\">// key=value값으로 데이터를 받기에 Map으로 구현</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">StringBuilder</span><span class=\"mtk4\"> sb </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk9\">new</span><span class=\"mtk4\"> </span><span class=\"mtk3\">StringBuilder</span><span class=\"mtk4\">()</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">queryParam</span><span class=\"mtk1\">.</span><span class=\"mtk3\">entrySet</span><span class=\"mtk1\">().</span><span class=\"mtk3\">forEach</span><span class=\"mtk1\">( entry </span><span class=\"mtk9\">-&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">entry</span><span class=\"mtk1\">.</span><span class=\"mtk3\">getKey</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">entry</span><span class=\"mtk1\">.</span><span class=\"mtk3\">getValue</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk6\">&quot;</span><span class=\"mtk8\">\\n</span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">           </span><span class=\"mtk11\">sb</span><span class=\"mtk1\">.</span><span class=\"mtk3\">append</span><span class=\"mtk1\">(</span><span class=\"mtk11\">entry</span><span class=\"mtk1\">.</span><span class=\"mtk3\">getKey</span><span class=\"mtk1\">()</span><span class=\"mtk8\">+</span><span class=\"mtk1\"> </span><span class=\"mtk6\">&quot; = &quot;</span><span class=\"mtk8\">+</span><span class=\"mtk11\">entry</span><span class=\"mtk1\">.</span><span class=\"mtk3\">getValue</span><span class=\"mtk1\">()</span><span class=\"mtk8\">+</span><span class=\"mtk6\">&quot;</span><span class=\"mtk8\">\\n</span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> </span><span class=\"mtk11\">sb</span><span class=\"mtk1\">.</span><span class=\"mtk3\">toString</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span></code></pre>\n<p>위의 코드는 Map을 활용하여 Key, value값을 받아온 코드이다.\n하지만 위의 코드의 경우는 Key값들이 무엇이 있는지 코드상으로 명확하게 알 수가 없다.\n아래와 같이 <code>@RequestParam</code>을 여러번 사용하여 Key값을 지정하고 값을 받아오면 Query parameter에서 사용하는 key값들을 미리 알고 지정할 수 있다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">GetMapping</span><span class=\"mtk4\">(</span><span class=\"mtk7\">path</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;query-param02&quot;</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> </span><span class=\"mtk3\">queryParam02</span><span class=\"mtk4\">(</span><span class=\"mtk1\">@</span><span class=\"mtk11\">RequestParam</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> name</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">                               </span><span class=\"mtk1\">@</span><span class=\"mtk11\">RequestParam</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> email</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">                               </span><span class=\"mtk1\">@</span><span class=\"mtk11\">RequestParam</span><span class=\"mtk4\"> </span><span class=\"mtk9\">int</span><span class=\"mtk4\"> age){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(name);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(email);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(age);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> name</span><span class=\"mtk8\">+</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;</span><span class=\"mtk8\">\\n</span><span class=\"mtk6\">&quot;</span><span class=\"mtk4\"> </span><span class=\"mtk8\">+</span><span class=\"mtk4\"> email</span><span class=\"mtk8\">+</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;</span><span class=\"mtk8\">\\n</span><span class=\"mtk6\">&quot;</span><span class=\"mtk8\">+</span><span class=\"mtk4\">age</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span></code></pre>\n<p>마지막 방법은 객체를 미리 정의하고 사용하는 방법으로 현재 사람들이 가장 많이 사용하는 방법이다.\nRequest DTO(객체)를 미리 만들어 사용하는 방법은 이전 방식과 다르게 @RequestParam을 붙이지 않는다.\n코드의 동작 원리는 다음과 같다. Spring boot에서는 parameter로 객체가 들어오면 \"?user=steve&#x26;email=steve@gmail.com&#x26;age=30\"와 같은 query parameter에 있는 객체들을 spring boot에서 판단을 하고 key에 위치한 값들을 객체의 변수의 이름과 매칭을 해주며 작동을 한다.</p>\n<pre class=\"grvsc-container one-dark-pro\" data-language=\"java\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk1\">@</span><span class=\"mtk11\">GetMapping</span><span class=\"mtk4\">(</span><span class=\"mtk7\">path</span><span class=\"mtk4\"> </span><span class=\"mtk8\">=</span><span class=\"mtk4\"> </span><span class=\"mtk6\">&quot;query-param03&quot;</span><span class=\"mtk4\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    </span><span class=\"mtk9\">public</span><span class=\"mtk4\"> </span><span class=\"mtk11\">String</span><span class=\"mtk4\"> </span><span class=\"mtk3\">queryParam03</span><span class=\"mtk4\">(</span><span class=\"mtk11\">UserRequest</span><span class=\"mtk4\"> userRequest){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk5 mtki\">// 이전 방식과 다르게 @RequestParam을 붙이지 않는다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk5 mtki\">// Spring boot에서는 parameter로 객체가 들어오면</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk5 mtki\">// &quot;?user=steve&amp;email=steve@gmail.com&amp;age=30&quot;와 같은</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk5 mtki\">// query parameter에 있는 객체들을 spring boot에서 판단한다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk5 mtki\">// 그리고 key에 위치한 값들을 객체의 변수의 이름과 매칭을 해준다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">userRequest</span><span class=\"mtk1\">.</span><span class=\"mtk3\">getName</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">userRequest</span><span class=\"mtk1\">.</span><span class=\"mtk3\">getEmail</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk11\">System</span><span class=\"mtk1\">.</span><span class=\"mtk11\">out</span><span class=\"mtk1\">.</span><span class=\"mtk3\">println</span><span class=\"mtk1\">(</span><span class=\"mtk11\">userRequest</span><span class=\"mtk1\">.</span><span class=\"mtk3\">getAge</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">        </span><span class=\"mtk9\">return</span><span class=\"mtk4\"> </span><span class=\"mtk11\">userRequest</span><span class=\"mtk1\">.</span><span class=\"mtk3\">toString</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">    }</span></span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .one-dark-pro {\n    background-color: #282c34;\n    color: #abb2bf;\n  }\n  .one-dark-pro .mtki { font-style: italic; }\n  .one-dark-pro .mtk1 { color: #ABB2BF; }\n  .one-dark-pro .mtk11 { color: #E5C07B; }\n  .one-dark-pro .mtk4 { color: #E06C75; }\n  .one-dark-pro .mtk6 { color: #98C379; }\n  .one-dark-pro .mtk9 { color: #C678DD; }\n  .one-dark-pro .mtk5 { color: #7F848E; }\n  .one-dark-pro .mtk7 { color: #D19A66; }\n  .one-dark-pro .mtk8 { color: #56B6C2; }\n  .one-dark-pro .mtk3 { color: #61AFEF; }\n  .one-dark-pro .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/Spring-MVC/20220421-Spring-Get-Mapping/#get-api%EC%9D%98-%ED%8A%B9%EC%A7%95\">GET API의 특징</a></li>\n<li><a href=\"/Spring-MVC/20220421-Spring-Get-Mapping/#%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-annotation%EC%9D%98-%EC%A2%85%EB%A5%98\">사용되는 Annotation의 종류</a></li>\n<li>\n<p><a href=\"/Spring-MVC/20220421-Spring-Get-Mapping/#get-api%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">GET API사용하기</a></p>\n<ul>\n<li><a href=\"/Spring-MVC/20220421-Spring-Get-Mapping/#getmapping%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">GetMapping사용하기</a></li>\n<li><a href=\"/Spring-MVC/20220421-Spring-Get-Mapping/#pathvariable-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">PathVariable 사용하기</a></li>\n<li><a href=\"/Spring-MVC/20220421-Spring-Get-Mapping/#query-parameter-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">Query Parameter 사용하기</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"2022년 04월 21일","title":"[Spring] GetMapping","tags":["SpringFramework","GetMapping"]}}},"pageContext":{"slug":"/Spring-MVC/20220421-Spring-Get-Mapping/","previous":{"fields":{"slug":"/Git/20220323-미션코드로-잔디심기/"},"frontmatter":{"title":"[Git] 미션 코드로 잔디 심기"}},"next":{"fields":{"slug":"/Spring-MVC/20220422-Spring-Post-Mapping/"},"frontmatter":{"title":"[Spring] PostMapping"}}}},"staticQueryHashes":["3911196313","4111100897"]}